{"Headers":{"Last-Modified":"Mon, 12 Sep 2022 08:38:12 GMT","X-Content-Type-Options":"nosniff"},"Body":"LyohIGpRdWVyeSB2My40LjEgfCAoYykgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIHwganF1ZXJ5Lm9yZy9saWNlbnNlICovDQohZnVuY3Rpb24oZSx0KXsidXNlIHN0cmljdCI7Im9iamVjdCI9PXR5cGVvZiBtb2R1bGUmJiJvYmplY3QiPT10eXBlb2YgbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9ZS5kb2N1bWVudD90KGUsITApOmZ1bmN0aW9uKGUpe2lmKCFlLmRvY3VtZW50KXRocm93IG5ldyBFcnJvcigialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudCIpO3JldHVybiB0KGUpfTp0KGUpfSgidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyxmdW5jdGlvbihDLGUpeyJ1c2Ugc3RyaWN0Ijt2YXIgdD1bXSxFPUMuZG9jdW1lbnQscj1PYmplY3QuZ2V0UHJvdG90eXBlT2Yscz10LnNsaWNlLGc9dC5jb25jYXQsdT10LnB1c2gsaT10LmluZGV4T2Ysbj17fSxvPW4udG9TdHJpbmcsdj1uLmhhc093blByb3BlcnR5LGE9di50b1N0cmluZyxsPWEuY2FsbChPYmplY3QpLHk9e30sbT1mdW5jdGlvbihlKXtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgZSYmIm51bWJlciIhPXR5cGVvZiBlLm5vZGVUeXBlfSx4PWZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT1lJiZlPT09ZS53aW5kb3d9LGM9e3R5cGU6ITAsc3JjOiEwLG5vbmNlOiEwLG5vTW9kdWxlOiEwfTtmdW5jdGlvbiBiKGUsdCxuKXt2YXIgcixpLG89KG49bnx8RSkuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7aWYoby50ZXh0PWUsdClmb3IociBpbiBjKShpPXRbcl18fHQuZ2V0QXR0cmlidXRlJiZ0LmdldEF0dHJpYnV0ZShyKSkmJm8uc2V0QXR0cmlidXRlKHIsaSk7bi5oZWFkLmFwcGVuZENoaWxkKG8pLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobyl9ZnVuY3Rpb24gdyhlKXtyZXR1cm4gbnVsbD09ZT9lKyIiOiJvYmplY3QiPT10eXBlb2YgZXx8ImZ1bmN0aW9uIj09dHlwZW9mIGU/bltvLmNhbGwoZSldfHwib2JqZWN0Ijp0eXBlb2YgZX12YXIgZj0iMy40LjEiLGs9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IGsuZm4uaW5pdChlLHQpfSxwPS9eW1xzXHVGRUZGXHhBMF0rfFtcc1x1RkVGRlx4QTBdKyQvZztmdW5jdGlvbiBkKGUpe3ZhciB0PSEhZSYmImxlbmd0aCJpbiBlJiZlLmxlbmd0aCxuPXcoZSk7cmV0dXJuIW0oZSkmJiF4KGUpJiYoImFycmF5Ij09PW58fDA9PT10fHwibnVtYmVyIj09dHlwZW9mIHQmJjA8dCYmdC0xIGluIGUpfWsuZm49ay5wcm90b3R5cGU9e2pxdWVyeTpmLGNvbnN0cnVjdG9yOmssbGVuZ3RoOjAsdG9BcnJheTpmdW5jdGlvbigpe3JldHVybiBzLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9zLmNhbGwodGhpcyk6ZTwwP3RoaXNbZSt0aGlzLmxlbmd0aF06dGhpc1tlXX0scHVzaFN0YWNrOmZ1bmN0aW9uKGUpe3ZhciB0PWsubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLGUpO3JldHVybiB0LnByZXZPYmplY3Q9dGhpcyx0fSxlYWNoOmZ1bmN0aW9uKGUpe3JldHVybiBrLmVhY2godGhpcyxlKX0sbWFwOmZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLnB1c2hTdGFjayhrLm1hcCh0aGlzLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uY2FsbChlLHQsZSl9KSl9LHNsaWNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHMuYXBwbHkodGhpcyxhcmd1bWVudHMpKX0sZmlyc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgwKX0sbGFzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKC0xKX0sZXE6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5sZW5ndGgsbj0rZSsoZTwwP3Q6MCk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKDA8PW4mJm48dD9bdGhpc1tuXV06W10pfSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmV2T2JqZWN0fHx0aGlzLmNvbnN0cnVjdG9yKCl9LHB1c2g6dSxzb3J0OnQuc29ydCxzcGxpY2U6dC5zcGxpY2V9LGsuZXh0ZW5kPWsuZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGUsdCxuLHIsaSxvLGE9YXJndW1lbnRzWzBdfHx7fSxzPTEsdT1hcmd1bWVudHMubGVuZ3RoLGw9ITE7Zm9yKCJib29sZWFuIj09dHlwZW9mIGEmJihsPWEsYT1hcmd1bWVudHNbc118fHt9LHMrKyksIm9iamVjdCI9PXR5cGVvZiBhfHxtKGEpfHwoYT17fSkscz09PXUmJihhPXRoaXMscy0tKTtzPHU7cysrKWlmKG51bGwhPShlPWFyZ3VtZW50c1tzXSkpZm9yKHQgaW4gZSlyPWVbdF0sIl9fcHJvdG9fXyIhPT10JiZhIT09ciYmKGwmJnImJihrLmlzUGxhaW5PYmplY3Qocil8fChpPUFycmF5LmlzQXJyYXkocikpKT8obj1hW3RdLG89aSYmIUFycmF5LmlzQXJyYXkobik/W106aXx8ay5pc1BsYWluT2JqZWN0KG4pP246e30saT0hMSxhW3RdPWsuZXh0ZW5kKGwsbyxyKSk6dm9pZCAwIT09ciYmKGFbdF09cikpO3JldHVybiBhfSxrLmV4dGVuZCh7ZXhwYW5kbzoialF1ZXJ5IisoZitNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cRC9nLCIiKSxpc1JlYWR5OiEwLGVycm9yOmZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihlKX0sbm9vcDpmdW5jdGlvbigpe30saXNQbGFpbk9iamVjdDpmdW5jdGlvbihlKXt2YXIgdCxuO3JldHVybiEoIWV8fCJbb2JqZWN0IE9iamVjdF0iIT09by5jYWxsKGUpKSYmKCEodD1yKGUpKXx8ImZ1bmN0aW9uIj09dHlwZW9mKG49di5jYWxsKHQsImNvbnN0cnVjdG9yIikmJnQuY29uc3RydWN0b3IpJiZhLmNhbGwobik9PT1sKX0saXNFbXB0eU9iamVjdDpmdW5jdGlvbihlKXt2YXIgdDtmb3IodCBpbiBlKXJldHVybiExO3JldHVybiEwfSxnbG9iYWxFdmFsOmZ1bmN0aW9uKGUsdCl7YihlLHtub25jZTp0JiZ0Lm5vbmNlfSl9LGVhY2g6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTA7aWYoZChlKSl7Zm9yKG49ZS5sZW5ndGg7cjxuO3IrKylpZighMT09PXQuY2FsbChlW3JdLHIsZVtyXSkpYnJlYWt9ZWxzZSBmb3IociBpbiBlKWlmKCExPT09dC5jYWxsKGVbcl0scixlW3JdKSlicmVhaztyZXR1cm4gZX0sdHJpbTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT8iIjooZSsiIikucmVwbGFjZShwLCIiKX0sbWFrZUFycmF5OmZ1bmN0aW9uKGUsdCl7dmFyIG49dHx8W107cmV0dXJuIG51bGwhPWUmJihkKE9iamVjdChlKSk/ay5tZXJnZShuLCJzdHJpbmciPT10eXBlb2YgZT9bZV06ZSk6dS5jYWxsKG4sZSkpLG59LGluQXJyYXk6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBudWxsPT10Py0xOmkuY2FsbCh0LGUsbil9LG1lcmdlOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPSt0Lmxlbmd0aCxyPTAsaT1lLmxlbmd0aDtyPG47cisrKWVbaSsrXT10W3JdO3JldHVybiBlLmxlbmd0aD1pLGV9LGdyZXA6ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj1bXSxpPTAsbz1lLmxlbmd0aCxhPSFuO2k8bztpKyspIXQoZVtpXSxpKSE9PWEmJnIucHVzaChlW2ldKTtyZXR1cm4gcn0sbWFwOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89MCxhPVtdO2lmKGQoZSkpZm9yKHI9ZS5sZW5ndGg7bzxyO28rKyludWxsIT0oaT10KGVbb10sbyxuKSkmJmEucHVzaChpKTtlbHNlIGZvcihvIGluIGUpbnVsbCE9KGk9dChlW29dLG8sbikpJiZhLnB1c2goaSk7cmV0dXJuIGcuYXBwbHkoW10sYSl9LGd1aWQ6MSxzdXBwb3J0Onl9KSwiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYoay5mbltTeW1ib2wuaXRlcmF0b3JdPXRbU3ltYm9sLml0ZXJhdG9yXSksay5lYWNoKCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbCIuc3BsaXQoIiAiKSxmdW5jdGlvbihlLHQpe25bIltvYmplY3QgIit0KyJdIl09dC50b0xvd2VyQ2FzZSgpfSk7dmFyIGg9ZnVuY3Rpb24obil7dmFyIGUsZCxiLG8saSxoLGYsZyx3LHUsbCxULEMsYSxFLHYscyxjLHksaz0ic2l6emxlIisxKm5ldyBEYXRlLG09bi5kb2N1bWVudCxTPTAscj0wLHA9dWUoKSx4PXVlKCksTj11ZSgpLEE9dWUoKSxEPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9PT10JiYobD0hMCksMH0saj17fS5oYXNPd25Qcm9wZXJ0eSx0PVtdLHE9dC5wb3AsTD10LnB1c2gsSD10LnB1c2gsTz10LnNsaWNlLFA9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MCxyPWUubGVuZ3RoO248cjtuKyspaWYoZVtuXT09PXQpcmV0dXJuIG47cmV0dXJuLTF9LFI9ImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkIixNPSJbXFx4MjBcXHRcXHJcXG5cXGZdIixJPSIoPzpcXFxcLnxbXFx3LV18W15cMC1cXHhhMF0pKyIsVz0iXFxbIitNKyIqKCIrSSsiKSg/OiIrTSsiKihbKl4kfCF+XT89KSIrTSsiKig/OicoKD86XFxcXC58W15cXFxcJ10pKiknfFwiKCg/OlxcXFwufFteXFxcXFwiXSkqKVwifCgiK0krIikpfCkiK00rIipcXF0iLCQ9IjooIitJKyIpKD86XFwoKCgnKCg/OlxcXFwufFteXFxcXCddKSopJ3xcIigoPzpcXFxcLnxbXlxcXFxcIl0pKilcIil8KCg/OlxcXFwufFteXFxcXCgpW1xcXV18IitXKyIpKil8LiopXFwpfCkiLEY9bmV3IFJlZ0V4cChNKyIrIiwiZyIpLEI9bmV3IFJlZ0V4cCgiXiIrTSsiK3woKD86XnxbXlxcXFxdKSg/OlxcXFwuKSopIitNKyIrJCIsImciKSxfPW5ldyBSZWdFeHAoIl4iK00rIiosIitNKyIqIiksej1uZXcgUmVnRXhwKCJeIitNKyIqKFs+K35dfCIrTSsiKSIrTSsiKiIpLFU9bmV3IFJlZ0V4cChNKyJ8PiIpLFg9bmV3IFJlZ0V4cCgkKSxWPW5ldyBSZWdFeHAoIl4iK0krIiQiKSxHPXtJRDpuZXcgUmVnRXhwKCJeIygiK0krIikiKSxDTEFTUzpuZXcgUmVnRXhwKCJeXFwuKCIrSSsiKSIpLFRBRzpuZXcgUmVnRXhwKCJeKCIrSSsifFsqXSkiKSxBVFRSOm5ldyBSZWdFeHAoIl4iK1cpLFBTRVVETzpuZXcgUmVnRXhwKCJeIiskKSxDSElMRDpuZXcgUmVnRXhwKCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXCgiK00rIiooZXZlbnxvZGR8KChbKy1dfCkoXFxkKilufCkiK00rIiooPzooWystXXwpIitNKyIqKFxcZCspfCkpIitNKyIqXFwpfCkiLCJpIiksYm9vbDpuZXcgUmVnRXhwKCJeKD86IitSKyIpJCIsImkiKSxuZWVkc0NvbnRleHQ6bmV3IFJlZ0V4cCgiXiIrTSsiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFwoIitNKyIqKCg/Oi1cXGQpP1xcZCopIitNKyIqXFwpfCkoPz1bXi1dfCQpIiwiaSIpfSxZPS9IVE1MJC9pLFE9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxKPS9eaFxkJC9pLEs9L15bXntdK1x7XHMqXFtuYXRpdmUgXHcvLFo9L14oPzojKFtcdy1dKyl8KFx3Kyl8XC4oW1x3LV0rKSkkLyxlZT0vWyt+XS8sdGU9bmV3IFJlZ0V4cCgiXFxcXChbXFxkYS1mXXsxLDZ9IitNKyI/fCgiK00rIil8LikiLCJpZyIpLG5lPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj0iMHgiK3QtNjU1MzY7cmV0dXJuIHIhPXJ8fG4/dDpyPDA/U3RyaW5nLmZyb21DaGFyQ29kZShyKzY1NTM2KTpTdHJpbmcuZnJvbUNoYXJDb2RlKHI+PjEwfDU1Mjk2LDEwMjMmcnw1NjMyMCl9LHJlPS8oW1wwLVx4MWZceDdmXXxeLT9cZCl8Xi0kfFteXDAtXHgxZlx4N2YtXHVGRkZGXHctXS9nLGllPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/IlwwIj09PWU/Ilx1ZmZmZCI6ZS5zbGljZSgwLC0xKSsiXFwiK2UuY2hhckNvZGVBdChlLmxlbmd0aC0xKS50b1N0cmluZygxNikrIiAiOiJcXCIrZX0sb2U9ZnVuY3Rpb24oKXtUKCl9LGFlPWJlKGZ1bmN0aW9uKGUpe3JldHVybiEwPT09ZS5kaXNhYmxlZCYmImZpZWxkc2V0Ij09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKX0se2RpcjoicGFyZW50Tm9kZSIsbmV4dDoibGVnZW5kIn0pO3RyeXtILmFwcGx5KHQ9Ty5jYWxsKG0uY2hpbGROb2RlcyksbS5jaGlsZE5vZGVzKSx0W20uY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlfWNhdGNoKGUpe0g9e2FwcGx5OnQubGVuZ3RoP2Z1bmN0aW9uKGUsdCl7TC5hcHBseShlLE8uY2FsbCh0KSl9OmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5sZW5ndGgscj0wO3doaWxlKGVbbisrXT10W3IrK10pO2UubGVuZ3RoPW4tMX19fWZ1bmN0aW9uIHNlKHQsZSxuLHIpe3ZhciBpLG8sYSxzLHUsbCxjLGY9ZSYmZS5vd25lckRvY3VtZW50LHA9ZT9lLm5vZGVUeXBlOjk7aWYobj1ufHxbXSwic3RyaW5nIiE9dHlwZW9mIHR8fCF0fHwxIT09cCYmOSE9PXAmJjExIT09cClyZXR1cm4gbjtpZighciYmKChlP2Uub3duZXJEb2N1bWVudHx8ZTptKSE9PUMmJlQoZSksZT1lfHxDLEUpKXtpZigxMSE9PXAmJih1PVouZXhlYyh0KSkpaWYoaT11WzFdKXtpZig5PT09cCl7aWYoIShhPWUuZ2V0RWxlbWVudEJ5SWQoaSkpKXJldHVybiBuO2lmKGEuaWQ9PT1pKXJldHVybiBuLnB1c2goYSksbn1lbHNlIGlmKGYmJihhPWYuZ2V0RWxlbWVudEJ5SWQoaSkpJiZ5KGUsYSkmJmEuaWQ9PT1pKXJldHVybiBuLnB1c2goYSksbn1lbHNle2lmKHVbMl0pcmV0dXJuIEguYXBwbHkobixlLmdldEVsZW1lbnRzQnlUYWdOYW1lKHQpKSxuO2lmKChpPXVbM10pJiZkLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSlyZXR1cm4gSC5hcHBseShuLGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShpKSksbn1pZihkLnFzYSYmIUFbdCsiICJdJiYoIXZ8fCF2LnRlc3QodCkpJiYoMSE9PXB8fCJvYmplY3QiIT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSl7aWYoYz10LGY9ZSwxPT09cCYmVS50ZXN0KHQpKXsocz1lLmdldEF0dHJpYnV0ZSgiaWQiKSk/cz1zLnJlcGxhY2UocmUsaWUpOmUuc2V0QXR0cmlidXRlKCJpZCIscz1rKSxvPShsPWgodCkpLmxlbmd0aDt3aGlsZShvLS0pbFtvXT0iIyIrcysiICIreGUobFtvXSk7Yz1sLmpvaW4oIiwiKSxmPWVlLnRlc3QodCkmJnllKGUucGFyZW50Tm9kZSl8fGV9dHJ5e3JldHVybiBILmFwcGx5KG4sZi5xdWVyeVNlbGVjdG9yQWxsKGMpKSxufWNhdGNoKGUpe0EodCwhMCl9ZmluYWxseXtzPT09ayYmZS5yZW1vdmVBdHRyaWJ1dGUoImlkIil9fX1yZXR1cm4gZyh0LnJlcGxhY2UoQiwiJDEiKSxlLG4scil9ZnVuY3Rpb24gdWUoKXt2YXIgcj1bXTtyZXR1cm4gZnVuY3Rpb24gZSh0LG4pe3JldHVybiByLnB1c2godCsiICIpPmIuY2FjaGVMZW5ndGgmJmRlbGV0ZSBlW3Iuc2hpZnQoKV0sZVt0KyIgIl09bn19ZnVuY3Rpb24gbGUoZSl7cmV0dXJuIGVba109ITAsZX1mdW5jdGlvbiBjZShlKXt2YXIgdD1DLmNyZWF0ZUVsZW1lbnQoImZpZWxkc2V0Iik7dHJ5e3JldHVybiEhZSh0KX1jYXRjaChlKXtyZXR1cm4hMX1maW5hbGx5e3QucGFyZW50Tm9kZSYmdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQpLHQ9bnVsbH19ZnVuY3Rpb24gZmUoZSx0KXt2YXIgbj1lLnNwbGl0KCJ8Iikscj1uLmxlbmd0aDt3aGlsZShyLS0pYi5hdHRySGFuZGxlW25bcl1dPXR9ZnVuY3Rpb24gcGUoZSx0KXt2YXIgbj10JiZlLHI9biYmMT09PWUubm9kZVR5cGUmJjE9PT10Lm5vZGVUeXBlJiZlLnNvdXJjZUluZGV4LXQuc291cmNlSW5kZXg7aWYocilyZXR1cm4gcjtpZihuKXdoaWxlKG49bi5uZXh0U2libGluZylpZihuPT09dClyZXR1cm4tMTtyZXR1cm4gZT8xOi0xfWZ1bmN0aW9uIGRlKHQpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4iaW5wdXQiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiZlLnR5cGU9PT10fX1mdW5jdGlvbiBoZShuKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybigiaW5wdXQiPT09dHx8ImJ1dHRvbiI9PT10KSYmZS50eXBlPT09bn19ZnVuY3Rpb24gZ2UodCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiJmb3JtImluIGU/ZS5wYXJlbnROb2RlJiYhMT09PWUuZGlzYWJsZWQ/ImxhYmVsImluIGU/ImxhYmVsImluIGUucGFyZW50Tm9kZT9lLnBhcmVudE5vZGUuZGlzYWJsZWQ9PT10OmUuZGlzYWJsZWQ9PT10OmUuaXNEaXNhYmxlZD09PXR8fGUuaXNEaXNhYmxlZCE9PSF0JiZhZShlKT09PXQ6ZS5kaXNhYmxlZD09PXQ6ImxhYmVsImluIGUmJmUuZGlzYWJsZWQ9PT10fX1mdW5jdGlvbiB2ZShhKXtyZXR1cm4gbGUoZnVuY3Rpb24obyl7cmV0dXJuIG89K28sbGUoZnVuY3Rpb24oZSx0KXt2YXIgbixyPWEoW10sZS5sZW5ndGgsbyksaT1yLmxlbmd0aDt3aGlsZShpLS0pZVtuPXJbaV1dJiYoZVtuXT0hKHRbbl09ZVtuXSkpfSl9KX1mdW5jdGlvbiB5ZShlKXtyZXR1cm4gZSYmInVuZGVmaW5lZCIhPXR5cGVvZiBlLmdldEVsZW1lbnRzQnlUYWdOYW1lJiZlfWZvcihlIGluIGQ9c2Uuc3VwcG9ydD17fSxpPXNlLmlzWE1MPWZ1bmN0aW9uKGUpe3ZhciB0PWUubmFtZXNwYWNlVVJJLG49KGUub3duZXJEb2N1bWVudHx8ZSkuZG9jdW1lbnRFbGVtZW50O3JldHVybiFZLnRlc3QodHx8biYmbi5ub2RlTmFtZXx8IkhUTUwiKX0sVD1zZS5zZXREb2N1bWVudD1mdW5jdGlvbihlKXt2YXIgdCxuLHI9ZT9lLm93bmVyRG9jdW1lbnR8fGU6bTtyZXR1cm4gciE9PUMmJjk9PT1yLm5vZGVUeXBlJiZyLmRvY3VtZW50RWxlbWVudCYmKGE9KEM9cikuZG9jdW1lbnRFbGVtZW50LEU9IWkoQyksbSE9PUMmJihuPUMuZGVmYXVsdFZpZXcpJiZuLnRvcCE9PW4mJihuLmFkZEV2ZW50TGlzdGVuZXI/bi5hZGRFdmVudExpc3RlbmVyKCJ1bmxvYWQiLG9lLCExKTpuLmF0dGFjaEV2ZW50JiZuLmF0dGFjaEV2ZW50KCJvbnVubG9hZCIsb2UpKSxkLmF0dHJpYnV0ZXM9Y2UoZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2xhc3NOYW1lPSJpIiwhZS5nZXRBdHRyaWJ1dGUoImNsYXNzTmFtZSIpfSksZC5nZXRFbGVtZW50c0J5VGFnTmFtZT1jZShmdW5jdGlvbihlKXtyZXR1cm4gZS5hcHBlbmRDaGlsZChDLmNyZWF0ZUNvbW1lbnQoIiIpKSwhZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgiKiIpLmxlbmd0aH0pLGQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZT1LLnRlc3QoQy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSxkLmdldEJ5SWQ9Y2UoZnVuY3Rpb24oZSl7cmV0dXJuIGEuYXBwZW5kQ2hpbGQoZSkuaWQ9aywhQy5nZXRFbGVtZW50c0J5TmFtZXx8IUMuZ2V0RWxlbWVudHNCeU5hbWUoaykubGVuZ3RofSksZC5nZXRCeUlkPyhiLmZpbHRlci5JRD1mdW5jdGlvbihlKXt2YXIgdD1lLnJlcGxhY2UodGUsbmUpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUoImlkIik9PT10fX0sYi5maW5kLklEPWZ1bmN0aW9uKGUsdCl7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiB0LmdldEVsZW1lbnRCeUlkJiZFKXt2YXIgbj10LmdldEVsZW1lbnRCeUlkKGUpO3JldHVybiBuP1tuXTpbXX19KTooYi5maWx0ZXIuSUQ9ZnVuY3Rpb24oZSl7dmFyIG49ZS5yZXBsYWNlKHRlLG5lKTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9InVuZGVmaW5lZCIhPXR5cGVvZiBlLmdldEF0dHJpYnV0ZU5vZGUmJmUuZ2V0QXR0cmlidXRlTm9kZSgiaWQiKTtyZXR1cm4gdCYmdC52YWx1ZT09PW59fSxiLmZpbmQuSUQ9ZnVuY3Rpb24oZSx0KXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIHQuZ2V0RWxlbWVudEJ5SWQmJkUpe3ZhciBuLHIsaSxvPXQuZ2V0RWxlbWVudEJ5SWQoZSk7aWYobyl7aWYoKG49by5nZXRBdHRyaWJ1dGVOb2RlKCJpZCIpKSYmbi52YWx1ZT09PWUpcmV0dXJuW29dO2k9dC5nZXRFbGVtZW50c0J5TmFtZShlKSxyPTA7d2hpbGUobz1pW3IrK10paWYoKG49by5nZXRBdHRyaWJ1dGVOb2RlKCJpZCIpKSYmbi52YWx1ZT09PWUpcmV0dXJuW29dfXJldHVybltdfX0pLGIuZmluZC5UQUc9ZC5nZXRFbGVtZW50c0J5VGFnTmFtZT9mdW5jdGlvbihlLHQpe3JldHVybiJ1bmRlZmluZWQiIT10eXBlb2YgdC5nZXRFbGVtZW50c0J5VGFnTmFtZT90LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpOmQucXNhP3QucXVlcnlTZWxlY3RvckFsbChlKTp2b2lkIDB9OmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1bXSxpPTAsbz10LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpO2lmKCIqIj09PWUpe3doaWxlKG49b1tpKytdKTE9PT1uLm5vZGVUeXBlJiZyLnB1c2gobik7cmV0dXJuIHJ9cmV0dXJuIG99LGIuZmluZC5DTEFTUz1kLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmZ1bmN0aW9uKGUsdCl7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiB0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJkUpcmV0dXJuIHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShlKX0scz1bXSx2PVtdLChkLnFzYT1LLnRlc3QoQy5xdWVyeVNlbGVjdG9yQWxsKSkmJihjZShmdW5jdGlvbihlKXthLmFwcGVuZENoaWxkKGUpLmlubmVySFRNTD0iPGEgaWQ9JyIraysiJz48L2E+PHNlbGVjdCBpZD0nIitrKyItXHJcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD4iLGUucXVlcnlTZWxlY3RvckFsbCgiW21zYWxsb3djYXB0dXJlXj0nJ10iKS5sZW5ndGgmJnYucHVzaCgiWypeJF09IitNKyIqKD86Jyd8XCJcIikiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoIltzZWxlY3RlZF0iKS5sZW5ndGh8fHYucHVzaCgiXFxbIitNKyIqKD86dmFsdWV8IitSKyIpIiksZS5xdWVyeVNlbGVjdG9yQWxsKCJbaWR+PSIraysiLV0iKS5sZW5ndGh8fHYucHVzaCgifj0iKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoIjpjaGVja2VkIikubGVuZ3RofHx2LnB1c2goIjpjaGVja2VkIiksZS5xdWVyeVNlbGVjdG9yQWxsKCJhIyIraysiKyoiKS5sZW5ndGh8fHYucHVzaCgiLiMuK1srfl0iKX0pLGNlKGZ1bmN0aW9uKGUpe2UuaW5uZXJIVE1MPSI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD4iO3ZhciB0PUMuY3JlYXRlRWxlbWVudCgiaW5wdXQiKTt0LnNldEF0dHJpYnV0ZSgidHlwZSIsImhpZGRlbiIpLGUuYXBwZW5kQ2hpbGQodCkuc2V0QXR0cmlidXRlKCJuYW1lIiwiRCIpLGUucXVlcnlTZWxlY3RvckFsbCgiW25hbWU9ZF0iKS5sZW5ndGgmJnYucHVzaCgibmFtZSIrTSsiKlsqXiR8IX5dPz0iKSwyIT09ZS5xdWVyeVNlbGVjdG9yQWxsKCI6ZW5hYmxlZCIpLmxlbmd0aCYmdi5wdXNoKCI6ZW5hYmxlZCIsIjpkaXNhYmxlZCIpLGEuYXBwZW5kQ2hpbGQoZSkuZGlzYWJsZWQ9ITAsMiE9PWUucXVlcnlTZWxlY3RvckFsbCgiOmRpc2FibGVkIikubGVuZ3RoJiZ2LnB1c2goIjplbmFibGVkIiwiOmRpc2FibGVkIiksZS5xdWVyeVNlbGVjdG9yQWxsKCIqLDp4Iiksdi5wdXNoKCIsLio6Iil9KSksKGQubWF0Y2hlc1NlbGVjdG9yPUsudGVzdChjPWEubWF0Y2hlc3x8YS53ZWJraXRNYXRjaGVzU2VsZWN0b3J8fGEubW96TWF0Y2hlc1NlbGVjdG9yfHxhLm9NYXRjaGVzU2VsZWN0b3J8fGEubXNNYXRjaGVzU2VsZWN0b3IpKSYmY2UoZnVuY3Rpb24oZSl7ZC5kaXNjb25uZWN0ZWRNYXRjaD1jLmNhbGwoZSwiKiIpLGMuY2FsbChlLCJbcyE9JyddOngiKSxzLnB1c2goIiE9IiwkKX0pLHY9di5sZW5ndGgmJm5ldyBSZWdFeHAodi5qb2luKCJ8IikpLHM9cy5sZW5ndGgmJm5ldyBSZWdFeHAocy5qb2luKCJ8IikpLHQ9Sy50ZXN0KGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24pLHk9dHx8Sy50ZXN0KGEuY29udGFpbnMpP2Z1bmN0aW9uKGUsdCl7dmFyIG49OT09PWUubm9kZVR5cGU/ZS5kb2N1bWVudEVsZW1lbnQ6ZSxyPXQmJnQucGFyZW50Tm9kZTtyZXR1cm4gZT09PXJ8fCEoIXJ8fDEhPT1yLm5vZGVUeXBlfHwhKG4uY29udGFpbnM/bi5jb250YWlucyhyKTplLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYxNiZlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHIpKSl9OmZ1bmN0aW9uKGUsdCl7aWYodCl3aGlsZSh0PXQucGFyZW50Tm9kZSlpZih0PT09ZSlyZXR1cm4hMDtyZXR1cm4hMX0sRD10P2Z1bmN0aW9uKGUsdCl7aWYoZT09PXQpcmV0dXJuIGw9ITAsMDt2YXIgbj0hZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbi0hdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtyZXR1cm4gbnx8KDEmKG49KGUub3duZXJEb2N1bWVudHx8ZSk9PT0odC5vd25lckRvY3VtZW50fHx0KT9lLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHQpOjEpfHwhZC5zb3J0RGV0YWNoZWQmJnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZSk9PT1uP2U9PT1DfHxlLm93bmVyRG9jdW1lbnQ9PT1tJiZ5KG0sZSk/LTE6dD09PUN8fHQub3duZXJEb2N1bWVudD09PW0mJnkobSx0KT8xOnU/UCh1LGUpLVAodSx0KTowOjQmbj8tMToxKX06ZnVuY3Rpb24oZSx0KXtpZihlPT09dClyZXR1cm4gbD0hMCwwO3ZhciBuLHI9MCxpPWUucGFyZW50Tm9kZSxvPXQucGFyZW50Tm9kZSxhPVtlXSxzPVt0XTtpZighaXx8IW8pcmV0dXJuIGU9PT1DPy0xOnQ9PT1DPzE6aT8tMTpvPzE6dT9QKHUsZSktUCh1LHQpOjA7aWYoaT09PW8pcmV0dXJuIHBlKGUsdCk7bj1lO3doaWxlKG49bi5wYXJlbnROb2RlKWEudW5zaGlmdChuKTtuPXQ7d2hpbGUobj1uLnBhcmVudE5vZGUpcy51bnNoaWZ0KG4pO3doaWxlKGFbcl09PT1zW3JdKXIrKztyZXR1cm4gcj9wZShhW3JdLHNbcl0pOmFbcl09PT1tPy0xOnNbcl09PT1tPzE6MH0pLEN9LHNlLm1hdGNoZXM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gc2UoZSxudWxsLG51bGwsdCl9LHNlLm1hdGNoZXNTZWxlY3Rvcj1mdW5jdGlvbihlLHQpe2lmKChlLm93bmVyRG9jdW1lbnR8fGUpIT09QyYmVChlKSxkLm1hdGNoZXNTZWxlY3RvciYmRSYmIUFbdCsiICJdJiYoIXN8fCFzLnRlc3QodCkpJiYoIXZ8fCF2LnRlc3QodCkpKXRyeXt2YXIgbj1jLmNhbGwoZSx0KTtpZihufHxkLmRpc2Nvbm5lY3RlZE1hdGNofHxlLmRvY3VtZW50JiYxMSE9PWUuZG9jdW1lbnQubm9kZVR5cGUpcmV0dXJuIG59Y2F0Y2goZSl7QSh0LCEwKX1yZXR1cm4gMDxzZSh0LEMsbnVsbCxbZV0pLmxlbmd0aH0sc2UuY29udGFpbnM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4oZS5vd25lckRvY3VtZW50fHxlKSE9PUMmJlQoZSkseShlLHQpfSxzZS5hdHRyPWZ1bmN0aW9uKGUsdCl7KGUub3duZXJEb2N1bWVudHx8ZSkhPT1DJiZUKGUpO3ZhciBuPWIuYXR0ckhhbmRsZVt0LnRvTG93ZXJDYXNlKCldLHI9biYmai5jYWxsKGIuYXR0ckhhbmRsZSx0LnRvTG93ZXJDYXNlKCkpP24oZSx0LCFFKTp2b2lkIDA7cmV0dXJuIHZvaWQgMCE9PXI/cjpkLmF0dHJpYnV0ZXN8fCFFP2UuZ2V0QXR0cmlidXRlKHQpOihyPWUuZ2V0QXR0cmlidXRlTm9kZSh0KSkmJnIuc3BlY2lmaWVkP3IudmFsdWU6bnVsbH0sc2UuZXNjYXBlPWZ1bmN0aW9uKGUpe3JldHVybihlKyIiKS5yZXBsYWNlKHJlLGllKX0sc2UuZXJyb3I9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiAiK2UpfSxzZS51bmlxdWVTb3J0PWZ1bmN0aW9uKGUpe3ZhciB0LG49W10scj0wLGk9MDtpZihsPSFkLmRldGVjdER1cGxpY2F0ZXMsdT0hZC5zb3J0U3RhYmxlJiZlLnNsaWNlKDApLGUuc29ydChEKSxsKXt3aGlsZSh0PWVbaSsrXSl0PT09ZVtpXSYmKHI9bi5wdXNoKGkpKTt3aGlsZShyLS0pZS5zcGxpY2UobltyXSwxKX1yZXR1cm4gdT1udWxsLGV9LG89c2UuZ2V0VGV4dD1mdW5jdGlvbihlKXt2YXIgdCxuPSIiLHI9MCxpPWUubm9kZVR5cGU7aWYoaSl7aWYoMT09PWl8fDk9PT1pfHwxMT09PWkpe2lmKCJzdHJpbmciPT10eXBlb2YgZS50ZXh0Q29udGVudClyZXR1cm4gZS50ZXh0Q29udGVudDtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpbis9byhlKX1lbHNlIGlmKDM9PT1pfHw0PT09aSlyZXR1cm4gZS5ub2RlVmFsdWV9ZWxzZSB3aGlsZSh0PWVbcisrXSluKz1vKHQpO3JldHVybiBufSwoYj1zZS5zZWxlY3RvcnM9e2NhY2hlTGVuZ3RoOjUwLGNyZWF0ZVBzZXVkbzpsZSxtYXRjaDpHLGF0dHJIYW5kbGU6e30sZmluZDp7fSxyZWxhdGl2ZTp7Ij4iOntkaXI6InBhcmVudE5vZGUiLGZpcnN0OiEwfSwiICI6e2RpcjoicGFyZW50Tm9kZSJ9LCIrIjp7ZGlyOiJwcmV2aW91c1NpYmxpbmciLGZpcnN0OiEwfSwifiI6e2RpcjoicHJldmlvdXNTaWJsaW5nIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihlKXtyZXR1cm4gZVsxXT1lWzFdLnJlcGxhY2UodGUsbmUpLGVbM109KGVbM118fGVbNF18fGVbNV18fCIiKS5yZXBsYWNlKHRlLG5lKSwifj0iPT09ZVsyXSYmKGVbM109IiAiK2VbM10rIiAiKSxlLnNsaWNlKDAsNCl9LENISUxEOmZ1bmN0aW9uKGUpe3JldHVybiBlWzFdPWVbMV0udG9Mb3dlckNhc2UoKSwibnRoIj09PWVbMV0uc2xpY2UoMCwzKT8oZVszXXx8c2UuZXJyb3IoZVswXSksZVs0XT0rKGVbNF0/ZVs1XSsoZVs2XXx8MSk6MiooImV2ZW4iPT09ZVszXXx8Im9kZCI9PT1lWzNdKSksZVs1XT0rKGVbN10rZVs4XXx8Im9kZCI9PT1lWzNdKSk6ZVszXSYmc2UuZXJyb3IoZVswXSksZX0sUFNFVURPOmZ1bmN0aW9uKGUpe3ZhciB0LG49IWVbNl0mJmVbMl07cmV0dXJuIEcuQ0hJTEQudGVzdChlWzBdKT9udWxsOihlWzNdP2VbMl09ZVs0XXx8ZVs1XXx8IiI6biYmWC50ZXN0KG4pJiYodD1oKG4sITApKSYmKHQ9bi5pbmRleE9mKCIpIixuLmxlbmd0aC10KS1uLmxlbmd0aCkmJihlWzBdPWVbMF0uc2xpY2UoMCx0KSxlWzJdPW4uc2xpY2UoMCx0KSksZS5zbGljZSgwLDMpKX19LGZpbHRlcjp7VEFHOmZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZSh0ZSxuZSkudG9Mb3dlckNhc2UoKTtyZXR1cm4iKiI9PT1lP2Z1bmN0aW9uKCl7cmV0dXJuITB9OmZ1bmN0aW9uKGUpe3JldHVybiBlLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT10fX0sQ0xBU1M6ZnVuY3Rpb24oZSl7dmFyIHQ9cFtlKyIgIl07cmV0dXJuIHR8fCh0PW5ldyBSZWdFeHAoIihefCIrTSsiKSIrZSsiKCIrTSsifCQpIikpJiZwKGUsZnVuY3Rpb24oZSl7cmV0dXJuIHQudGVzdCgic3RyaW5nIj09dHlwZW9mIGUuY2xhc3NOYW1lJiZlLmNsYXNzTmFtZXx8InVuZGVmaW5lZCIhPXR5cGVvZiBlLmdldEF0dHJpYnV0ZSYmZS5nZXRBdHRyaWJ1dGUoImNsYXNzIil8fCIiKX0pfSxBVFRSOmZ1bmN0aW9uKG4scixpKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9c2UuYXR0cihlLG4pO3JldHVybiBudWxsPT10PyIhPSI9PT1yOiFyfHwodCs9IiIsIj0iPT09cj90PT09aToiIT0iPT09cj90IT09aToiXj0iPT09cj9pJiYwPT09dC5pbmRleE9mKGkpOiIqPSI9PT1yP2kmJi0xPHQuaW5kZXhPZihpKToiJD0iPT09cj9pJiZ0LnNsaWNlKC1pLmxlbmd0aCk9PT1pOiJ+PSI9PT1yPy0xPCgiICIrdC5yZXBsYWNlKEYsIiAiKSsiICIpLmluZGV4T2YoaSk6Inw9Ij09PXImJih0PT09aXx8dC5zbGljZSgwLGkubGVuZ3RoKzEpPT09aSsiLSIpKX19LENISUxEOmZ1bmN0aW9uKGgsZSx0LGcsdil7dmFyIHk9Im50aCIhPT1oLnNsaWNlKDAsMyksbT0ibGFzdCIhPT1oLnNsaWNlKC00KSx4PSJvZi10eXBlIj09PWU7cmV0dXJuIDE9PT1nJiYwPT09dj9mdW5jdGlvbihlKXtyZXR1cm4hIWUucGFyZW50Tm9kZX06ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsPXkhPT1tPyJuZXh0U2libGluZyI6InByZXZpb3VzU2libGluZyIsYz1lLnBhcmVudE5vZGUsZj14JiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkscD0hbiYmIXgsZD0hMTtpZihjKXtpZih5KXt3aGlsZShsKXthPWU7d2hpbGUoYT1hW2xdKWlmKHg/YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09ZjoxPT09YS5ub2RlVHlwZSlyZXR1cm4hMTt1PWw9Im9ubHkiPT09aCYmIXUmJiJuZXh0U2libGluZyJ9cmV0dXJuITB9aWYodT1bbT9jLmZpcnN0Q2hpbGQ6Yy5sYXN0Q2hpbGRdLG0mJnApe2Q9KHM9KHI9KGk9KG89KGE9Yylba118fChhW2tdPXt9KSlbYS51bmlxdWVJRF18fChvW2EudW5pcXVlSURdPXt9KSlbaF18fFtdKVswXT09PVMmJnJbMV0pJiZyWzJdLGE9cyYmYy5jaGlsZE5vZGVzW3NdO3doaWxlKGE9KytzJiZhJiZhW2xdfHwoZD1zPTApfHx1LnBvcCgpKWlmKDE9PT1hLm5vZGVUeXBlJiYrK2QmJmE9PT1lKXtpW2hdPVtTLHMsZF07YnJlYWt9fWVsc2UgaWYocCYmKGQ9cz0ocj0oaT0obz0oYT1lKVtrXXx8KGFba109e30pKVthLnVuaXF1ZUlEXXx8KG9bYS51bmlxdWVJRF09e30pKVtoXXx8W10pWzBdPT09UyYmclsxXSksITE9PT1kKXdoaWxlKGE9KytzJiZhJiZhW2xdfHwoZD1zPTApfHx1LnBvcCgpKWlmKCh4P2Eubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PWY6MT09PWEubm9kZVR5cGUpJiYrK2QmJihwJiYoKGk9KG89YVtrXXx8KGFba109e30pKVthLnVuaXF1ZUlEXXx8KG9bYS51bmlxdWVJRF09e30pKVtoXT1bUyxkXSksYT09PWUpKWJyZWFrO3JldHVybihkLT12KT09PWd8fGQlZz09MCYmMDw9ZC9nfX19LFBTRVVETzpmdW5jdGlvbihlLG8pe3ZhciB0LGE9Yi5wc2V1ZG9zW2VdfHxiLnNldEZpbHRlcnNbZS50b0xvd2VyQ2FzZSgpXXx8c2UuZXJyb3IoInVuc3VwcG9ydGVkIHBzZXVkbzogIitlKTtyZXR1cm4gYVtrXT9hKG8pOjE8YS5sZW5ndGg/KHQ9W2UsZSwiIixvXSxiLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoZS50b0xvd2VyQ2FzZSgpKT9sZShmdW5jdGlvbihlLHQpe3ZhciBuLHI9YShlLG8pLGk9ci5sZW5ndGg7d2hpbGUoaS0tKWVbbj1QKGUscltpXSldPSEodFtuXT1yW2ldKX0pOmZ1bmN0aW9uKGUpe3JldHVybiBhKGUsMCx0KX0pOmF9fSxwc2V1ZG9zOntub3Q6bGUoZnVuY3Rpb24oZSl7dmFyIHI9W10saT1bXSxzPWYoZS5yZXBsYWNlKEIsIiQxIikpO3JldHVybiBzW2tdP2xlKGZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG89cyhlLG51bGwscixbXSksYT1lLmxlbmd0aDt3aGlsZShhLS0pKGk9b1thXSkmJihlW2FdPSEodFthXT1pKSl9KTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHJbMF09ZSxzKHIsbnVsbCxuLGkpLHJbMF09bnVsbCwhaS5wb3AoKX19KSxoYXM6bGUoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiAwPHNlKHQsZSkubGVuZ3RofX0pLGNvbnRhaW5zOmxlKGZ1bmN0aW9uKHQpe3JldHVybiB0PXQucmVwbGFjZSh0ZSxuZSksZnVuY3Rpb24oZSl7cmV0dXJuLTE8KGUudGV4dENvbnRlbnR8fG8oZSkpLmluZGV4T2YodCl9fSksbGFuZzpsZShmdW5jdGlvbihuKXtyZXR1cm4gVi50ZXN0KG58fCIiKXx8c2UuZXJyb3IoInVuc3VwcG9ydGVkIGxhbmc6ICIrbiksbj1uLnJlcGxhY2UodGUsbmUpLnRvTG93ZXJDYXNlKCksZnVuY3Rpb24oZSl7dmFyIHQ7ZG97aWYodD1FP2UubGFuZzplLmdldEF0dHJpYnV0ZSgieG1sOmxhbmciKXx8ZS5nZXRBdHRyaWJ1dGUoImxhbmciKSlyZXR1cm4odD10LnRvTG93ZXJDYXNlKCkpPT09bnx8MD09PXQuaW5kZXhPZihuKyItIil9d2hpbGUoKGU9ZS5wYXJlbnROb2RlKSYmMT09PWUubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbihlKXt2YXIgdD1uLmxvY2F0aW9uJiZuLmxvY2F0aW9uLmhhc2g7cmV0dXJuIHQmJnQuc2xpY2UoMSk9PT1lLmlkfSxyb290OmZ1bmN0aW9uKGUpe3JldHVybiBlPT09YX0sZm9jdXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1DLmFjdGl2ZUVsZW1lbnQmJighQy5oYXNGb2N1c3x8Qy5oYXNGb2N1cygpKSYmISEoZS50eXBlfHxlLmhyZWZ8fH5lLnRhYkluZGV4KX0sZW5hYmxlZDpnZSghMSksZGlzYWJsZWQ6Z2UoITApLGNoZWNrZWQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiJpbnB1dCI9PT10JiYhIWUuY2hlY2tlZHx8Im9wdGlvbiI9PT10JiYhIWUuc2VsZWN0ZWR9LHNlbGVjdGVkOmZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcmVudE5vZGUmJmUucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LCEwPT09ZS5zZWxlY3RlZH0sZW1wdHk6ZnVuY3Rpb24oZSl7Zm9yKGU9ZS5maXJzdENoaWxkO2U7ZT1lLm5leHRTaWJsaW5nKWlmKGUubm9kZVR5cGU8NilyZXR1cm4hMTtyZXR1cm4hMH0scGFyZW50OmZ1bmN0aW9uKGUpe3JldHVybiFiLnBzZXVkb3MuZW1wdHkoZSl9LGhlYWRlcjpmdW5jdGlvbihlKXtyZXR1cm4gSi50ZXN0KGUubm9kZU5hbWUpfSxpbnB1dDpmdW5jdGlvbihlKXtyZXR1cm4gUS50ZXN0KGUubm9kZU5hbWUpfSxidXR0b246ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiJpbnB1dCI9PT10JiYiYnV0dG9uIj09PWUudHlwZXx8ImJ1dHRvbiI9PT10fSx0ZXh0OmZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiJpbnB1dCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJiJ0ZXh0Ij09PWUudHlwZSYmKG51bGw9PSh0PWUuZ2V0QXR0cmlidXRlKCJ0eXBlIikpfHwidGV4dCI9PT10LnRvTG93ZXJDYXNlKCkpfSxmaXJzdDp2ZShmdW5jdGlvbigpe3JldHVyblswXX0pLGxhc3Q6dmUoZnVuY3Rpb24oZSx0KXtyZXR1cm5bdC0xXX0pLGVxOnZlKGZ1bmN0aW9uKGUsdCxuKXtyZXR1cm5bbjwwP24rdDpuXX0pLGV2ZW46dmUoZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MDtuPHQ7bis9MillLnB1c2gobik7cmV0dXJuIGV9KSxvZGQ6dmUoZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MTtuPHQ7bis9MillLnB1c2gobik7cmV0dXJuIGV9KSxsdDp2ZShmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPW48MD9uK3Q6dDxuP3Q6bjswPD0tLXI7KWUucHVzaChyKTtyZXR1cm4gZX0pLGd0OnZlKGZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9bjwwP24rdDpuOysrcjx0OyllLnB1c2gocik7cmV0dXJuIGV9KX19KS5wc2V1ZG9zLm50aD1iLnBzZXVkb3MuZXEse3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KWIucHNldWRvc1tlXT1kZShlKTtmb3IoZSBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KWIucHNldWRvc1tlXT1oZShlKTtmdW5jdGlvbiBtZSgpe31mdW5jdGlvbiB4ZShlKXtmb3IodmFyIHQ9MCxuPWUubGVuZ3RoLHI9IiI7dDxuO3QrKylyKz1lW3RdLnZhbHVlO3JldHVybiByfWZ1bmN0aW9uIGJlKHMsZSx0KXt2YXIgdT1lLmRpcixsPWUubmV4dCxjPWx8fHUsZj10JiYicGFyZW50Tm9kZSI9PT1jLHA9cisrO3JldHVybiBlLmZpcnN0P2Z1bmN0aW9uKGUsdCxuKXt3aGlsZShlPWVbdV0paWYoMT09PWUubm9kZVR5cGV8fGYpcmV0dXJuIHMoZSx0LG4pO3JldHVybiExfTpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGE9W1MscF07aWYobil7d2hpbGUoZT1lW3VdKWlmKCgxPT09ZS5ub2RlVHlwZXx8ZikmJnMoZSx0LG4pKXJldHVybiEwfWVsc2Ugd2hpbGUoZT1lW3VdKWlmKDE9PT1lLm5vZGVUeXBlfHxmKWlmKGk9KG89ZVtrXXx8KGVba109e30pKVtlLnVuaXF1ZUlEXXx8KG9bZS51bmlxdWVJRF09e30pLGwmJmw9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpZT1lW3VdfHxlO2Vsc2V7aWYoKHI9aVtjXSkmJnJbMF09PT1TJiZyWzFdPT09cClyZXR1cm4gYVsyXT1yWzJdO2lmKChpW2NdPWEpWzJdPXMoZSx0LG4pKXJldHVybiEwfXJldHVybiExfX1mdW5jdGlvbiB3ZShpKXtyZXR1cm4gMTxpLmxlbmd0aD9mdW5jdGlvbihlLHQsbil7dmFyIHI9aS5sZW5ndGg7d2hpbGUoci0tKWlmKCFpW3JdKGUsdCxuKSlyZXR1cm4hMTtyZXR1cm4hMH06aVswXX1mdW5jdGlvbiBUZShlLHQsbixyLGkpe2Zvcih2YXIgbyxhPVtdLHM9MCx1PWUubGVuZ3RoLGw9bnVsbCE9dDtzPHU7cysrKShvPWVbc10pJiYobiYmIW4obyxyLGkpfHwoYS5wdXNoKG8pLGwmJnQucHVzaChzKSkpO3JldHVybiBhfWZ1bmN0aW9uIENlKGQsaCxnLHYseSxlKXtyZXR1cm4gdiYmIXZba10mJih2PUNlKHYpKSx5JiYheVtrXSYmKHk9Q2UoeSxlKSksbGUoZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHM9W10sdT1bXSxsPXQubGVuZ3RoLGM9ZXx8ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj0wLGk9dC5sZW5ndGg7cjxpO3IrKylzZShlLHRbcl0sbik7cmV0dXJuIG59KGh8fCIqIixuLm5vZGVUeXBlP1tuXTpuLFtdKSxmPSFkfHwhZSYmaD9jOlRlKGMscyxkLG4scikscD1nP3l8fChlP2Q6bHx8dik/W106dDpmO2lmKGcmJmcoZixwLG4sciksdil7aT1UZShwLHUpLHYoaSxbXSxuLHIpLG89aS5sZW5ndGg7d2hpbGUoby0tKShhPWlbb10pJiYocFt1W29dXT0hKGZbdVtvXV09YSkpfWlmKGUpe2lmKHl8fGQpe2lmKHkpe2k9W10sbz1wLmxlbmd0aDt3aGlsZShvLS0pKGE9cFtvXSkmJmkucHVzaChmW29dPWEpO3kobnVsbCxwPVtdLGkscil9bz1wLmxlbmd0aDt3aGlsZShvLS0pKGE9cFtvXSkmJi0xPChpPXk/UChlLGEpOnNbb10pJiYoZVtpXT0hKHRbaV09YSkpfX1lbHNlIHA9VGUocD09PXQ/cC5zcGxpY2UobCxwLmxlbmd0aCk6cCkseT95KG51bGwsdCxwLHIpOkguYXBwbHkodCxwKX0pfWZ1bmN0aW9uIEVlKGUpe2Zvcih2YXIgaSx0LG4scj1lLmxlbmd0aCxvPWIucmVsYXRpdmVbZVswXS50eXBlXSxhPW98fGIucmVsYXRpdmVbIiAiXSxzPW8/MTowLHU9YmUoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1pfSxhLCEwKSxsPWJlKGZ1bmN0aW9uKGUpe3JldHVybi0xPFAoaSxlKX0sYSwhMCksYz1bZnVuY3Rpb24oZSx0LG4pe3ZhciByPSFvJiYobnx8dCE9PXcpfHwoKGk9dCkubm9kZVR5cGU/dShlLHQsbik6bChlLHQsbikpO3JldHVybiBpPW51bGwscn1dO3M8cjtzKyspaWYodD1iLnJlbGF0aXZlW2Vbc10udHlwZV0pYz1bYmUod2UoYyksdCldO2Vsc2V7aWYoKHQ9Yi5maWx0ZXJbZVtzXS50eXBlXS5hcHBseShudWxsLGVbc10ubWF0Y2hlcykpW2tdKXtmb3Iobj0rK3M7bjxyO24rKylpZihiLnJlbGF0aXZlW2Vbbl0udHlwZV0pYnJlYWs7cmV0dXJuIENlKDE8cyYmd2UoYyksMTxzJiZ4ZShlLnNsaWNlKDAscy0xKS5jb25jYXQoe3ZhbHVlOiIgIj09PWVbcy0yXS50eXBlPyIqIjoiIn0pKS5yZXBsYWNlKEIsIiQxIiksdCxzPG4mJkVlKGUuc2xpY2UocyxuKSksbjxyJiZFZShlPWUuc2xpY2UobikpLG48ciYmeGUoZSkpfWMucHVzaCh0KX1yZXR1cm4gd2UoYyl9cmV0dXJuIG1lLnByb3RvdHlwZT1iLmZpbHRlcnM9Yi5wc2V1ZG9zLGIuc2V0RmlsdGVycz1uZXcgbWUsaD1zZS50b2tlbml6ZT1mdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLGEscyx1LGw9eFtlKyIgIl07aWYobClyZXR1cm4gdD8wOmwuc2xpY2UoMCk7YT1lLHM9W10sdT1iLnByZUZpbHRlcjt3aGlsZShhKXtmb3IobyBpbiBuJiYhKHI9Xy5leGVjKGEpKXx8KHImJihhPWEuc2xpY2UoclswXS5sZW5ndGgpfHxhKSxzLnB1c2goaT1bXSkpLG49ITEsKHI9ei5leGVjKGEpKSYmKG49ci5zaGlmdCgpLGkucHVzaCh7dmFsdWU6bix0eXBlOnJbMF0ucmVwbGFjZShCLCIgIil9KSxhPWEuc2xpY2Uobi5sZW5ndGgpKSxiLmZpbHRlcikhKHI9R1tvXS5leGVjKGEpKXx8dVtvXSYmIShyPXVbb10ocikpfHwobj1yLnNoaWZ0KCksaS5wdXNoKHt2YWx1ZTpuLHR5cGU6byxtYXRjaGVzOnJ9KSxhPWEuc2xpY2Uobi5sZW5ndGgpKTtpZighbilicmVha31yZXR1cm4gdD9hLmxlbmd0aDphP3NlLmVycm9yKGUpOngoZSxzKS5zbGljZSgwKX0sZj1zZS5jb21waWxlPWZ1bmN0aW9uKGUsdCl7dmFyIG4sdix5LG0seCxyLGk9W10sbz1bXSxhPU5bZSsiICJdO2lmKCFhKXt0fHwodD1oKGUpKSxuPXQubGVuZ3RoO3doaWxlKG4tLSkoYT1FZSh0W25dKSlba10/aS5wdXNoKGEpOm8ucHVzaChhKTsoYT1OKGUsKHY9byxtPTA8KHk9aSkubGVuZ3RoLHg9MDx2Lmxlbmd0aCxyPWZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG8sYSxzLHU9MCxsPSIwIixjPWUmJltdLGY9W10scD13LGQ9ZXx8eCYmYi5maW5kLlRBRygiKiIsaSksaD1TKz1udWxsPT1wPzE6TWF0aC5yYW5kb20oKXx8LjEsZz1kLmxlbmd0aDtmb3IoaSYmKHc9dD09PUN8fHR8fGkpO2whPT1nJiZudWxsIT0obz1kW2xdKTtsKyspe2lmKHgmJm8pe2E9MCx0fHxvLm93bmVyRG9jdW1lbnQ9PT1DfHwoVChvKSxuPSFFKTt3aGlsZShzPXZbYSsrXSlpZihzKG8sdHx8QyxuKSl7ci5wdXNoKG8pO2JyZWFrfWkmJihTPWgpfW0mJigobz0hcyYmbykmJnUtLSxlJiZjLnB1c2gobykpfWlmKHUrPWwsbSYmbCE9PXUpe2E9MDt3aGlsZShzPXlbYSsrXSlzKGMsZix0LG4pO2lmKGUpe2lmKDA8dSl3aGlsZShsLS0pY1tsXXx8ZltsXXx8KGZbbF09cS5jYWxsKHIpKTtmPVRlKGYpfUguYXBwbHkocixmKSxpJiYhZSYmMDxmLmxlbmd0aCYmMTx1K3kubGVuZ3RoJiZzZS51bmlxdWVTb3J0KHIpfXJldHVybiBpJiYoUz1oLHc9cCksY30sbT9sZShyKTpyKSkpLnNlbGVjdG9yPWV9cmV0dXJuIGF9LGc9c2Uuc2VsZWN0PWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYSxzLHUsbD0iZnVuY3Rpb24iPT10eXBlb2YgZSYmZSxjPSFyJiZoKGU9bC5zZWxlY3Rvcnx8ZSk7aWYobj1ufHxbXSwxPT09Yy5sZW5ndGgpe2lmKDI8KG89Y1swXT1jWzBdLnNsaWNlKDApKS5sZW5ndGgmJiJJRCI9PT0oYT1vWzBdKS50eXBlJiY5PT09dC5ub2RlVHlwZSYmRSYmYi5yZWxhdGl2ZVtvWzFdLnR5cGVdKXtpZighKHQ9KGIuZmluZC5JRChhLm1hdGNoZXNbMF0ucmVwbGFjZSh0ZSxuZSksdCl8fFtdKVswXSkpcmV0dXJuIG47bCYmKHQ9dC5wYXJlbnROb2RlKSxlPWUuc2xpY2Uoby5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9aT1HLm5lZWRzQ29udGV4dC50ZXN0KGUpPzA6by5sZW5ndGg7d2hpbGUoaS0tKXtpZihhPW9baV0sYi5yZWxhdGl2ZVtzPWEudHlwZV0pYnJlYWs7aWYoKHU9Yi5maW5kW3NdKSYmKHI9dShhLm1hdGNoZXNbMF0ucmVwbGFjZSh0ZSxuZSksZWUudGVzdChvWzBdLnR5cGUpJiZ5ZSh0LnBhcmVudE5vZGUpfHx0KSkpe2lmKG8uc3BsaWNlKGksMSksIShlPXIubGVuZ3RoJiZ4ZShvKSkpcmV0dXJuIEguYXBwbHkobixyKSxuO2JyZWFrfX19cmV0dXJuKGx8fGYoZSxjKSkocix0LCFFLG4sIXR8fGVlLnRlc3QoZSkmJnllKHQucGFyZW50Tm9kZSl8fHQpLG59LGQuc29ydFN0YWJsZT1rLnNwbGl0KCIiKS5zb3J0KEQpLmpvaW4oIiIpPT09ayxkLmRldGVjdER1cGxpY2F0ZXM9ISFsLFQoKSxkLnNvcnREZXRhY2hlZD1jZShmdW5jdGlvbihlKXtyZXR1cm4gMSZlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKEMuY3JlYXRlRWxlbWVudCgiZmllbGRzZXQiKSl9KSxjZShmdW5jdGlvbihlKXtyZXR1cm4gZS5pbm5lckhUTUw9IjxhIGhyZWY9JyMnPjwvYT4iLCIjIj09PWUuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoImhyZWYiKX0pfHxmZSgidHlwZXxocmVmfGhlaWdodHx3aWR0aCIsZnVuY3Rpb24oZSx0LG4pe2lmKCFuKXJldHVybiBlLmdldEF0dHJpYnV0ZSh0LCJ0eXBlIj09PXQudG9Mb3dlckNhc2UoKT8xOjIpfSksZC5hdHRyaWJ1dGVzJiZjZShmdW5jdGlvbihlKXtyZXR1cm4gZS5pbm5lckhUTUw9IjxpbnB1dC8+IixlLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCJ2YWx1ZSIsIiIpLCIiPT09ZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgidmFsdWUiKX0pfHxmZSgidmFsdWUiLGZ1bmN0aW9uKGUsdCxuKXtpZighbiYmImlucHV0Ij09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSlyZXR1cm4gZS5kZWZhdWx0VmFsdWV9KSxjZShmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZS5nZXRBdHRyaWJ1dGUoImRpc2FibGVkIil9KXx8ZmUoUixmdW5jdGlvbihlLHQsbil7dmFyIHI7aWYoIW4pcmV0dXJuITA9PT1lW3RdP3QudG9Mb3dlckNhc2UoKToocj1lLmdldEF0dHJpYnV0ZU5vZGUodCkpJiZyLnNwZWNpZmllZD9yLnZhbHVlOm51bGx9KSxzZX0oQyk7ay5maW5kPWgsay5leHByPWguc2VsZWN0b3JzLGsuZXhwclsiOiJdPWsuZXhwci5wc2V1ZG9zLGsudW5pcXVlU29ydD1rLnVuaXF1ZT1oLnVuaXF1ZVNvcnQsay50ZXh0PWguZ2V0VGV4dCxrLmlzWE1MRG9jPWguaXNYTUwsay5jb250YWlucz1oLmNvbnRhaW5zLGsuZXNjYXBlU2VsZWN0b3I9aC5lc2NhcGU7dmFyIFQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPVtdLGk9dm9pZCAwIT09bjt3aGlsZSgoZT1lW3RdKSYmOSE9PWUubm9kZVR5cGUpaWYoMT09PWUubm9kZVR5cGUpe2lmKGkmJmsoZSkuaXMobikpYnJlYWs7ci5wdXNoKGUpfXJldHVybiByfSxTPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtdO2U7ZT1lLm5leHRTaWJsaW5nKTE9PT1lLm5vZGVUeXBlJiZlIT09dCYmbi5wdXNoKGUpO3JldHVybiBufSxOPWsuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7ZnVuY3Rpb24gQShlLHQpe3JldHVybiBlLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT10LnRvTG93ZXJDYXNlKCl9dmFyIEQ9L148KFthLXpdW15cL1wwPjpceDIwXHRcclxuXGZdKilbXHgyMFx0XHJcblxmXSpcLz8+KD86PFwvXDE+fCkkL2k7ZnVuY3Rpb24gaihlLG4scil7cmV0dXJuIG0obik/ay5ncmVwKGUsZnVuY3Rpb24oZSx0KXtyZXR1cm4hIW4uY2FsbChlLHQsZSkhPT1yfSk6bi5ub2RlVHlwZT9rLmdyZXAoZSxmdW5jdGlvbihlKXtyZXR1cm4gZT09PW4hPT1yfSk6InN0cmluZyIhPXR5cGVvZiBuP2suZ3JlcChlLGZ1bmN0aW9uKGUpe3JldHVybi0xPGkuY2FsbChuLGUpIT09cn0pOmsuZmlsdGVyKG4sZSxyKX1rLmZpbHRlcj1mdW5jdGlvbihlLHQsbil7dmFyIHI9dFswXTtyZXR1cm4gbiYmKGU9Ijpub3QoIitlKyIpIiksMT09PXQubGVuZ3RoJiYxPT09ci5ub2RlVHlwZT9rLmZpbmQubWF0Y2hlc1NlbGVjdG9yKHIsZSk/W3JdOltdOmsuZmluZC5tYXRjaGVzKGUsay5ncmVwKHQsZnVuY3Rpb24oZSl7cmV0dXJuIDE9PT1lLm5vZGVUeXBlfSkpfSxrLmZuLmV4dGVuZCh7ZmluZDpmdW5jdGlvbihlKXt2YXIgdCxuLHI9dGhpcy5sZW5ndGgsaT10aGlzO2lmKCJzdHJpbmciIT10eXBlb2YgZSlyZXR1cm4gdGhpcy5wdXNoU3RhY2soayhlKS5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodD0wO3Q8cjt0KyspaWYoay5jb250YWlucyhpW3RdLHRoaXMpKXJldHVybiEwfSkpO2ZvcihuPXRoaXMucHVzaFN0YWNrKFtdKSx0PTA7dDxyO3QrKylrLmZpbmQoZSxpW3RdLG4pO3JldHVybiAxPHI/ay51bmlxdWVTb3J0KG4pOm59LGZpbHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soaih0aGlzLGV8fFtdLCExKSl9LG5vdDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soaih0aGlzLGV8fFtdLCEwKSl9LGlzOmZ1bmN0aW9uKGUpe3JldHVybiEhaih0aGlzLCJzdHJpbmciPT10eXBlb2YgZSYmTi50ZXN0KGUpP2soZSk6ZXx8W10sITEpLmxlbmd0aH19KTt2YXIgcSxMPS9eKD86XHMqKDxbXHdcV10rPilbXj5dKnwjKFtcdy1dKykpJC87KGsuZm4uaW5pdD1mdW5jdGlvbihlLHQsbil7dmFyIHIsaTtpZighZSlyZXR1cm4gdGhpcztpZihuPW58fHEsInN0cmluZyI9PXR5cGVvZiBlKXtpZighKHI9IjwiPT09ZVswXSYmIj4iPT09ZVtlLmxlbmd0aC0xXSYmMzw9ZS5sZW5ndGg/W251bGwsZSxudWxsXTpMLmV4ZWMoZSkpfHwhclsxXSYmdClyZXR1cm4hdHx8dC5qcXVlcnk/KHR8fG4pLmZpbmQoZSk6dGhpcy5jb25zdHJ1Y3Rvcih0KS5maW5kKGUpO2lmKHJbMV0pe2lmKHQ9dCBpbnN0YW5jZW9mIGs/dFswXTp0LGsubWVyZ2UodGhpcyxrLnBhcnNlSFRNTChyWzFdLHQmJnQubm9kZVR5cGU/dC5vd25lckRvY3VtZW50fHx0OkUsITApKSxELnRlc3QoclsxXSkmJmsuaXNQbGFpbk9iamVjdCh0KSlmb3IociBpbiB0KW0odGhpc1tyXSk/dGhpc1tyXSh0W3JdKTp0aGlzLmF0dHIocix0W3JdKTtyZXR1cm4gdGhpc31yZXR1cm4oaT1FLmdldEVsZW1lbnRCeUlkKHJbMl0pKSYmKHRoaXNbMF09aSx0aGlzLmxlbmd0aD0xKSx0aGlzfXJldHVybiBlLm5vZGVUeXBlPyh0aGlzWzBdPWUsdGhpcy5sZW5ndGg9MSx0aGlzKTptKGUpP3ZvaWQgMCE9PW4ucmVhZHk/bi5yZWFkeShlKTplKGspOmsubWFrZUFycmF5KGUsdGhpcyl9KS5wcm90b3R5cGU9ay5mbixxPWsoRSk7dmFyIEg9L14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sTz17Y2hpbGRyZW46ITAsY29udGVudHM6ITAsbmV4dDohMCxwcmV2OiEwfTtmdW5jdGlvbiBQKGUsdCl7d2hpbGUoKGU9ZVt0XSkmJjEhPT1lLm5vZGVUeXBlKTtyZXR1cm4gZX1rLmZuLmV4dGVuZCh7aGFzOmZ1bmN0aW9uKGUpe3ZhciB0PWsoZSx0aGlzKSxuPXQubGVuZ3RoO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpe2Zvcih2YXIgZT0wO2U8bjtlKyspaWYoay5jb250YWlucyh0aGlzLHRbZV0pKXJldHVybiEwfSl9LGNsb3Nlc3Q6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTAsaT10aGlzLmxlbmd0aCxvPVtdLGE9InN0cmluZyIhPXR5cGVvZiBlJiZrKGUpO2lmKCFOLnRlc3QoZSkpZm9yKDtyPGk7cisrKWZvcihuPXRoaXNbcl07biYmbiE9PXQ7bj1uLnBhcmVudE5vZGUpaWYobi5ub2RlVHlwZTwxMSYmKGE/LTE8YS5pbmRleChuKToxPT09bi5ub2RlVHlwZSYmay5maW5kLm1hdGNoZXNTZWxlY3RvcihuLGUpKSl7by5wdXNoKG4pO2JyZWFrfXJldHVybiB0aGlzLnB1c2hTdGFjaygxPG8ubGVuZ3RoP2sudW5pcXVlU29ydChvKTpvKX0saW5kZXg6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/InN0cmluZyI9PXR5cGVvZiBlP2kuY2FsbChrKGUpLHRoaXNbMF0pOmkuY2FsbCh0aGlzLGUuanF1ZXJ5P2VbMF06ZSk6dGhpc1swXSYmdGhpc1swXS5wYXJlbnROb2RlP3RoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoOi0xfSxhZGQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soay51bmlxdWVTb3J0KGsubWVyZ2UodGhpcy5nZXQoKSxrKGUsdCkpKSl9LGFkZEJhY2s6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYWRkKG51bGw9PWU/dGhpcy5wcmV2T2JqZWN0OnRoaXMucHJldk9iamVjdC5maWx0ZXIoZSkpfX0pLGsuZWFjaCh7cGFyZW50OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTtyZXR1cm4gdCYmMTEhPT10Lm5vZGVUeXBlP3Q6bnVsbH0scGFyZW50czpmdW5jdGlvbihlKXtyZXR1cm4gVChlLCJwYXJlbnROb2RlIil9LHBhcmVudHNVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIFQoZSwicGFyZW50Tm9kZSIsbil9LG5leHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIFAoZSwibmV4dFNpYmxpbmciKX0scHJldjpmdW5jdGlvbihlKXtyZXR1cm4gUChlLCJwcmV2aW91c1NpYmxpbmciKX0sbmV4dEFsbDpmdW5jdGlvbihlKXtyZXR1cm4gVChlLCJuZXh0U2libGluZyIpfSxwcmV2QWxsOmZ1bmN0aW9uKGUpe3JldHVybiBUKGUsInByZXZpb3VzU2libGluZyIpfSxuZXh0VW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBUKGUsIm5leHRTaWJsaW5nIixuKX0scHJldlVudGlsOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gVChlLCJwcmV2aW91c1NpYmxpbmciLG4pfSxzaWJsaW5nczpmdW5jdGlvbihlKXtyZXR1cm4gUygoZS5wYXJlbnROb2RlfHx7fSkuZmlyc3RDaGlsZCxlKX0sY2hpbGRyZW46ZnVuY3Rpb24oZSl7cmV0dXJuIFMoZS5maXJzdENoaWxkKX0sY29udGVudHM6ZnVuY3Rpb24oZSl7cmV0dXJuInVuZGVmaW5lZCIhPXR5cGVvZiBlLmNvbnRlbnREb2N1bWVudD9lLmNvbnRlbnREb2N1bWVudDooQShlLCJ0ZW1wbGF0ZSIpJiYoZT1lLmNvbnRlbnR8fGUpLGsubWVyZ2UoW10sZS5jaGlsZE5vZGVzKSl9fSxmdW5jdGlvbihyLGkpe2suZm5bcl09ZnVuY3Rpb24oZSx0KXt2YXIgbj1rLm1hcCh0aGlzLGksZSk7cmV0dXJuIlVudGlsIiE9PXIuc2xpY2UoLTUpJiYodD1lKSx0JiYic3RyaW5nIj09dHlwZW9mIHQmJihuPWsuZmlsdGVyKHQsbikpLDE8dGhpcy5sZW5ndGgmJihPW3JdfHxrLnVuaXF1ZVNvcnQobiksSC50ZXN0KHIpJiZuLnJldmVyc2UoKSksdGhpcy5wdXNoU3RhY2sobil9fSk7dmFyIFI9L1teXHgyMFx0XHJcblxmXSsvZztmdW5jdGlvbiBNKGUpe3JldHVybiBlfWZ1bmN0aW9uIEkoZSl7dGhyb3cgZX1mdW5jdGlvbiBXKGUsdCxuLHIpe3ZhciBpO3RyeXtlJiZtKGk9ZS5wcm9taXNlKT9pLmNhbGwoZSkuZG9uZSh0KS5mYWlsKG4pOmUmJm0oaT1lLnRoZW4pP2kuY2FsbChlLHQsbik6dC5hcHBseSh2b2lkIDAsW2VdLnNsaWNlKHIpKX1jYXRjaChlKXtuLmFwcGx5KHZvaWQgMCxbZV0pfX1rLkNhbGxiYWNrcz1mdW5jdGlvbihyKXt2YXIgZSxuO3I9InN0cmluZyI9PXR5cGVvZiByPyhlPXIsbj17fSxrLmVhY2goZS5tYXRjaChSKXx8W10sZnVuY3Rpb24oZSx0KXtuW3RdPSEwfSksbik6ay5leHRlbmQoe30scik7dmFyIGksdCxvLGEscz1bXSx1PVtdLGw9LTEsYz1mdW5jdGlvbigpe2ZvcihhPWF8fHIub25jZSxvPWk9ITA7dS5sZW5ndGg7bD0tMSl7dD11LnNoaWZ0KCk7d2hpbGUoKytsPHMubGVuZ3RoKSExPT09c1tsXS5hcHBseSh0WzBdLHRbMV0pJiZyLnN0b3BPbkZhbHNlJiYobD1zLmxlbmd0aCx0PSExKX1yLm1lbW9yeXx8KHQ9ITEpLGk9ITEsYSYmKHM9dD9bXToiIil9LGY9e2FkZDpmdW5jdGlvbigpe3JldHVybiBzJiYodCYmIWkmJihsPXMubGVuZ3RoLTEsdS5wdXNoKHQpKSxmdW5jdGlvbiBuKGUpe2suZWFjaChlLGZ1bmN0aW9uKGUsdCl7bSh0KT9yLnVuaXF1ZSYmZi5oYXModCl8fHMucHVzaCh0KTp0JiZ0Lmxlbmd0aCYmInN0cmluZyIhPT13KHQpJiZuKHQpfSl9KGFyZ3VtZW50cyksdCYmIWkmJmMoKSksdGhpc30scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIGsuZWFjaChhcmd1bWVudHMsZnVuY3Rpb24oZSx0KXt2YXIgbjt3aGlsZSgtMTwobj1rLmluQXJyYXkodCxzLG4pKSlzLnNwbGljZShuLDEpLG48PWwmJmwtLX0pLHRoaXN9LGhhczpmdW5jdGlvbihlKXtyZXR1cm4gZT8tMTxrLmluQXJyYXkoZSxzKTowPHMubGVuZ3RofSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiBzJiYocz1bXSksdGhpc30sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiBhPXU9W10scz10PSIiLHRoaXN9LGRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIXN9LGxvY2s6ZnVuY3Rpb24oKXtyZXR1cm4gYT11PVtdLHR8fGl8fChzPXQ9IiIpLHRoaXN9LGxvY2tlZDpmdW5jdGlvbigpe3JldHVybiEhYX0sZmlyZVdpdGg6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYXx8KHQ9W2UsKHQ9dHx8W10pLnNsaWNlP3Quc2xpY2UoKTp0XSx1LnB1c2godCksaXx8YygpKSx0aGlzfSxmaXJlOmZ1bmN0aW9uKCl7cmV0dXJuIGYuZmlyZVdpdGgodGhpcyxhcmd1bWVudHMpLHRoaXN9LGZpcmVkOmZ1bmN0aW9uKCl7cmV0dXJuISFvfX07cmV0dXJuIGZ9LGsuZXh0ZW5kKHtEZWZlcnJlZDpmdW5jdGlvbihlKXt2YXIgbz1bWyJub3RpZnkiLCJwcm9ncmVzcyIsay5DYWxsYmFja3MoIm1lbW9yeSIpLGsuQ2FsbGJhY2tzKCJtZW1vcnkiKSwyXSxbInJlc29sdmUiLCJkb25lIixrLkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSxrLkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSwwLCJyZXNvbHZlZCJdLFsicmVqZWN0IiwiZmFpbCIsay5DYWxsYmFja3MoIm9uY2UgbWVtb3J5Iiksay5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IiksMSwicmVqZWN0ZWQiXV0saT0icGVuZGluZyIsYT17c3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sYWx3YXlzOmZ1bmN0aW9uKCl7cmV0dXJuIHMuZG9uZShhcmd1bWVudHMpLmZhaWwoYXJndW1lbnRzKSx0aGlzfSwiY2F0Y2giOmZ1bmN0aW9uKGUpe3JldHVybiBhLnRoZW4obnVsbCxlKX0scGlwZTpmdW5jdGlvbigpe3ZhciBpPWFyZ3VtZW50cztyZXR1cm4gay5EZWZlcnJlZChmdW5jdGlvbihyKXtrLmVhY2gobyxmdW5jdGlvbihlLHQpe3ZhciBuPW0oaVt0WzRdXSkmJmlbdFs0XV07c1t0WzFdXShmdW5jdGlvbigpe3ZhciBlPW4mJm4uYXBwbHkodGhpcyxhcmd1bWVudHMpO2UmJm0oZS5wcm9taXNlKT9lLnByb21pc2UoKS5wcm9ncmVzcyhyLm5vdGlmeSkuZG9uZShyLnJlc29sdmUpLmZhaWwoci5yZWplY3QpOnJbdFswXSsiV2l0aCJdKHRoaXMsbj9bZV06YXJndW1lbnRzKX0pfSksaT1udWxsfSkucHJvbWlzZSgpfSx0aGVuOmZ1bmN0aW9uKHQsbixyKXt2YXIgdT0wO2Z1bmN0aW9uIGwoaSxvLGEscyl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49dGhpcyxyPWFyZ3VtZW50cyxlPWZ1bmN0aW9uKCl7dmFyIGUsdDtpZighKGk8dSkpe2lmKChlPWEuYXBwbHkobixyKSk9PT1vLnByb21pc2UoKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb24iKTt0PWUmJigib2JqZWN0Ij09dHlwZW9mIGV8fCJmdW5jdGlvbiI9PXR5cGVvZiBlKSYmZS50aGVuLG0odCk/cz90LmNhbGwoZSxsKHUsbyxNLHMpLGwodSxvLEkscykpOih1KyssdC5jYWxsKGUsbCh1LG8sTSxzKSxsKHUsbyxJLHMpLGwodSxvLE0sby5ub3RpZnlXaXRoKSkpOihhIT09TSYmKG49dm9pZCAwLHI9W2VdKSwoc3x8by5yZXNvbHZlV2l0aCkobixyKSl9fSx0PXM/ZTpmdW5jdGlvbigpe3RyeXtlKCl9Y2F0Y2goZSl7ay5EZWZlcnJlZC5leGNlcHRpb25Ib29rJiZrLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soZSx0LnN0YWNrVHJhY2UpLHU8PWkrMSYmKGEhPT1JJiYobj12b2lkIDAscj1bZV0pLG8ucmVqZWN0V2l0aChuLHIpKX19O2k/dCgpOihrLkRlZmVycmVkLmdldFN0YWNrSG9vayYmKHQuc3RhY2tUcmFjZT1rLkRlZmVycmVkLmdldFN0YWNrSG9vaygpKSxDLnNldFRpbWVvdXQodCkpfX1yZXR1cm4gay5EZWZlcnJlZChmdW5jdGlvbihlKXtvWzBdWzNdLmFkZChsKDAsZSxtKHIpP3I6TSxlLm5vdGlmeVdpdGgpKSxvWzFdWzNdLmFkZChsKDAsZSxtKHQpP3Q6TSkpLG9bMl1bM10uYWRkKGwoMCxlLG0obik/bjpJKSl9KS5wcm9taXNlKCl9LHByb21pc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPWU/ay5leHRlbmQoZSxhKTphfX0scz17fTtyZXR1cm4gay5lYWNoKG8sZnVuY3Rpb24oZSx0KXt2YXIgbj10WzJdLHI9dFs1XTthW3RbMV1dPW4uYWRkLHImJm4uYWRkKGZ1bmN0aW9uKCl7aT1yfSxvWzMtZV1bMl0uZGlzYWJsZSxvWzMtZV1bM10uZGlzYWJsZSxvWzBdWzJdLmxvY2ssb1swXVszXS5sb2NrKSxuLmFkZCh0WzNdLmZpcmUpLHNbdFswXV09ZnVuY3Rpb24oKXtyZXR1cm4gc1t0WzBdKyJXaXRoIl0odGhpcz09PXM/dm9pZCAwOnRoaXMsYXJndW1lbnRzKSx0aGlzfSxzW3RbMF0rIldpdGgiXT1uLmZpcmVXaXRofSksYS5wcm9taXNlKHMpLGUmJmUuY2FsbChzLHMpLHN9LHdoZW46ZnVuY3Rpb24oZSl7dmFyIG49YXJndW1lbnRzLmxlbmd0aCx0PW4scj1BcnJheSh0KSxpPXMuY2FsbChhcmd1bWVudHMpLG89ay5EZWZlcnJlZCgpLGE9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JbdF09dGhpcyxpW3RdPTE8YXJndW1lbnRzLmxlbmd0aD9zLmNhbGwoYXJndW1lbnRzKTplLC0tbnx8by5yZXNvbHZlV2l0aChyLGkpfX07aWYobjw9MSYmKFcoZSxvLmRvbmUoYSh0KSkucmVzb2x2ZSxvLnJlamVjdCwhbiksInBlbmRpbmciPT09by5zdGF0ZSgpfHxtKGlbdF0mJmlbdF0udGhlbikpKXJldHVybiBvLnRoZW4oKTt3aGlsZSh0LS0pVyhpW3RdLGEodCksby5yZWplY3QpO3JldHVybiBvLnByb21pc2UoKX19KTt2YXIgJD0vXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztrLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2s9ZnVuY3Rpb24oZSx0KXtDLmNvbnNvbGUmJkMuY29uc29sZS53YXJuJiZlJiYkLnRlc3QoZS5uYW1lKSYmQy5jb25zb2xlLndhcm4oImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246ICIrZS5tZXNzYWdlLGUuc3RhY2ssdCl9LGsucmVhZHlFeGNlcHRpb249ZnVuY3Rpb24oZSl7Qy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZX0pfTt2YXIgRj1rLkRlZmVycmVkKCk7ZnVuY3Rpb24gQigpe0UucmVtb3ZlRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsQiksQy5yZW1vdmVFdmVudExpc3RlbmVyKCJsb2FkIixCKSxrLnJlYWR5KCl9ay5mbi5yZWFkeT1mdW5jdGlvbihlKXtyZXR1cm4gRi50aGVuKGUpWyJjYXRjaCJdKGZ1bmN0aW9uKGUpe2sucmVhZHlFeGNlcHRpb24oZSl9KSx0aGlzfSxrLmV4dGVuZCh7aXNSZWFkeTohMSxyZWFkeVdhaXQ6MSxyZWFkeTpmdW5jdGlvbihlKXsoITA9PT1lPy0tay5yZWFkeVdhaXQ6ay5pc1JlYWR5KXx8KGsuaXNSZWFkeT0hMCkhPT1lJiYwPC0tay5yZWFkeVdhaXR8fEYucmVzb2x2ZVdpdGgoRSxba10pfX0pLGsucmVhZHkudGhlbj1GLnRoZW4sImNvbXBsZXRlIj09PUUucmVhZHlTdGF0ZXx8ImxvYWRpbmciIT09RS5yZWFkeVN0YXRlJiYhRS5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGw/Qy5zZXRUaW1lb3V0KGsucmVhZHkpOihFLmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLEIpLEMuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsQikpO3ZhciBfPWZ1bmN0aW9uKGUsdCxuLHIsaSxvLGEpe3ZhciBzPTAsdT1lLmxlbmd0aCxsPW51bGw9PW47aWYoIm9iamVjdCI9PT13KG4pKWZvcihzIGluIGk9ITAsbilfKGUsdCxzLG5bc10sITAsbyxhKTtlbHNlIGlmKHZvaWQgMCE9PXImJihpPSEwLG0ocil8fChhPSEwKSxsJiYoYT8odC5jYWxsKGUsciksdD1udWxsKToobD10LHQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBsLmNhbGwoayhlKSxuKX0pKSx0KSlmb3IoO3M8dTtzKyspdChlW3NdLG4sYT9yOnIuY2FsbChlW3NdLHMsdChlW3NdLG4pKSk7cmV0dXJuIGk/ZTpsP3QuY2FsbChlKTp1P3QoZVswXSxuKTpvfSx6PS9eLW1zLS8sVT0vLShbYS16XSkvZztmdW5jdGlvbiBYKGUsdCl7cmV0dXJuIHQudG9VcHBlckNhc2UoKX1mdW5jdGlvbiBWKGUpe3JldHVybiBlLnJlcGxhY2UoeiwibXMtIikucmVwbGFjZShVLFgpfXZhciBHPWZ1bmN0aW9uKGUpe3JldHVybiAxPT09ZS5ub2RlVHlwZXx8OT09PWUubm9kZVR5cGV8fCErZS5ub2RlVHlwZX07ZnVuY3Rpb24gWSgpe3RoaXMuZXhwYW5kbz1rLmV4cGFuZG8rWS51aWQrK31ZLnVpZD0xLFkucHJvdG90eXBlPXtjYWNoZTpmdW5jdGlvbihlKXt2YXIgdD1lW3RoaXMuZXhwYW5kb107cmV0dXJuIHR8fCh0PXt9LEcoZSkmJihlLm5vZGVUeXBlP2VbdGhpcy5leHBhbmRvXT10Ok9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHRoaXMuZXhwYW5kbyx7dmFsdWU6dCxjb25maWd1cmFibGU6ITB9KSkpLHR9LHNldDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaT10aGlzLmNhY2hlKGUpO2lmKCJzdHJpbmciPT10eXBlb2YgdClpW1YodCldPW47ZWxzZSBmb3IociBpbiB0KWlbVihyKV09dFtyXTtyZXR1cm4gaX0sZ2V0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQ/dGhpcy5jYWNoZShlKTplW3RoaXMuZXhwYW5kb10mJmVbdGhpcy5leHBhbmRvXVtWKHQpXX0sYWNjZXNzOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdm9pZCAwPT09dHx8dCYmInN0cmluZyI9PXR5cGVvZiB0JiZ2b2lkIDA9PT1uP3RoaXMuZ2V0KGUsdCk6KHRoaXMuc2V0KGUsdCxuKSx2b2lkIDAhPT1uP246dCl9LHJlbW92ZTpmdW5jdGlvbihlLHQpe3ZhciBuLHI9ZVt0aGlzLmV4cGFuZG9dO2lmKHZvaWQgMCE9PXIpe2lmKHZvaWQgMCE9PXQpe249KHQ9QXJyYXkuaXNBcnJheSh0KT90Lm1hcChWKToodD1WKHQpKWluIHI/W3RdOnQubWF0Y2goUil8fFtdKS5sZW5ndGg7d2hpbGUobi0tKWRlbGV0ZSByW3Rbbl1dfSh2b2lkIDA9PT10fHxrLmlzRW1wdHlPYmplY3QocikpJiYoZS5ub2RlVHlwZT9lW3RoaXMuZXhwYW5kb109dm9pZCAwOmRlbGV0ZSBlW3RoaXMuZXhwYW5kb10pfX0saGFzRGF0YTpmdW5jdGlvbihlKXt2YXIgdD1lW3RoaXMuZXhwYW5kb107cmV0dXJuIHZvaWQgMCE9PXQmJiFrLmlzRW1wdHlPYmplY3QodCl9fTt2YXIgUT1uZXcgWSxKPW5ldyBZLEs9L14oPzpce1tcd1xXXSpcfXxcW1tcd1xXXSpcXSkkLyxaPS9bQS1aXS9nO2Z1bmN0aW9uIGVlKGUsdCxuKXt2YXIgcixpO2lmKHZvaWQgMD09PW4mJjE9PT1lLm5vZGVUeXBlKWlmKHI9ImRhdGEtIit0LnJlcGxhY2UoWiwiLSQmIikudG9Mb3dlckNhc2UoKSwic3RyaW5nIj09dHlwZW9mKG49ZS5nZXRBdHRyaWJ1dGUocikpKXt0cnl7bj0idHJ1ZSI9PT0oaT1uKXx8ImZhbHNlIiE9PWkmJigibnVsbCI9PT1pP251bGw6aT09PStpKyIiPytpOksudGVzdChpKT9KU09OLnBhcnNlKGkpOmkpfWNhdGNoKGUpe31KLnNldChlLHQsbil9ZWxzZSBuPXZvaWQgMDtyZXR1cm4gbn1rLmV4dGVuZCh7aGFzRGF0YTpmdW5jdGlvbihlKXtyZXR1cm4gSi5oYXNEYXRhKGUpfHxRLmhhc0RhdGEoZSl9LGRhdGE6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBKLmFjY2VzcyhlLHQsbil9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtKLnJlbW92ZShlLHQpfSxfZGF0YTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIFEuYWNjZXNzKGUsdCxuKX0sX3JlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtRLnJlbW92ZShlLHQpfX0pLGsuZm4uZXh0ZW5kKHtkYXRhOmZ1bmN0aW9uKG4sZSl7dmFyIHQscixpLG89dGhpc1swXSxhPW8mJm8uYXR0cmlidXRlcztpZih2b2lkIDA9PT1uKXtpZih0aGlzLmxlbmd0aCYmKGk9Si5nZXQobyksMT09PW8ubm9kZVR5cGUmJiFRLmdldChvLCJoYXNEYXRhQXR0cnMiKSkpe3Q9YS5sZW5ndGg7d2hpbGUodC0tKWFbdF0mJjA9PT0ocj1hW3RdLm5hbWUpLmluZGV4T2YoImRhdGEtIikmJihyPVYoci5zbGljZSg1KSksZWUobyxyLGlbcl0pKTtRLnNldChvLCJoYXNEYXRhQXR0cnMiLCEwKX1yZXR1cm4gaX1yZXR1cm4ib2JqZWN0Ij09dHlwZW9mIG4/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7Si5zZXQodGhpcyxuKX0pOl8odGhpcyxmdW5jdGlvbihlKXt2YXIgdDtpZihvJiZ2b2lkIDA9PT1lKXJldHVybiB2b2lkIDAhPT0odD1KLmdldChvLG4pKT90OnZvaWQgMCE9PSh0PWVlKG8sbikpP3Q6dm9pZCAwO3RoaXMuZWFjaChmdW5jdGlvbigpe0ouc2V0KHRoaXMsbixlKX0pfSxudWxsLGUsMTxhcmd1bWVudHMubGVuZ3RoLG51bGwsITApfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtKLnJlbW92ZSh0aGlzLGUpfSl9fSksay5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtpZihlKXJldHVybiB0PSh0fHwiZngiKSsicXVldWUiLHI9US5nZXQoZSx0KSxuJiYoIXJ8fEFycmF5LmlzQXJyYXkobik/cj1RLmFjY2VzcyhlLHQsay5tYWtlQXJyYXkobikpOnIucHVzaChuKSkscnx8W119LGRlcXVldWU6ZnVuY3Rpb24oZSx0KXt0PXR8fCJmeCI7dmFyIG49ay5xdWV1ZShlLHQpLHI9bi5sZW5ndGgsaT1uLnNoaWZ0KCksbz1rLl9xdWV1ZUhvb2tzKGUsdCk7ImlucHJvZ3Jlc3MiPT09aSYmKGk9bi5zaGlmdCgpLHItLSksaSYmKCJmeCI9PT10JiZuLnVuc2hpZnQoImlucHJvZ3Jlc3MiKSxkZWxldGUgby5zdG9wLGkuY2FsbChlLGZ1bmN0aW9uKCl7ay5kZXF1ZXVlKGUsdCl9LG8pKSwhciYmbyYmby5lbXB0eS5maXJlKCl9LF9xdWV1ZUhvb2tzOmZ1bmN0aW9uKGUsdCl7dmFyIG49dCsicXVldWVIb29rcyI7cmV0dXJuIFEuZ2V0KGUsbil8fFEuYWNjZXNzKGUsbix7ZW1wdHk6ay5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IikuYWRkKGZ1bmN0aW9uKCl7US5yZW1vdmUoZSxbdCsicXVldWUiLG5dKX0pfSl9fSksay5mbi5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKHQsbil7dmFyIGU9MjtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIHQmJihuPXQsdD0iZngiLGUtLSksYXJndW1lbnRzLmxlbmd0aDxlP2sucXVldWUodGhpc1swXSx0KTp2b2lkIDA9PT1uP3RoaXM6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9ay5xdWV1ZSh0aGlzLHQsbik7ay5fcXVldWVIb29rcyh0aGlzLHQpLCJmeCI9PT10JiYiaW5wcm9ncmVzcyIhPT1lWzBdJiZrLmRlcXVldWUodGhpcyx0KX0pfSxkZXF1ZXVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtrLmRlcXVldWUodGhpcyxlKX0pfSxjbGVhclF1ZXVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnF1ZXVlKGV8fCJmeCIsW10pfSxwcm9taXNlOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0xLGk9ay5EZWZlcnJlZCgpLG89dGhpcyxhPXRoaXMubGVuZ3RoLHM9ZnVuY3Rpb24oKXstLXJ8fGkucmVzb2x2ZVdpdGgobyxbb10pfTsic3RyaW5nIiE9dHlwZW9mIGUmJih0PWUsZT12b2lkIDApLGU9ZXx8ImZ4Ijt3aGlsZShhLS0pKG49US5nZXQob1thXSxlKyJxdWV1ZUhvb2tzIikpJiZuLmVtcHR5JiYocisrLG4uZW1wdHkuYWRkKHMpKTtyZXR1cm4gcygpLGkucHJvbWlzZSh0KX19KTt2YXIgdGU9L1srLV0/KD86XGQqXC58KVxkKyg/OltlRV1bKy1dP1xkK3wpLy5zb3VyY2UsbmU9bmV3IFJlZ0V4cCgiXig/OihbKy1dKT18KSgiK3RlKyIpKFthLXolXSopJCIsImkiKSxyZT1bIlRvcCIsIlJpZ2h0IiwiQm90dG9tIiwiTGVmdCJdLGllPUUuZG9jdW1lbnRFbGVtZW50LG9lPWZ1bmN0aW9uKGUpe3JldHVybiBrLmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCxlKX0sYWU9e2NvbXBvc2VkOiEwfTtpZS5nZXRSb290Tm9kZSYmKG9lPWZ1bmN0aW9uKGUpe3JldHVybiBrLmNvbnRhaW5zKGUub3duZXJEb2N1bWVudCxlKXx8ZS5nZXRSb290Tm9kZShhZSk9PT1lLm93bmVyRG9jdW1lbnR9KTt2YXIgc2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm4ibm9uZSI9PT0oZT10fHxlKS5zdHlsZS5kaXNwbGF5fHwiIj09PWUuc3R5bGUuZGlzcGxheSYmb2UoZSkmJiJub25lIj09PWsuY3NzKGUsImRpc3BsYXkiKX0sdWU9ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhPXt9O2ZvcihvIGluIHQpYVtvXT1lLnN0eWxlW29dLGUuc3R5bGVbb109dFtvXTtmb3IobyBpbiBpPW4uYXBwbHkoZSxyfHxbXSksdCllLnN0eWxlW29dPWFbb107cmV0dXJuIGl9O2Z1bmN0aW9uIGxlKGUsdCxuLHIpe3ZhciBpLG8sYT0yMCxzPXI/ZnVuY3Rpb24oKXtyZXR1cm4gci5jdXIoKX06ZnVuY3Rpb24oKXtyZXR1cm4gay5jc3MoZSx0LCIiKX0sdT1zKCksbD1uJiZuWzNdfHwoay5jc3NOdW1iZXJbdF0/IiI6InB4IiksYz1lLm5vZGVUeXBlJiYoay5jc3NOdW1iZXJbdF18fCJweCIhPT1sJiYrdSkmJm5lLmV4ZWMoay5jc3MoZSx0KSk7aWYoYyYmY1szXSE9PWwpe3UvPTIsbD1sfHxjWzNdLGM9K3V8fDE7d2hpbGUoYS0tKWsuc3R5bGUoZSx0LGMrbCksKDEtbykqKDEtKG89cygpL3V8fC41KSk8PTAmJihhPTApLGMvPW87Yyo9MixrLnN0eWxlKGUsdCxjK2wpLG49bnx8W119cmV0dXJuIG4mJihjPStjfHwrdXx8MCxpPW5bMV0/YysoblsxXSsxKSpuWzJdOituWzJdLHImJihyLnVuaXQ9bCxyLnN0YXJ0PWMsci5lbmQ9aSkpLGl9dmFyIGNlPXt9O2Z1bmN0aW9uIGZlKGUsdCl7Zm9yKHZhciBuLHIsaSxvLGEscyx1LGw9W10sYz0wLGY9ZS5sZW5ndGg7YzxmO2MrKykocj1lW2NdKS5zdHlsZSYmKG49ci5zdHlsZS5kaXNwbGF5LHQ/KCJub25lIj09PW4mJihsW2NdPVEuZ2V0KHIsImRpc3BsYXkiKXx8bnVsbCxsW2NdfHwoci5zdHlsZS5kaXNwbGF5PSIiKSksIiI9PT1yLnN0eWxlLmRpc3BsYXkmJnNlKHIpJiYobFtjXT0odT1hPW89dm9pZCAwLGE9KGk9cikub3duZXJEb2N1bWVudCxzPWkubm9kZU5hbWUsKHU9Y2Vbc10pfHwobz1hLmJvZHkuYXBwZW5kQ2hpbGQoYS5jcmVhdGVFbGVtZW50KHMpKSx1PWsuY3NzKG8sImRpc3BsYXkiKSxvLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobyksIm5vbmUiPT09dSYmKHU9ImJsb2NrIiksY2Vbc109dSkpKSk6Im5vbmUiIT09biYmKGxbY109Im5vbmUiLFEuc2V0KHIsImRpc3BsYXkiLG4pKSk7Zm9yKGM9MDtjPGY7YysrKW51bGwhPWxbY10mJihlW2NdLnN0eWxlLmRpc3BsYXk9bFtjXSk7cmV0dXJuIGV9ay5mbi5leHRlbmQoe3Nob3c6ZnVuY3Rpb24oKXtyZXR1cm4gZmUodGhpcywhMCl9LGhpZGU6ZnVuY3Rpb24oKXtyZXR1cm4gZmUodGhpcyl9LHRvZ2dsZTpmdW5jdGlvbihlKXtyZXR1cm4iYm9vbGVhbiI9PXR5cGVvZiBlP2U/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7c2UodGhpcyk/ayh0aGlzKS5zaG93KCk6ayh0aGlzKS5oaWRlKCl9KX19KTt2YXIgcGU9L14oPzpjaGVja2JveHxyYWRpbykkL2ksZGU9LzwoW2Etel1bXlwvXDA+XHgyMFx0XHJcblxmXSopL2ksaGU9L14kfF5tb2R1bGUkfFwvKD86amF2YXxlY21hKXNjcmlwdC9pLGdlPXtvcHRpb246WzEsIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz4iLCI8L3NlbGVjdD4iXSx0aGVhZDpbMSwiPHRhYmxlPiIsIjwvdGFibGU+Il0sY29sOlsyLCI8dGFibGU+PGNvbGdyb3VwPiIsIjwvY29sZ3JvdXA+PC90YWJsZT4iXSx0cjpbMiwiPHRhYmxlPjx0Ym9keT4iLCI8L3Rib2R5PjwvdGFibGU+Il0sdGQ6WzMsIjx0YWJsZT48dGJvZHk+PHRyPiIsIjwvdHI+PC90Ym9keT48L3RhYmxlPiJdLF9kZWZhdWx0OlswLCIiLCIiXX07ZnVuY3Rpb24gdmUoZSx0KXt2YXIgbjtyZXR1cm4gbj0idW5kZWZpbmVkIiE9dHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0fHwiKiIpOiJ1bmRlZmluZWQiIT10eXBlb2YgZS5xdWVyeVNlbGVjdG9yQWxsP2UucXVlcnlTZWxlY3RvckFsbCh0fHwiKiIpOltdLHZvaWQgMD09PXR8fHQmJkEoZSx0KT9rLm1lcmdlKFtlXSxuKTpufWZ1bmN0aW9uIHllKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKVEuc2V0KGVbbl0sImdsb2JhbEV2YWwiLCF0fHxRLmdldCh0W25dLCJnbG9iYWxFdmFsIikpfWdlLm9wdGdyb3VwPWdlLm9wdGlvbixnZS50Ym9keT1nZS50Zm9vdD1nZS5jb2xncm91cD1nZS5jYXB0aW9uPWdlLnRoZWFkLGdlLnRoPWdlLnRkO3ZhciBtZSx4ZSxiZT0vPHwmIz9cdys7LztmdW5jdGlvbiB3ZShlLHQsbixyLGkpe2Zvcih2YXIgbyxhLHMsdSxsLGMsZj10LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxwPVtdLGQ9MCxoPWUubGVuZ3RoO2Q8aDtkKyspaWYoKG89ZVtkXSl8fDA9PT1vKWlmKCJvYmplY3QiPT09dyhvKSlrLm1lcmdlKHAsby5ub2RlVHlwZT9bb106byk7ZWxzZSBpZihiZS50ZXN0KG8pKXthPWF8fGYuYXBwZW5kQ2hpbGQodC5jcmVhdGVFbGVtZW50KCJkaXYiKSkscz0oZGUuZXhlYyhvKXx8WyIiLCIiXSlbMV0udG9Mb3dlckNhc2UoKSx1PWdlW3NdfHxnZS5fZGVmYXVsdCxhLmlubmVySFRNTD11WzFdK2suaHRtbFByZWZpbHRlcihvKSt1WzJdLGM9dVswXTt3aGlsZShjLS0pYT1hLmxhc3RDaGlsZDtrLm1lcmdlKHAsYS5jaGlsZE5vZGVzKSwoYT1mLmZpcnN0Q2hpbGQpLnRleHRDb250ZW50PSIifWVsc2UgcC5wdXNoKHQuY3JlYXRlVGV4dE5vZGUobykpO2YudGV4dENvbnRlbnQ9IiIsZD0wO3doaWxlKG89cFtkKytdKWlmKHImJi0xPGsuaW5BcnJheShvLHIpKWkmJmkucHVzaChvKTtlbHNlIGlmKGw9b2UobyksYT12ZShmLmFwcGVuZENoaWxkKG8pLCJzY3JpcHQiKSxsJiZ5ZShhKSxuKXtjPTA7d2hpbGUobz1hW2MrK10paGUudGVzdChvLnR5cGV8fCIiKSYmbi5wdXNoKG8pfXJldHVybiBmfW1lPUUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLmFwcGVuZENoaWxkKEUuY3JlYXRlRWxlbWVudCgiZGl2IikpLCh4ZT1FLmNyZWF0ZUVsZW1lbnQoImlucHV0IikpLnNldEF0dHJpYnV0ZSgidHlwZSIsInJhZGlvIikseGUuc2V0QXR0cmlidXRlKCJjaGVja2VkIiwiY2hlY2tlZCIpLHhlLnNldEF0dHJpYnV0ZSgibmFtZSIsInQiKSxtZS5hcHBlbmRDaGlsZCh4ZSkseS5jaGVja0Nsb25lPW1lLmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCxtZS5pbm5lckhUTUw9Ijx0ZXh0YXJlYT54PC90ZXh0YXJlYT4iLHkubm9DbG9uZUNoZWNrZWQ9ISFtZS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7dmFyIFRlPS9ea2V5LyxDZT0vXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sRWU9L14oW14uXSopKD86XC4oLispfCkvO2Z1bmN0aW9uIGtlKCl7cmV0dXJuITB9ZnVuY3Rpb24gU2UoKXtyZXR1cm4hMX1mdW5jdGlvbiBOZShlLHQpe3JldHVybiBlPT09ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIEUuYWN0aXZlRWxlbWVudH1jYXRjaChlKXt9fSgpPT0oImZvY3VzIj09PXQpfWZ1bmN0aW9uIEFlKGUsdCxuLHIsaSxvKXt2YXIgYSxzO2lmKCJvYmplY3QiPT10eXBlb2YgdCl7Zm9yKHMgaW4ic3RyaW5nIiE9dHlwZW9mIG4mJihyPXJ8fG4sbj12b2lkIDApLHQpQWUoZSxzLG4scix0W3NdLG8pO3JldHVybiBlfWlmKG51bGw9PXImJm51bGw9PWk/KGk9bixyPW49dm9pZCAwKTpudWxsPT1pJiYoInN0cmluZyI9PXR5cGVvZiBuPyhpPXIscj12b2lkIDApOihpPXIscj1uLG49dm9pZCAwKSksITE9PT1pKWk9U2U7ZWxzZSBpZighaSlyZXR1cm4gZTtyZXR1cm4gMT09PW8mJihhPWksKGk9ZnVuY3Rpb24oZSl7cmV0dXJuIGsoKS5vZmYoZSksYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KS5ndWlkPWEuZ3VpZHx8KGEuZ3VpZD1rLmd1aWQrKykpLGUuZWFjaChmdW5jdGlvbigpe2suZXZlbnQuYWRkKHRoaXMsdCxpLHIsbil9KX1mdW5jdGlvbiBEZShlLGksbyl7bz8oUS5zZXQoZSxpLCExKSxrLmV2ZW50LmFkZChlLGkse25hbWVzcGFjZTohMSxoYW5kbGVyOmZ1bmN0aW9uKGUpe3ZhciB0LG4scj1RLmdldCh0aGlzLGkpO2lmKDEmZS5pc1RyaWdnZXImJnRoaXNbaV0pe2lmKHIubGVuZ3RoKShrLmV2ZW50LnNwZWNpYWxbaV18fHt9KS5kZWxlZ2F0ZVR5cGUmJmUuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihyPXMuY2FsbChhcmd1bWVudHMpLFEuc2V0KHRoaXMsaSxyKSx0PW8odGhpcyxpKSx0aGlzW2ldKCksciE9PShuPVEuZ2V0KHRoaXMsaSkpfHx0P1Euc2V0KHRoaXMsaSwhMSk6bj17fSxyIT09bilyZXR1cm4gZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSxlLnByZXZlbnREZWZhdWx0KCksbi52YWx1ZX1lbHNlIHIubGVuZ3RoJiYoUS5zZXQodGhpcyxpLHt2YWx1ZTprLmV2ZW50LnRyaWdnZXIoay5leHRlbmQoclswXSxrLkV2ZW50LnByb3RvdHlwZSksci5zbGljZSgxKSx0aGlzKX0pLGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkpfX0pKTp2b2lkIDA9PT1RLmdldChlLGkpJiZrLmV2ZW50LmFkZChlLGksa2UpfWsuZXZlbnQ9e2dsb2JhbDp7fSxhZGQ6ZnVuY3Rpb24odCxlLG4scixpKXt2YXIgbyxhLHMsdSxsLGMsZixwLGQsaCxnLHY9US5nZXQodCk7aWYodil7bi5oYW5kbGVyJiYobj0obz1uKS5oYW5kbGVyLGk9by5zZWxlY3RvciksaSYmay5maW5kLm1hdGNoZXNTZWxlY3RvcihpZSxpKSxuLmd1aWR8fChuLmd1aWQ9ay5ndWlkKyspLCh1PXYuZXZlbnRzKXx8KHU9di5ldmVudHM9e30pLChhPXYuaGFuZGxlKXx8KGE9di5oYW5kbGU9ZnVuY3Rpb24oZSl7cmV0dXJuInVuZGVmaW5lZCIhPXR5cGVvZiBrJiZrLmV2ZW50LnRyaWdnZXJlZCE9PWUudHlwZT9rLmV2ZW50LmRpc3BhdGNoLmFwcGx5KHQsYXJndW1lbnRzKTp2b2lkIDB9KSxsPShlPShlfHwiIikubWF0Y2goUil8fFsiIl0pLmxlbmd0aDt3aGlsZShsLS0pZD1nPShzPUVlLmV4ZWMoZVtsXSl8fFtdKVsxXSxoPShzWzJdfHwiIikuc3BsaXQoIi4iKS5zb3J0KCksZCYmKGY9ay5ldmVudC5zcGVjaWFsW2RdfHx7fSxkPShpP2YuZGVsZWdhdGVUeXBlOmYuYmluZFR5cGUpfHxkLGY9ay5ldmVudC5zcGVjaWFsW2RdfHx7fSxjPWsuZXh0ZW5kKHt0eXBlOmQsb3JpZ1R5cGU6ZyxkYXRhOnIsaGFuZGxlcjpuLGd1aWQ6bi5ndWlkLHNlbGVjdG9yOmksbmVlZHNDb250ZXh0OmkmJmsuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChpKSxuYW1lc3BhY2U6aC5qb2luKCIuIil9LG8pLChwPXVbZF0pfHwoKHA9dVtkXT1bXSkuZGVsZWdhdGVDb3VudD0wLGYuc2V0dXAmJiExIT09Zi5zZXR1cC5jYWxsKHQscixoLGEpfHx0LmFkZEV2ZW50TGlzdGVuZXImJnQuYWRkRXZlbnRMaXN0ZW5lcihkLGEpKSxmLmFkZCYmKGYuYWRkLmNhbGwodCxjKSxjLmhhbmRsZXIuZ3VpZHx8KGMuaGFuZGxlci5ndWlkPW4uZ3VpZCkpLGk/cC5zcGxpY2UocC5kZWxlZ2F0ZUNvdW50KyssMCxjKTpwLnB1c2goYyksay5ldmVudC5nbG9iYWxbZF09ITApfX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG8sYSxzLHUsbCxjLGYscCxkLGgsZyx2PVEuaGFzRGF0YShlKSYmUS5nZXQoZSk7aWYodiYmKHU9di5ldmVudHMpKXtsPSh0PSh0fHwiIikubWF0Y2goUil8fFsiIl0pLmxlbmd0aDt3aGlsZShsLS0paWYoZD1nPShzPUVlLmV4ZWModFtsXSl8fFtdKVsxXSxoPShzWzJdfHwiIikuc3BsaXQoIi4iKS5zb3J0KCksZCl7Zj1rLmV2ZW50LnNwZWNpYWxbZF18fHt9LHA9dVtkPShyP2YuZGVsZWdhdGVUeXBlOmYuYmluZFR5cGUpfHxkXXx8W10scz1zWzJdJiZuZXcgUmVnRXhwKCIoXnxcXC4pIitoLmpvaW4oIlxcLig/Oi4qXFwufCkiKSsiKFxcLnwkKSIpLGE9bz1wLmxlbmd0aDt3aGlsZShvLS0pYz1wW29dLCFpJiZnIT09Yy5vcmlnVHlwZXx8biYmbi5ndWlkIT09Yy5ndWlkfHxzJiYhcy50ZXN0KGMubmFtZXNwYWNlKXx8ciYmciE9PWMuc2VsZWN0b3ImJigiKioiIT09cnx8IWMuc2VsZWN0b3IpfHwocC5zcGxpY2UobywxKSxjLnNlbGVjdG9yJiZwLmRlbGVnYXRlQ291bnQtLSxmLnJlbW92ZSYmZi5yZW1vdmUuY2FsbChlLGMpKTthJiYhcC5sZW5ndGgmJihmLnRlYXJkb3duJiYhMSE9PWYudGVhcmRvd24uY2FsbChlLGgsdi5oYW5kbGUpfHxrLnJlbW92ZUV2ZW50KGUsZCx2LmhhbmRsZSksZGVsZXRlIHVbZF0pfWVsc2UgZm9yKGQgaW4gdSlrLmV2ZW50LnJlbW92ZShlLGQrdFtsXSxuLHIsITApO2suaXNFbXB0eU9iamVjdCh1KSYmUS5yZW1vdmUoZSwiaGFuZGxlIGV2ZW50cyIpfX0sZGlzcGF0Y2g6ZnVuY3Rpb24oZSl7dmFyIHQsbixyLGksbyxhLHM9ay5ldmVudC5maXgoZSksdT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCksbD0oUS5nZXQodGhpcywiZXZlbnRzIil8fHt9KVtzLnR5cGVdfHxbXSxjPWsuZXZlbnQuc3BlY2lhbFtzLnR5cGVdfHx7fTtmb3IodVswXT1zLHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXVbdF09YXJndW1lbnRzW3RdO2lmKHMuZGVsZWdhdGVUYXJnZXQ9dGhpcywhYy5wcmVEaXNwYXRjaHx8ITEhPT1jLnByZURpc3BhdGNoLmNhbGwodGhpcyxzKSl7YT1rLmV2ZW50LmhhbmRsZXJzLmNhbGwodGhpcyxzLGwpLHQ9MDt3aGlsZSgoaT1hW3QrK10pJiYhcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKXtzLmN1cnJlbnRUYXJnZXQ9aS5lbGVtLG49MDt3aGlsZSgobz1pLmhhbmRsZXJzW24rK10pJiYhcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKXMucm5hbWVzcGFjZSYmITEhPT1vLm5hbWVzcGFjZSYmIXMucm5hbWVzcGFjZS50ZXN0KG8ubmFtZXNwYWNlKXx8KHMuaGFuZGxlT2JqPW8scy5kYXRhPW8uZGF0YSx2b2lkIDAhPT0ocj0oKGsuZXZlbnQuc3BlY2lhbFtvLm9yaWdUeXBlXXx8e30pLmhhbmRsZXx8by5oYW5kbGVyKS5hcHBseShpLmVsZW0sdSkpJiYhMT09PShzLnJlc3VsdD1yKSYmKHMucHJldmVudERlZmF1bHQoKSxzLnN0b3BQcm9wYWdhdGlvbigpKSl9cmV0dXJuIGMucG9zdERpc3BhdGNoJiZjLnBvc3REaXNwYXRjaC5jYWxsKHRoaXMscykscy5yZXN1bHR9fSxoYW5kbGVyczpmdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLGEscz1bXSx1PXQuZGVsZWdhdGVDb3VudCxsPWUudGFyZ2V0O2lmKHUmJmwubm9kZVR5cGUmJiEoImNsaWNrIj09PWUudHlwZSYmMTw9ZS5idXR0b24pKWZvcig7bCE9PXRoaXM7bD1sLnBhcmVudE5vZGV8fHRoaXMpaWYoMT09PWwubm9kZVR5cGUmJigiY2xpY2siIT09ZS50eXBlfHwhMCE9PWwuZGlzYWJsZWQpKXtmb3Iobz1bXSxhPXt9LG49MDtuPHU7bisrKXZvaWQgMD09PWFbaT0ocj10W25dKS5zZWxlY3RvcisiICJdJiYoYVtpXT1yLm5lZWRzQ29udGV4dD8tMTxrKGksdGhpcykuaW5kZXgobCk6ay5maW5kKGksdGhpcyxudWxsLFtsXSkubGVuZ3RoKSxhW2ldJiZvLnB1c2gocik7by5sZW5ndGgmJnMucHVzaCh7ZWxlbTpsLGhhbmRsZXJzOm99KX1yZXR1cm4gbD10aGlzLHU8dC5sZW5ndGgmJnMucHVzaCh7ZWxlbTpsLGhhbmRsZXJzOnQuc2xpY2UodSl9KSxzfSxhZGRQcm9wOmZ1bmN0aW9uKHQsZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGsuRXZlbnQucHJvdG90eXBlLHQse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDptKGUpP2Z1bmN0aW9uKCl7aWYodGhpcy5vcmlnaW5hbEV2ZW50KXJldHVybiBlKHRoaXMub3JpZ2luYWxFdmVudCl9OmZ1bmN0aW9uKCl7aWYodGhpcy5vcmlnaW5hbEV2ZW50KXJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbdF19LHNldDpmdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyx0LHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTplfSl9fSl9LGZpeDpmdW5jdGlvbihlKXtyZXR1cm4gZVtrLmV4cGFuZG9dP2U6bmV3IGsuRXZlbnQoZSl9LHNwZWNpYWw6e2xvYWQ6e25vQnViYmxlOiEwfSxjbGljazp7c2V0dXA6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpc3x8ZTtyZXR1cm4gcGUudGVzdCh0LnR5cGUpJiZ0LmNsaWNrJiZBKHQsImlucHV0IikmJkRlKHQsImNsaWNrIixrZSksITF9LHRyaWdnZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpc3x8ZTtyZXR1cm4gcGUudGVzdCh0LnR5cGUpJiZ0LmNsaWNrJiZBKHQsImlucHV0IikmJkRlKHQsImNsaWNrIiksITB9LF9kZWZhdWx0OmZ1bmN0aW9uKGUpe3ZhciB0PWUudGFyZ2V0O3JldHVybiBwZS50ZXN0KHQudHlwZSkmJnQuY2xpY2smJkEodCwiaW5wdXQiKSYmUS5nZXQodCwiY2xpY2siKXx8QSh0LCJhIil9fSxiZWZvcmV1bmxvYWQ6e3Bvc3REaXNwYXRjaDpmdW5jdGlvbihlKXt2b2lkIDAhPT1lLnJlc3VsdCYmZS5vcmlnaW5hbEV2ZW50JiYoZS5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlPWUucmVzdWx0KX19fX0say5yZW1vdmVFdmVudD1mdW5jdGlvbihlLHQsbil7ZS5yZW1vdmVFdmVudExpc3RlbmVyJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxuKX0say5FdmVudD1mdW5jdGlvbihlLHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGsuRXZlbnQpKXJldHVybiBuZXcgay5FdmVudChlLHQpO2UmJmUudHlwZT8odGhpcy5vcmlnaW5hbEV2ZW50PWUsdGhpcy50eXBlPWUudHlwZSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1lLmRlZmF1bHRQcmV2ZW50ZWR8fHZvaWQgMD09PWUuZGVmYXVsdFByZXZlbnRlZCYmITE9PT1lLnJldHVyblZhbHVlP2tlOlNlLHRoaXMudGFyZ2V0PWUudGFyZ2V0JiYzPT09ZS50YXJnZXQubm9kZVR5cGU/ZS50YXJnZXQucGFyZW50Tm9kZTplLnRhcmdldCx0aGlzLmN1cnJlbnRUYXJnZXQ9ZS5jdXJyZW50VGFyZ2V0LHRoaXMucmVsYXRlZFRhcmdldD1lLnJlbGF0ZWRUYXJnZXQpOnRoaXMudHlwZT1lLHQmJmsuZXh0ZW5kKHRoaXMsdCksdGhpcy50aW1lU3RhbXA9ZSYmZS50aW1lU3RhbXB8fERhdGUubm93KCksdGhpc1trLmV4cGFuZG9dPSEwfSxrLkV2ZW50LnByb3RvdHlwZT17Y29uc3RydWN0b3I6ay5FdmVudCxpc0RlZmF1bHRQcmV2ZW50ZWQ6U2UsaXNQcm9wYWdhdGlvblN0b3BwZWQ6U2UsaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6U2UsaXNTaW11bGF0ZWQ6ITEscHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9a2UsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUucHJldmVudERlZmF1bHQoKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9a2UsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUuc3RvcFByb3BhZ2F0aW9uKCl9LHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPWtlLGUmJiF0aGlzLmlzU2ltdWxhdGVkJiZlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHRoaXMuc3RvcFByb3BhZ2F0aW9uKCl9fSxrLmVhY2goe2FsdEtleTohMCxidWJibGVzOiEwLGNhbmNlbGFibGU6ITAsY2hhbmdlZFRvdWNoZXM6ITAsY3RybEtleTohMCxkZXRhaWw6ITAsZXZlbnRQaGFzZTohMCxtZXRhS2V5OiEwLHBhZ2VYOiEwLHBhZ2VZOiEwLHNoaWZ0S2V5OiEwLHZpZXc6ITAsImNoYXIiOiEwLGNvZGU6ITAsY2hhckNvZGU6ITAsa2V5OiEwLGtleUNvZGU6ITAsYnV0dG9uOiEwLGJ1dHRvbnM6ITAsY2xpZW50WDohMCxjbGllbnRZOiEwLG9mZnNldFg6ITAsb2Zmc2V0WTohMCxwb2ludGVySWQ6ITAscG9pbnRlclR5cGU6ITAsc2NyZWVuWDohMCxzY3JlZW5ZOiEwLHRhcmdldFRvdWNoZXM6ITAsdG9FbGVtZW50OiEwLHRvdWNoZXM6ITAsd2hpY2g6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5idXR0b247cmV0dXJuIG51bGw9PWUud2hpY2gmJlRlLnRlc3QoZS50eXBlKT9udWxsIT1lLmNoYXJDb2RlP2UuY2hhckNvZGU6ZS5rZXlDb2RlOiFlLndoaWNoJiZ2b2lkIDAhPT10JiZDZS50ZXN0KGUudHlwZSk/MSZ0PzE6MiZ0PzM6NCZ0PzI6MDplLndoaWNofX0say5ldmVudC5hZGRQcm9wKSxrLmVhY2goe2ZvY3VzOiJmb2N1c2luIixibHVyOiJmb2N1c291dCJ9LGZ1bmN0aW9uKGUsdCl7ay5ldmVudC5zcGVjaWFsW2VdPXtzZXR1cDpmdW5jdGlvbigpe3JldHVybiBEZSh0aGlzLGUsTmUpLCExfSx0cmlnZ2VyOmZ1bmN0aW9uKCl7cmV0dXJuIERlKHRoaXMsZSksITB9LGRlbGVnYXRlVHlwZTp0fX0pLGsuZWFjaCh7bW91c2VlbnRlcjoibW91c2VvdmVyIixtb3VzZWxlYXZlOiJtb3VzZW91dCIscG9pbnRlcmVudGVyOiJwb2ludGVyb3ZlciIscG9pbnRlcmxlYXZlOiJwb2ludGVyb3V0In0sZnVuY3Rpb24oZSxpKXtrLmV2ZW50LnNwZWNpYWxbZV09e2RlbGVnYXRlVHlwZTppLGJpbmRUeXBlOmksaGFuZGxlOmZ1bmN0aW9uKGUpe3ZhciB0LG49ZS5yZWxhdGVkVGFyZ2V0LHI9ZS5oYW5kbGVPYmo7cmV0dXJuIG4mJihuPT09dGhpc3x8ay5jb250YWlucyh0aGlzLG4pKXx8KGUudHlwZT1yLm9yaWdUeXBlLHQ9ci5oYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxlLnR5cGU9aSksdH19fSksay5mbi5leHRlbmQoe29uOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBBZSh0aGlzLGUsdCxuLHIpfSxvbmU6ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIEFlKHRoaXMsZSx0LG4sciwxKX0sb2ZmOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpO2lmKGUmJmUucHJldmVudERlZmF1bHQmJmUuaGFuZGxlT2JqKXJldHVybiByPWUuaGFuZGxlT2JqLGsoZS5kZWxlZ2F0ZVRhcmdldCkub2ZmKHIubmFtZXNwYWNlP3Iub3JpZ1R5cGUrIi4iK3IubmFtZXNwYWNlOnIub3JpZ1R5cGUsci5zZWxlY3RvcixyLmhhbmRsZXIpLHRoaXM7aWYoIm9iamVjdCI9PXR5cGVvZiBlKXtmb3IoaSBpbiBlKXRoaXMub2ZmKGksdCxlW2ldKTtyZXR1cm4gdGhpc31yZXR1cm4hMSE9PXQmJiJmdW5jdGlvbiIhPXR5cGVvZiB0fHwobj10LHQ9dm9pZCAwKSwhMT09PW4mJihuPVNlKSx0aGlzLmVhY2goZnVuY3Rpb24oKXtrLmV2ZW50LnJlbW92ZSh0aGlzLGUsbix0KX0pfX0pO3ZhciBqZT0vPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXC9cMD5ceDIwXHRcclxuXGZdKilbXj5dKilcLz4vZ2kscWU9LzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksTGU9L2NoZWNrZWRccyooPzpbXj1dfD1ccyouY2hlY2tlZC4pL2ksSGU9L15ccyo8ISg/OlxbQ0RBVEFcW3wtLSl8KD86XF1cXXwtLSk+XHMqJC9nO2Z1bmN0aW9uIE9lKGUsdCl7cmV0dXJuIEEoZSwidGFibGUiKSYmQSgxMSE9PXQubm9kZVR5cGU/dDp0LmZpcnN0Q2hpbGQsInRyIikmJmsoZSkuY2hpbGRyZW4oInRib2R5IilbMF18fGV9ZnVuY3Rpb24gUGUoZSl7cmV0dXJuIGUudHlwZT0obnVsbCE9PWUuZ2V0QXR0cmlidXRlKCJ0eXBlIikpKyIvIitlLnR5cGUsZX1mdW5jdGlvbiBSZShlKXtyZXR1cm4idHJ1ZS8iPT09KGUudHlwZXx8IiIpLnNsaWNlKDAsNSk/ZS50eXBlPWUudHlwZS5zbGljZSg1KTplLnJlbW92ZUF0dHJpYnV0ZSgidHlwZSIpLGV9ZnVuY3Rpb24gTWUoZSx0KXt2YXIgbixyLGksbyxhLHMsdSxsO2lmKDE9PT10Lm5vZGVUeXBlKXtpZihRLmhhc0RhdGEoZSkmJihvPVEuYWNjZXNzKGUpLGE9US5zZXQodCxvKSxsPW8uZXZlbnRzKSlmb3IoaSBpbiBkZWxldGUgYS5oYW5kbGUsYS5ldmVudHM9e30sbClmb3Iobj0wLHI9bFtpXS5sZW5ndGg7bjxyO24rKylrLmV2ZW50LmFkZCh0LGksbFtpXVtuXSk7Si5oYXNEYXRhKGUpJiYocz1KLmFjY2VzcyhlKSx1PWsuZXh0ZW5kKHt9LHMpLEouc2V0KHQsdSkpfX1mdW5jdGlvbiBJZShuLHIsaSxvKXtyPWcuYXBwbHkoW10scik7dmFyIGUsdCxhLHMsdSxsLGM9MCxmPW4ubGVuZ3RoLHA9Zi0xLGQ9clswXSxoPW0oZCk7aWYoaHx8MTxmJiYic3RyaW5nIj09dHlwZW9mIGQmJiF5LmNoZWNrQ2xvbmUmJkxlLnRlc3QoZCkpcmV0dXJuIG4uZWFjaChmdW5jdGlvbihlKXt2YXIgdD1uLmVxKGUpO2gmJihyWzBdPWQuY2FsbCh0aGlzLGUsdC5odG1sKCkpKSxJZSh0LHIsaSxvKX0pO2lmKGYmJih0PShlPXdlKHIsblswXS5vd25lckRvY3VtZW50LCExLG4sbykpLmZpcnN0Q2hpbGQsMT09PWUuY2hpbGROb2Rlcy5sZW5ndGgmJihlPXQpLHR8fG8pKXtmb3Iocz0oYT1rLm1hcCh2ZShlLCJzY3JpcHQiKSxQZSkpLmxlbmd0aDtjPGY7YysrKXU9ZSxjIT09cCYmKHU9ay5jbG9uZSh1LCEwLCEwKSxzJiZrLm1lcmdlKGEsdmUodSwic2NyaXB0IikpKSxpLmNhbGwobltjXSx1LGMpO2lmKHMpZm9yKGw9YVthLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LGsubWFwKGEsUmUpLGM9MDtjPHM7YysrKXU9YVtjXSxoZS50ZXN0KHUudHlwZXx8IiIpJiYhUS5hY2Nlc3ModSwiZ2xvYmFsRXZhbCIpJiZrLmNvbnRhaW5zKGwsdSkmJih1LnNyYyYmIm1vZHVsZSIhPT0odS50eXBlfHwiIikudG9Mb3dlckNhc2UoKT9rLl9ldmFsVXJsJiYhdS5ub01vZHVsZSYmay5fZXZhbFVybCh1LnNyYyx7bm9uY2U6dS5ub25jZXx8dS5nZXRBdHRyaWJ1dGUoIm5vbmNlIil9KTpiKHUudGV4dENvbnRlbnQucmVwbGFjZShIZSwiIiksdSxsKSl9cmV0dXJuIG59ZnVuY3Rpb24gV2UoZSx0LG4pe2Zvcih2YXIgcixpPXQ/ay5maWx0ZXIodCxlKTplLG89MDtudWxsIT0ocj1pW29dKTtvKyspbnx8MSE9PXIubm9kZVR5cGV8fGsuY2xlYW5EYXRhKHZlKHIpKSxyLnBhcmVudE5vZGUmJihuJiZvZShyKSYmeWUodmUociwic2NyaXB0IikpLHIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSk7cmV0dXJuIGV9ay5leHRlbmQoe2h0bWxQcmVmaWx0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZShqZSwiPCQxPjwvJDI+Iil9LGNsb25lOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYSxzLHUsbCxjPWUuY2xvbmVOb2RlKCEwKSxmPW9lKGUpO2lmKCEoeS5ub0Nsb25lQ2hlY2tlZHx8MSE9PWUubm9kZVR5cGUmJjExIT09ZS5ub2RlVHlwZXx8ay5pc1hNTERvYyhlKSkpZm9yKGE9dmUoYykscj0wLGk9KG89dmUoZSkpLmxlbmd0aDtyPGk7cisrKXM9b1tyXSx1PWFbcl0sdm9pZCAwLCJpbnB1dCI9PT0obD11Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpJiZwZS50ZXN0KHMudHlwZSk/dS5jaGVja2VkPXMuY2hlY2tlZDoiaW5wdXQiIT09bCYmInRleHRhcmVhIiE9PWx8fCh1LmRlZmF1bHRWYWx1ZT1zLmRlZmF1bHRWYWx1ZSk7aWYodClpZihuKWZvcihvPW98fHZlKGUpLGE9YXx8dmUoYykscj0wLGk9by5sZW5ndGg7cjxpO3IrKylNZShvW3JdLGFbcl0pO2Vsc2UgTWUoZSxjKTtyZXR1cm4gMDwoYT12ZShjLCJzY3JpcHQiKSkubGVuZ3RoJiZ5ZShhLCFmJiZ2ZShlLCJzY3JpcHQiKSksY30sY2xlYW5EYXRhOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuLHIsaT1rLmV2ZW50LnNwZWNpYWwsbz0wO3ZvaWQgMCE9PShuPWVbb10pO28rKylpZihHKG4pKXtpZih0PW5bUS5leHBhbmRvXSl7aWYodC5ldmVudHMpZm9yKHIgaW4gdC5ldmVudHMpaVtyXT9rLmV2ZW50LnJlbW92ZShuLHIpOmsucmVtb3ZlRXZlbnQobixyLHQuaGFuZGxlKTtuW1EuZXhwYW5kb109dm9pZCAwfW5bSi5leHBhbmRvXSYmKG5bSi5leHBhbmRvXT12b2lkIDApfX19KSxrLmZuLmV4dGVuZCh7ZGV0YWNoOmZ1bmN0aW9uKGUpe3JldHVybiBXZSh0aGlzLGUsITApfSxyZW1vdmU6ZnVuY3Rpb24oZSl7cmV0dXJuIFdlKHRoaXMsZSl9LHRleHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIF8odGhpcyxmdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZT9rLnRleHQodGhpcyk6dGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24oKXsxIT09dGhpcy5ub2RlVHlwZSYmMTEhPT10aGlzLm5vZGVUeXBlJiY5IT09dGhpcy5ub2RlVHlwZXx8KHRoaXMudGV4dENvbnRlbnQ9ZSl9KX0sbnVsbCxlLGFyZ3VtZW50cy5sZW5ndGgpfSxhcHBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gSWUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7MSE9PXRoaXMubm9kZVR5cGUmJjExIT09dGhpcy5ub2RlVHlwZSYmOSE9PXRoaXMubm9kZVR5cGV8fE9lKHRoaXMsZSkuYXBwZW5kQ2hpbGQoZSl9KX0scHJlcGVuZDpmdW5jdGlvbigpe3JldHVybiBJZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIHQ9T2UodGhpcyxlKTt0Lmluc2VydEJlZm9yZShlLHQuZmlyc3RDaGlsZCl9fSl9LGJlZm9yZTpmdW5jdGlvbigpe3JldHVybiBJZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSx0aGlzKX0pfSxhZnRlcjpmdW5jdGlvbigpe3JldHVybiBJZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZSx0aGlzLm5leHRTaWJsaW5nKX0pfSxlbXB0eTpmdW5jdGlvbigpe2Zvcih2YXIgZSx0PTA7bnVsbCE9KGU9dGhpc1t0XSk7dCsrKTE9PT1lLm5vZGVUeXBlJiYoay5jbGVhbkRhdGEodmUoZSwhMSkpLGUudGV4dENvbnRlbnQ9IiIpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbihlLHQpe3JldHVybiBlPW51bGwhPWUmJmUsdD1udWxsPT10P2U6dCx0aGlzLm1hcChmdW5jdGlvbigpe3JldHVybiBrLmNsb25lKHRoaXMsZSx0KX0pfSxodG1sOmZ1bmN0aW9uKGUpe3JldHVybiBfKHRoaXMsZnVuY3Rpb24oZSl7dmFyIHQ9dGhpc1swXXx8e30sbj0wLHI9dGhpcy5sZW5ndGg7aWYodm9pZCAwPT09ZSYmMT09PXQubm9kZVR5cGUpcmV0dXJuIHQuaW5uZXJIVE1MO2lmKCJzdHJpbmciPT10eXBlb2YgZSYmIXFlLnRlc3QoZSkmJiFnZVsoZGUuZXhlYyhlKXx8WyIiLCIiXSlbMV0udG9Mb3dlckNhc2UoKV0pe2U9ay5odG1sUHJlZmlsdGVyKGUpO3RyeXtmb3IoO248cjtuKyspMT09PSh0PXRoaXNbbl18fHt9KS5ub2RlVHlwZSYmKGsuY2xlYW5EYXRhKHZlKHQsITEpKSx0LmlubmVySFRNTD1lKTt0PTB9Y2F0Y2goZSl7fX10JiZ0aGlzLmVtcHR5KCkuYXBwZW5kKGUpfSxudWxsLGUsYXJndW1lbnRzLmxlbmd0aCl9LHJlcGxhY2VXaXRoOmZ1bmN0aW9uKCl7dmFyIG49W107cmV0dXJuIEllKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMucGFyZW50Tm9kZTtrLmluQXJyYXkodGhpcyxuKTwwJiYoay5jbGVhbkRhdGEodmUodGhpcykpLHQmJnQucmVwbGFjZUNoaWxkKGUsdGhpcykpfSxuKX19KSxrLmVhY2goe2FwcGVuZFRvOiJhcHBlbmQiLHByZXBlbmRUbzoicHJlcGVuZCIsaW5zZXJ0QmVmb3JlOiJiZWZvcmUiLGluc2VydEFmdGVyOiJhZnRlciIscmVwbGFjZUFsbDoicmVwbGFjZVdpdGgifSxmdW5jdGlvbihlLGEpe2suZm5bZV09ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49W10scj1rKGUpLGk9ci5sZW5ndGgtMSxvPTA7bzw9aTtvKyspdD1vPT09aT90aGlzOnRoaXMuY2xvbmUoITApLGsocltvXSlbYV0odCksdS5hcHBseShuLHQuZ2V0KCkpO3JldHVybiB0aGlzLnB1c2hTdGFjayhuKX19KTt2YXIgJGU9bmV3IFJlZ0V4cCgiXigiK3RlKyIpKD8hcHgpW2EteiVdKyQiLCJpIiksRmU9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O3JldHVybiB0JiZ0Lm9wZW5lcnx8KHQ9QyksdC5nZXRDb21wdXRlZFN0eWxlKGUpfSxCZT1uZXcgUmVnRXhwKHJlLmpvaW4oInwiKSwiaSIpO2Z1bmN0aW9uIF9lKGUsdCxuKXt2YXIgcixpLG8sYSxzPWUuc3R5bGU7cmV0dXJuKG49bnx8RmUoZSkpJiYoIiIhPT0oYT1uLmdldFByb3BlcnR5VmFsdWUodCl8fG5bdF0pfHxvZShlKXx8KGE9ay5zdHlsZShlLHQpKSwheS5waXhlbEJveFN0eWxlcygpJiYkZS50ZXN0KGEpJiZCZS50ZXN0KHQpJiYocj1zLndpZHRoLGk9cy5taW5XaWR0aCxvPXMubWF4V2lkdGgscy5taW5XaWR0aD1zLm1heFdpZHRoPXMud2lkdGg9YSxhPW4ud2lkdGgscy53aWR0aD1yLHMubWluV2lkdGg9aSxzLm1heFdpZHRoPW8pKSx2b2lkIDAhPT1hP2ErIiI6YX1mdW5jdGlvbiB6ZShlLHQpe3JldHVybntnZXQ6ZnVuY3Rpb24oKXtpZighZSgpKXJldHVybih0aGlzLmdldD10KS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7ZGVsZXRlIHRoaXMuZ2V0fX19IWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe2lmKHUpe3Muc3R5bGUuY3NzVGV4dD0icG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O21hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MCIsdS5zdHlsZS5jc3NUZXh0PSJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7bWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDt3aWR0aDo2MCU7dG9wOjElIixpZS5hcHBlbmRDaGlsZChzKS5hcHBlbmRDaGlsZCh1KTt2YXIgZT1DLmdldENvbXB1dGVkU3R5bGUodSk7bj0iMSUiIT09ZS50b3AsYT0xMj09PXQoZS5tYXJnaW5MZWZ0KSx1LnN0eWxlLnJpZ2h0PSI2MCUiLG89MzY9PT10KGUucmlnaHQpLHI9MzY9PT10KGUud2lkdGgpLHUuc3R5bGUucG9zaXRpb249ImFic29sdXRlIixpPTEyPT09dCh1Lm9mZnNldFdpZHRoLzMpLGllLnJlbW92ZUNoaWxkKHMpLHU9bnVsbH19ZnVuY3Rpb24gdChlKXtyZXR1cm4gTWF0aC5yb3VuZChwYXJzZUZsb2F0KGUpKX12YXIgbixyLGksbyxhLHM9RS5jcmVhdGVFbGVtZW50KCJkaXYiKSx1PUUuY3JlYXRlRWxlbWVudCgiZGl2Iik7dS5zdHlsZSYmKHUuc3R5bGUuYmFja2dyb3VuZENsaXA9ImNvbnRlbnQtYm94Iix1LmNsb25lTm9kZSghMCkuc3R5bGUuYmFja2dyb3VuZENsaXA9IiIseS5jbGVhckNsb25lU3R5bGU9ImNvbnRlbnQtYm94Ij09PXUuc3R5bGUuYmFja2dyb3VuZENsaXAsay5leHRlbmQoeSx7Ym94U2l6aW5nUmVsaWFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gZSgpLHJ9LHBpeGVsQm94U3R5bGVzOmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxvfSxwaXhlbFBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGUoKSxufSxyZWxpYWJsZU1hcmdpbkxlZnQ6ZnVuY3Rpb24oKXtyZXR1cm4gZSgpLGF9LHNjcm9sbGJveFNpemU6ZnVuY3Rpb24oKXtyZXR1cm4gZSgpLGl9fSkpfSgpO3ZhciBVZT1bIldlYmtpdCIsIk1veiIsIm1zIl0sWGU9RS5jcmVhdGVFbGVtZW50KCJkaXYiKS5zdHlsZSxWZT17fTtmdW5jdGlvbiBHZShlKXt2YXIgdD1rLmNzc1Byb3BzW2VdfHxWZVtlXTtyZXR1cm4gdHx8KGUgaW4gWGU/ZTpWZVtlXT1mdW5jdGlvbihlKXt2YXIgdD1lWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxuPVVlLmxlbmd0aDt3aGlsZShuLS0paWYoKGU9VWVbbl0rdClpbiBYZSlyZXR1cm4gZX0oZSl8fGUpfXZhciBZZT0vXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sUWU9L14tLS8sSmU9e3Bvc2l0aW9uOiJhYnNvbHV0ZSIsdmlzaWJpbGl0eToiaGlkZGVuIixkaXNwbGF5OiJibG9jayJ9LEtlPXtsZXR0ZXJTcGFjaW5nOiIwIixmb250V2VpZ2h0OiI0MDAifTtmdW5jdGlvbiBaZShlLHQsbil7dmFyIHI9bmUuZXhlYyh0KTtyZXR1cm4gcj9NYXRoLm1heCgwLHJbMl0tKG58fDApKSsoclszXXx8InB4Iik6dH1mdW5jdGlvbiBldChlLHQsbixyLGksbyl7dmFyIGE9IndpZHRoIj09PXQ/MTowLHM9MCx1PTA7aWYobj09PShyPyJib3JkZXIiOiJjb250ZW50IikpcmV0dXJuIDA7Zm9yKDthPDQ7YSs9MikibWFyZ2luIj09PW4mJih1Kz1rLmNzcyhlLG4rcmVbYV0sITAsaSkpLHI/KCJjb250ZW50Ij09PW4mJih1LT1rLmNzcyhlLCJwYWRkaW5nIityZVthXSwhMCxpKSksIm1hcmdpbiIhPT1uJiYodS09ay5jc3MoZSwiYm9yZGVyIityZVthXSsiV2lkdGgiLCEwLGkpKSk6KHUrPWsuY3NzKGUsInBhZGRpbmciK3JlW2FdLCEwLGkpLCJwYWRkaW5nIiE9PW4/dSs9ay5jc3MoZSwiYm9yZGVyIityZVthXSsiV2lkdGgiLCEwLGkpOnMrPWsuY3NzKGUsImJvcmRlciIrcmVbYV0rIldpZHRoIiwhMCxpKSk7cmV0dXJuIXImJjA8PW8mJih1Kz1NYXRoLm1heCgwLE1hdGguY2VpbChlWyJvZmZzZXQiK3RbMF0udG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpXS1vLXUtcy0uNSkpfHwwKSx1fWZ1bmN0aW9uIHR0KGUsdCxuKXt2YXIgcj1GZShlKSxpPSgheS5ib3hTaXppbmdSZWxpYWJsZSgpfHxuKSYmImJvcmRlci1ib3giPT09ay5jc3MoZSwiYm94U2l6aW5nIiwhMSxyKSxvPWksYT1fZShlLHQscikscz0ib2Zmc2V0Iit0WzBdLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKTtpZigkZS50ZXN0KGEpKXtpZighbilyZXR1cm4gYTthPSJhdXRvIn1yZXR1cm4oIXkuYm94U2l6aW5nUmVsaWFibGUoKSYmaXx8ImF1dG8iPT09YXx8IXBhcnNlRmxvYXQoYSkmJiJpbmxpbmUiPT09ay5jc3MoZSwiZGlzcGxheSIsITEscikpJiZlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoJiYoaT0iYm9yZGVyLWJveCI9PT1rLmNzcyhlLCJib3hTaXppbmciLCExLHIpLChvPXMgaW4gZSkmJihhPWVbc10pKSwoYT1wYXJzZUZsb2F0KGEpfHwwKStldChlLHQsbnx8KGk/ImJvcmRlciI6ImNvbnRlbnQiKSxvLHIsYSkrInB4In1mdW5jdGlvbiBudChlLHQsbixyLGkpe3JldHVybiBuZXcgbnQucHJvdG90eXBlLmluaXQoZSx0LG4scixpKX1rLmV4dGVuZCh7Y3NzSG9va3M6e29wYWNpdHk6e2dldDpmdW5jdGlvbihlLHQpe2lmKHQpe3ZhciBuPV9lKGUsIm9wYWNpdHkiKTtyZXR1cm4iIj09PW4/IjEiOm59fX19LGNzc051bWJlcjp7YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsY29sdW1uQ291bnQ6ITAsZmlsbE9wYWNpdHk6ITAsZmxleEdyb3c6ITAsZmxleFNocmluazohMCxmb250V2VpZ2h0OiEwLGdyaWRBcmVhOiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTdGFydDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITB9LGNzc1Byb3BzOnt9LHN0eWxlOmZ1bmN0aW9uKGUsdCxuLHIpe2lmKGUmJjMhPT1lLm5vZGVUeXBlJiY4IT09ZS5ub2RlVHlwZSYmZS5zdHlsZSl7dmFyIGksbyxhLHM9Vih0KSx1PVFlLnRlc3QodCksbD1lLnN0eWxlO2lmKHV8fCh0PUdlKHMpKSxhPWsuY3NzSG9va3NbdF18fGsuY3NzSG9va3Nbc10sdm9pZCAwPT09bilyZXR1cm4gYSYmImdldCJpbiBhJiZ2b2lkIDAhPT0oaT1hLmdldChlLCExLHIpKT9pOmxbdF07InN0cmluZyI9PT0obz10eXBlb2YgbikmJihpPW5lLmV4ZWMobikpJiZpWzFdJiYobj1sZShlLHQsaSksbz0ibnVtYmVyIiksbnVsbCE9biYmbj09biYmKCJudW1iZXIiIT09b3x8dXx8KG4rPWkmJmlbM118fChrLmNzc051bWJlcltzXT8iIjoicHgiKSkseS5jbGVhckNsb25lU3R5bGV8fCIiIT09bnx8MCE9PXQuaW5kZXhPZigiYmFja2dyb3VuZCIpfHwobFt0XT0iaW5oZXJpdCIpLGEmJiJzZXQiaW4gYSYmdm9pZCAwPT09KG49YS5zZXQoZSxuLHIpKXx8KHU/bC5zZXRQcm9wZXJ0eSh0LG4pOmxbdF09bikpfX0sY3NzOmZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYSxzPVYodCk7cmV0dXJuIFFlLnRlc3QodCl8fCh0PUdlKHMpKSwoYT1rLmNzc0hvb2tzW3RdfHxrLmNzc0hvb2tzW3NdKSYmImdldCJpbiBhJiYoaT1hLmdldChlLCEwLG4pKSx2b2lkIDA9PT1pJiYoaT1fZShlLHQscikpLCJub3JtYWwiPT09aSYmdCBpbiBLZSYmKGk9S2VbdF0pLCIiPT09bnx8bj8obz1wYXJzZUZsb2F0KGkpLCEwPT09bnx8aXNGaW5pdGUobyk/b3x8MDppKTppfX0pLGsuZWFjaChbImhlaWdodCIsIndpZHRoIl0sZnVuY3Rpb24oZSx1KXtrLmNzc0hvb2tzW3VdPXtnZXQ6ZnVuY3Rpb24oZSx0LG4pe2lmKHQpcmV0dXJuIVllLnRlc3Qoay5jc3MoZSwiZGlzcGxheSIpKXx8ZS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCYmZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aD90dChlLHUsbik6dWUoZSxKZSxmdW5jdGlvbigpe3JldHVybiB0dChlLHUsbil9KX0sc2V0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpPUZlKGUpLG89IXkuc2Nyb2xsYm94U2l6ZSgpJiYiYWJzb2x1dGUiPT09aS5wb3NpdGlvbixhPShvfHxuKSYmImJvcmRlci1ib3giPT09ay5jc3MoZSwiYm94U2l6aW5nIiwhMSxpKSxzPW4/ZXQoZSx1LG4sYSxpKTowO3JldHVybiBhJiZvJiYocy09TWF0aC5jZWlsKGVbIm9mZnNldCIrdVswXS50b1VwcGVyQ2FzZSgpK3Uuc2xpY2UoMSldLXBhcnNlRmxvYXQoaVt1XSktZXQoZSx1LCJib3JkZXIiLCExLGkpLS41KSkscyYmKHI9bmUuZXhlYyh0KSkmJiJweCIhPT0oclszXXx8InB4IikmJihlLnN0eWxlW3VdPXQsdD1rLmNzcyhlLHUpKSxaZSgwLHQscyl9fX0pLGsuY3NzSG9va3MubWFyZ2luTGVmdD16ZSh5LnJlbGlhYmxlTWFyZ2luTGVmdCxmdW5jdGlvbihlLHQpe2lmKHQpcmV0dXJuKHBhcnNlRmxvYXQoX2UoZSwibWFyZ2luTGVmdCIpKXx8ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LXVlKGUse21hcmdpbkxlZnQ6MH0sZnVuY3Rpb24oKXtyZXR1cm4gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0fSkpKyJweCJ9KSxrLmVhY2goe21hcmdpbjoiIixwYWRkaW5nOiIiLGJvcmRlcjoiV2lkdGgifSxmdW5jdGlvbihpLG8pe2suY3NzSG9va3NbaStvXT17ZXhwYW5kOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49e30scj0ic3RyaW5nIj09dHlwZW9mIGU/ZS5zcGxpdCgiICIpOltlXTt0PDQ7dCsrKW5baStyZVt0XStvXT1yW3RdfHxyW3QtMl18fHJbMF07cmV0dXJuIG59fSwibWFyZ2luIiE9PWkmJihrLmNzc0hvb2tzW2krb10uc2V0PVplKX0pLGsuZm4uZXh0ZW5kKHtjc3M6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gXyh0aGlzLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89e30sYT0wO2lmKEFycmF5LmlzQXJyYXkodCkpe2ZvcihyPUZlKGUpLGk9dC5sZW5ndGg7YTxpO2ErKylvW3RbYV1dPWsuY3NzKGUsdFthXSwhMSxyKTtyZXR1cm4gb31yZXR1cm4gdm9pZCAwIT09bj9rLnN0eWxlKGUsdCxuKTprLmNzcyhlLHQpfSxlLHQsMTxhcmd1bWVudHMubGVuZ3RoKX19KSwoKGsuVHdlZW49bnQpLnByb3RvdHlwZT17Y29uc3RydWN0b3I6bnQsaW5pdDpmdW5jdGlvbihlLHQsbixyLGksbyl7dGhpcy5lbGVtPWUsdGhpcy5wcm9wPW4sdGhpcy5lYXNpbmc9aXx8ay5lYXNpbmcuX2RlZmF1bHQsdGhpcy5vcHRpb25zPXQsdGhpcy5zdGFydD10aGlzLm5vdz10aGlzLmN1cigpLHRoaXMuZW5kPXIsdGhpcy51bml0PW98fChrLmNzc051bWJlcltuXT8iIjoicHgiKX0sY3VyOmZ1bmN0aW9uKCl7dmFyIGU9bnQucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIGUmJmUuZ2V0P2UuZ2V0KHRoaXMpOm50LnByb3BIb29rcy5fZGVmYXVsdC5nZXQodGhpcyl9LHJ1bjpmdW5jdGlvbihlKXt2YXIgdCxuPW50LnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiB0aGlzLm9wdGlvbnMuZHVyYXRpb24/dGhpcy5wb3M9dD1rLmVhc2luZ1t0aGlzLmVhc2luZ10oZSx0aGlzLm9wdGlvbnMuZHVyYXRpb24qZSwwLDEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKTp0aGlzLnBvcz10PWUsdGhpcy5ub3c9KHRoaXMuZW5kLXRoaXMuc3RhcnQpKnQrdGhpcy5zdGFydCx0aGlzLm9wdGlvbnMuc3RlcCYmdGhpcy5vcHRpb25zLnN0ZXAuY2FsbCh0aGlzLmVsZW0sdGhpcy5ub3csdGhpcyksbiYmbi5zZXQ/bi5zZXQodGhpcyk6bnQucHJvcEhvb2tzLl9kZWZhdWx0LnNldCh0aGlzKSx0aGlzfX0pLmluaXQucHJvdG90eXBlPW50LnByb3RvdHlwZSwobnQucHJvcEhvb2tzPXtfZGVmYXVsdDp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiAxIT09ZS5lbGVtLm5vZGVUeXBlfHxudWxsIT1lLmVsZW1bZS5wcm9wXSYmbnVsbD09ZS5lbGVtLnN0eWxlW2UucHJvcF0/ZS5lbGVtW2UucHJvcF06KHQ9ay5jc3MoZS5lbGVtLGUucHJvcCwiIikpJiYiYXV0byIhPT10P3Q6MH0sc2V0OmZ1bmN0aW9uKGUpe2suZnguc3RlcFtlLnByb3BdP2suZnguc3RlcFtlLnByb3BdKGUpOjEhPT1lLmVsZW0ubm9kZVR5cGV8fCFrLmNzc0hvb2tzW2UucHJvcF0mJm51bGw9PWUuZWxlbS5zdHlsZVtHZShlLnByb3ApXT9lLmVsZW1bZS5wcm9wXT1lLm5vdzprLnN0eWxlKGUuZWxlbSxlLnByb3AsZS5ub3crZS51bml0KX19fSkuc2Nyb2xsVG9wPW50LnByb3BIb29rcy5zY3JvbGxMZWZ0PXtzZXQ6ZnVuY3Rpb24oZSl7ZS5lbGVtLm5vZGVUeXBlJiZlLmVsZW0ucGFyZW50Tm9kZSYmKGUuZWxlbVtlLnByb3BdPWUubm93KX19LGsuZWFzaW5nPXtsaW5lYXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LHN3aW5nOmZ1bmN0aW9uKGUpe3JldHVybi41LU1hdGguY29zKGUqTWF0aC5QSSkvMn0sX2RlZmF1bHQ6InN3aW5nIn0say5meD1udC5wcm90b3R5cGUuaW5pdCxrLmZ4LnN0ZXA9e307dmFyIHJ0LGl0LG90LGF0LHN0PS9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyx1dD0vcXVldWVIb29rcyQvO2Z1bmN0aW9uIGx0KCl7aXQmJighMT09PUUuaGlkZGVuJiZDLnJlcXVlc3RBbmltYXRpb25GcmFtZT9DLnJlcXVlc3RBbmltYXRpb25GcmFtZShsdCk6Qy5zZXRUaW1lb3V0KGx0LGsuZnguaW50ZXJ2YWwpLGsuZngudGljaygpKX1mdW5jdGlvbiBjdCgpe3JldHVybiBDLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtydD12b2lkIDB9KSxydD1EYXRlLm5vdygpfWZ1bmN0aW9uIGZ0KGUsdCl7dmFyIG4scj0wLGk9e2hlaWdodDplfTtmb3IodD10PzE6MDtyPDQ7cis9Mi10KWlbIm1hcmdpbiIrKG49cmVbcl0pXT1pWyJwYWRkaW5nIituXT1lO3JldHVybiB0JiYoaS5vcGFjaXR5PWkud2lkdGg9ZSksaX1mdW5jdGlvbiBwdChlLHQsbil7Zm9yKHZhciByLGk9KGR0LnR3ZWVuZXJzW3RdfHxbXSkuY29uY2F0KGR0LnR3ZWVuZXJzWyIqIl0pLG89MCxhPWkubGVuZ3RoO288YTtvKyspaWYocj1pW29dLmNhbGwobix0LGUpKXJldHVybiByfWZ1bmN0aW9uIGR0KG8sZSx0KXt2YXIgbixhLHI9MCxpPWR0LnByZWZpbHRlcnMubGVuZ3RoLHM9ay5EZWZlcnJlZCgpLmFsd2F5cyhmdW5jdGlvbigpe2RlbGV0ZSB1LmVsZW19KSx1PWZ1bmN0aW9uKCl7aWYoYSlyZXR1cm4hMTtmb3IodmFyIGU9cnR8fGN0KCksdD1NYXRoLm1heCgwLGwuc3RhcnRUaW1lK2wuZHVyYXRpb24tZSksbj0xLSh0L2wuZHVyYXRpb258fDApLHI9MCxpPWwudHdlZW5zLmxlbmd0aDtyPGk7cisrKWwudHdlZW5zW3JdLnJ1bihuKTtyZXR1cm4gcy5ub3RpZnlXaXRoKG8sW2wsbix0XSksbjwxJiZpP3Q6KGl8fHMubm90aWZ5V2l0aChvLFtsLDEsMF0pLHMucmVzb2x2ZVdpdGgobyxbbF0pLCExKX0sbD1zLnByb21pc2Uoe2VsZW06byxwcm9wczprLmV4dGVuZCh7fSxlKSxvcHRzOmsuZXh0ZW5kKCEwLHtzcGVjaWFsRWFzaW5nOnt9LGVhc2luZzprLmVhc2luZy5fZGVmYXVsdH0sdCksb3JpZ2luYWxQcm9wZXJ0aWVzOmUsb3JpZ2luYWxPcHRpb25zOnQsc3RhcnRUaW1lOnJ0fHxjdCgpLGR1cmF0aW9uOnQuZHVyYXRpb24sdHdlZW5zOltdLGNyZWF0ZVR3ZWVuOmZ1bmN0aW9uKGUsdCl7dmFyIG49ay5Ud2VlbihvLGwub3B0cyxlLHQsbC5vcHRzLnNwZWNpYWxFYXNpbmdbZV18fGwub3B0cy5lYXNpbmcpO3JldHVybiBsLnR3ZWVucy5wdXNoKG4pLG59LHN0b3A6ZnVuY3Rpb24oZSl7dmFyIHQ9MCxuPWU/bC50d2VlbnMubGVuZ3RoOjA7aWYoYSlyZXR1cm4gdGhpcztmb3IoYT0hMDt0PG47dCsrKWwudHdlZW5zW3RdLnJ1bigxKTtyZXR1cm4gZT8ocy5ub3RpZnlXaXRoKG8sW2wsMSwwXSkscy5yZXNvbHZlV2l0aChvLFtsLGVdKSk6cy5yZWplY3RXaXRoKG8sW2wsZV0pLHRoaXN9fSksYz1sLnByb3BzO2ZvcighZnVuY3Rpb24oZSx0KXt2YXIgbixyLGksbyxhO2ZvcihuIGluIGUpaWYoaT10W3I9VihuKV0sbz1lW25dLEFycmF5LmlzQXJyYXkobykmJihpPW9bMV0sbz1lW25dPW9bMF0pLG4hPT1yJiYoZVtyXT1vLGRlbGV0ZSBlW25dKSwoYT1rLmNzc0hvb2tzW3JdKSYmImV4cGFuZCJpbiBhKWZvcihuIGluIG89YS5leHBhbmQobyksZGVsZXRlIGVbcl0sbyluIGluIGV8fChlW25dPW9bbl0sdFtuXT1pKTtlbHNlIHRbcl09aX0oYyxsLm9wdHMuc3BlY2lhbEVhc2luZyk7cjxpO3IrKylpZihuPWR0LnByZWZpbHRlcnNbcl0uY2FsbChsLG8sYyxsLm9wdHMpKXJldHVybiBtKG4uc3RvcCkmJihrLl9xdWV1ZUhvb2tzKGwuZWxlbSxsLm9wdHMucXVldWUpLnN0b3A9bi5zdG9wLmJpbmQobikpLG47cmV0dXJuIGsubWFwKGMscHQsbCksbShsLm9wdHMuc3RhcnQpJiZsLm9wdHMuc3RhcnQuY2FsbChvLGwpLGwucHJvZ3Jlc3MobC5vcHRzLnByb2dyZXNzKS5kb25lKGwub3B0cy5kb25lLGwub3B0cy5jb21wbGV0ZSkuZmFpbChsLm9wdHMuZmFpbCkuYWx3YXlzKGwub3B0cy5hbHdheXMpLGsuZngudGltZXIoay5leHRlbmQodSx7ZWxlbTpvLGFuaW06bCxxdWV1ZTpsLm9wdHMucXVldWV9KSksbH1rLkFuaW1hdGlvbj1rLmV4dGVuZChkdCx7dHdlZW5lcnM6eyIqIjpbZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLmNyZWF0ZVR3ZWVuKGUsdCk7cmV0dXJuIGxlKG4uZWxlbSxlLG5lLmV4ZWModCksbiksbn1dfSx0d2VlbmVyOmZ1bmN0aW9uKGUsdCl7bShlKT8odD1lLGU9WyIqIl0pOmU9ZS5tYXRjaChSKTtmb3IodmFyIG4scj0wLGk9ZS5sZW5ndGg7cjxpO3IrKyluPWVbcl0sZHQudHdlZW5lcnNbbl09ZHQudHdlZW5lcnNbbl18fFtdLGR0LnR3ZWVuZXJzW25dLnVuc2hpZnQodCl9LHByZWZpbHRlcnM6W2Z1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYSxzLHUsbCxjLGY9IndpZHRoImluIHR8fCJoZWlnaHQiaW4gdCxwPXRoaXMsZD17fSxoPWUuc3R5bGUsZz1lLm5vZGVUeXBlJiZzZShlKSx2PVEuZ2V0KGUsImZ4c2hvdyIpO2ZvcihyIGluIG4ucXVldWV8fChudWxsPT0oYT1rLl9xdWV1ZUhvb2tzKGUsImZ4IikpLnVucXVldWVkJiYoYS51bnF1ZXVlZD0wLHM9YS5lbXB0eS5maXJlLGEuZW1wdHkuZmlyZT1mdW5jdGlvbigpe2EudW5xdWV1ZWR8fHMoKX0pLGEudW5xdWV1ZWQrKyxwLmFsd2F5cyhmdW5jdGlvbigpe3AuYWx3YXlzKGZ1bmN0aW9uKCl7YS51bnF1ZXVlZC0tLGsucXVldWUoZSwiZngiKS5sZW5ndGh8fGEuZW1wdHkuZmlyZSgpfSl9KSksdClpZihpPXRbcl0sc3QudGVzdChpKSl7aWYoZGVsZXRlIHRbcl0sbz1vfHwidG9nZ2xlIj09PWksaT09PShnPyJoaWRlIjoic2hvdyIpKXtpZigic2hvdyIhPT1pfHwhdnx8dm9pZCAwPT09dltyXSljb250aW51ZTtnPSEwfWRbcl09diYmdltyXXx8ay5zdHlsZShlLHIpfWlmKCh1PSFrLmlzRW1wdHlPYmplY3QodCkpfHwhay5pc0VtcHR5T2JqZWN0KGQpKWZvcihyIGluIGYmJjE9PT1lLm5vZGVUeXBlJiYobi5vdmVyZmxvdz1baC5vdmVyZmxvdyxoLm92ZXJmbG93WCxoLm92ZXJmbG93WV0sbnVsbD09KGw9diYmdi5kaXNwbGF5KSYmKGw9US5nZXQoZSwiZGlzcGxheSIpKSwibm9uZSI9PT0oYz1rLmNzcyhlLCJkaXNwbGF5IikpJiYobD9jPWw6KGZlKFtlXSwhMCksbD1lLnN0eWxlLmRpc3BsYXl8fGwsYz1rLmNzcyhlLCJkaXNwbGF5IiksZmUoW2VdKSkpLCgiaW5saW5lIj09PWN8fCJpbmxpbmUtYmxvY2siPT09YyYmbnVsbCE9bCkmJiJub25lIj09PWsuY3NzKGUsImZsb2F0IikmJih1fHwocC5kb25lKGZ1bmN0aW9uKCl7aC5kaXNwbGF5PWx9KSxudWxsPT1sJiYoYz1oLmRpc3BsYXksbD0ibm9uZSI9PT1jPyIiOmMpKSxoLmRpc3BsYXk9ImlubGluZS1ibG9jayIpKSxuLm92ZXJmbG93JiYoaC5vdmVyZmxvdz0iaGlkZGVuIixwLmFsd2F5cyhmdW5jdGlvbigpe2gub3ZlcmZsb3c9bi5vdmVyZmxvd1swXSxoLm92ZXJmbG93WD1uLm92ZXJmbG93WzFdLGgub3ZlcmZsb3dZPW4ub3ZlcmZsb3dbMl19KSksdT0hMSxkKXV8fCh2PyJoaWRkZW4iaW4gdiYmKGc9di5oaWRkZW4pOnY9US5hY2Nlc3MoZSwiZnhzaG93Iix7ZGlzcGxheTpsfSksbyYmKHYuaGlkZGVuPSFnKSxnJiZmZShbZV0sITApLHAuZG9uZShmdW5jdGlvbigpe2ZvcihyIGluIGd8fGZlKFtlXSksUS5yZW1vdmUoZSwiZnhzaG93IiksZClrLnN0eWxlKGUscixkW3JdKX0pKSx1PXB0KGc/dltyXTowLHIscCksciBpbiB2fHwodltyXT11LnN0YXJ0LGcmJih1LmVuZD11LnN0YXJ0LHUuc3RhcnQ9MCkpfV0scHJlZmlsdGVyOmZ1bmN0aW9uKGUsdCl7dD9kdC5wcmVmaWx0ZXJzLnVuc2hpZnQoZSk6ZHQucHJlZmlsdGVycy5wdXNoKGUpfX0pLGsuc3BlZWQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWUmJiJvYmplY3QiPT10eXBlb2YgZT9rLmV4dGVuZCh7fSxlKTp7Y29tcGxldGU6bnx8IW4mJnR8fG0oZSkmJmUsZHVyYXRpb246ZSxlYXNpbmc6biYmdHx8dCYmIW0odCkmJnR9O3JldHVybiBrLmZ4Lm9mZj9yLmR1cmF0aW9uPTA6Im51bWJlciIhPXR5cGVvZiByLmR1cmF0aW9uJiYoci5kdXJhdGlvbiBpbiBrLmZ4LnNwZWVkcz9yLmR1cmF0aW9uPWsuZnguc3BlZWRzW3IuZHVyYXRpb25dOnIuZHVyYXRpb249ay5meC5zcGVlZHMuX2RlZmF1bHQpLG51bGwhPXIucXVldWUmJiEwIT09ci5xdWV1ZXx8KHIucXVldWU9ImZ4Iiksci5vbGQ9ci5jb21wbGV0ZSxyLmNvbXBsZXRlPWZ1bmN0aW9uKCl7bShyLm9sZCkmJnIub2xkLmNhbGwodGhpcyksci5xdWV1ZSYmay5kZXF1ZXVlKHRoaXMsci5xdWV1ZSl9LHJ9LGsuZm4uZXh0ZW5kKHtmYWRlVG86ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIHRoaXMuZmlsdGVyKHNlKS5jc3MoIm9wYWNpdHkiLDApLnNob3coKS5lbmQoKS5hbmltYXRlKHtvcGFjaXR5OnR9LGUsbixyKX0sYW5pbWF0ZTpmdW5jdGlvbih0LGUsbixyKXt2YXIgaT1rLmlzRW1wdHlPYmplY3QodCksbz1rLnNwZWVkKGUsbixyKSxhPWZ1bmN0aW9uKCl7dmFyIGU9ZHQodGhpcyxrLmV4dGVuZCh7fSx0KSxvKTsoaXx8US5nZXQodGhpcywiZmluaXNoIikpJiZlLnN0b3AoITApfTtyZXR1cm4gYS5maW5pc2g9YSxpfHwhMT09PW8ucXVldWU/dGhpcy5lYWNoKGEpOnRoaXMucXVldWUoby5xdWV1ZSxhKX0sc3RvcDpmdW5jdGlvbihpLGUsbyl7dmFyIGE9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zdG9wO2RlbGV0ZSBlLnN0b3AsdChvKX07cmV0dXJuInN0cmluZyIhPXR5cGVvZiBpJiYobz1lLGU9aSxpPXZvaWQgMCksZSYmITEhPT1pJiZ0aGlzLnF1ZXVlKGl8fCJmeCIsW10pLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlPSEwLHQ9bnVsbCE9aSYmaSsicXVldWVIb29rcyIsbj1rLnRpbWVycyxyPVEuZ2V0KHRoaXMpO2lmKHQpclt0XSYmclt0XS5zdG9wJiZhKHJbdF0pO2Vsc2UgZm9yKHQgaW4gcilyW3RdJiZyW3RdLnN0b3AmJnV0LnRlc3QodCkmJmEoclt0XSk7Zm9yKHQ9bi5sZW5ndGg7dC0tOyluW3RdLmVsZW0hPT10aGlzfHxudWxsIT1pJiZuW3RdLnF1ZXVlIT09aXx8KG5bdF0uYW5pbS5zdG9wKG8pLGU9ITEsbi5zcGxpY2UodCwxKSk7IWUmJm98fGsuZGVxdWV1ZSh0aGlzLGkpfSl9LGZpbmlzaDpmdW5jdGlvbihhKXtyZXR1cm4hMSE9PWEmJihhPWF8fCJmeCIpLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlLHQ9US5nZXQodGhpcyksbj10W2ErInF1ZXVlIl0scj10W2ErInF1ZXVlSG9va3MiXSxpPWsudGltZXJzLG89bj9uLmxlbmd0aDowO2Zvcih0LmZpbmlzaD0hMCxrLnF1ZXVlKHRoaXMsYSxbXSksciYmci5zdG9wJiZyLnN0b3AuY2FsbCh0aGlzLCEwKSxlPWkubGVuZ3RoO2UtLTspaVtlXS5lbGVtPT09dGhpcyYmaVtlXS5xdWV1ZT09PWEmJihpW2VdLmFuaW0uc3RvcCghMCksaS5zcGxpY2UoZSwxKSk7Zm9yKGU9MDtlPG87ZSsrKW5bZV0mJm5bZV0uZmluaXNoJiZuW2VdLmZpbmlzaC5jYWxsKHRoaXMpO2RlbGV0ZSB0LmZpbmlzaH0pfX0pLGsuZWFjaChbInRvZ2dsZSIsInNob3ciLCJoaWRlIl0sZnVuY3Rpb24oZSxyKXt2YXIgaT1rLmZuW3JdO2suZm5bcl09ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBudWxsPT1lfHwiYm9vbGVhbiI9PXR5cGVvZiBlP2kuYXBwbHkodGhpcyxhcmd1bWVudHMpOnRoaXMuYW5pbWF0ZShmdChyLCEwKSxlLHQsbil9fSksay5lYWNoKHtzbGlkZURvd246ZnQoInNob3ciKSxzbGlkZVVwOmZ0KCJoaWRlIiksc2xpZGVUb2dnbGU6ZnQoInRvZ2dsZSIpLGZhZGVJbjp7b3BhY2l0eToic2hvdyJ9LGZhZGVPdXQ6e29wYWNpdHk6ImhpZGUifSxmYWRlVG9nZ2xlOntvcGFjaXR5OiJ0b2dnbGUifX0sZnVuY3Rpb24oZSxyKXtrLmZuW2VdPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy5hbmltYXRlKHIsZSx0LG4pfX0pLGsudGltZXJzPVtdLGsuZngudGljaz1mdW5jdGlvbigpe3ZhciBlLHQ9MCxuPWsudGltZXJzO2ZvcihydD1EYXRlLm5vdygpO3Q8bi5sZW5ndGg7dCsrKShlPW5bdF0pKCl8fG5bdF0hPT1lfHxuLnNwbGljZSh0LS0sMSk7bi5sZW5ndGh8fGsuZnguc3RvcCgpLHJ0PXZvaWQgMH0say5meC50aW1lcj1mdW5jdGlvbihlKXtrLnRpbWVycy5wdXNoKGUpLGsuZnguc3RhcnQoKX0say5meC5pbnRlcnZhbD0xMyxrLmZ4LnN0YXJ0PWZ1bmN0aW9uKCl7aXR8fChpdD0hMCxsdCgpKX0say5meC5zdG9wPWZ1bmN0aW9uKCl7aXQ9bnVsbH0say5meC5zcGVlZHM9e3Nsb3c6NjAwLGZhc3Q6MjAwLF9kZWZhdWx0OjQwMH0say5mbi5kZWxheT1mdW5jdGlvbihyLGUpe3JldHVybiByPWsuZngmJmsuZnguc3BlZWRzW3JdfHxyLGU9ZXx8ImZ4Iix0aGlzLnF1ZXVlKGUsZnVuY3Rpb24oZSx0KXt2YXIgbj1DLnNldFRpbWVvdXQoZSxyKTt0LnN0b3A9ZnVuY3Rpb24oKXtDLmNsZWFyVGltZW91dChuKX19KX0sb3Q9RS5jcmVhdGVFbGVtZW50KCJpbnB1dCIpLGF0PUUuY3JlYXRlRWxlbWVudCgic2VsZWN0IikuYXBwZW5kQ2hpbGQoRS5jcmVhdGVFbGVtZW50KCJvcHRpb24iKSksb3QudHlwZT0iY2hlY2tib3giLHkuY2hlY2tPbj0iIiE9PW90LnZhbHVlLHkub3B0U2VsZWN0ZWQ9YXQuc2VsZWN0ZWQsKG90PUUuY3JlYXRlRWxlbWVudCgiaW5wdXQiKSkudmFsdWU9InQiLG90LnR5cGU9InJhZGlvIix5LnJhZGlvVmFsdWU9InQiPT09b3QudmFsdWU7dmFyIGh0LGd0PWsuZXhwci5hdHRySGFuZGxlO2suZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIF8odGhpcyxrLmF0dHIsZSx0LDE8YXJndW1lbnRzLmxlbmd0aCl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2sucmVtb3ZlQXR0cih0aGlzLGUpfSl9fSksay5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz1lLm5vZGVUeXBlO2lmKDMhPT1vJiY4IT09byYmMiE9PW8pcmV0dXJuInVuZGVmaW5lZCI9PXR5cGVvZiBlLmdldEF0dHJpYnV0ZT9rLnByb3AoZSx0LG4pOigxPT09byYmay5pc1hNTERvYyhlKXx8KGk9ay5hdHRySG9va3NbdC50b0xvd2VyQ2FzZSgpXXx8KGsuZXhwci5tYXRjaC5ib29sLnRlc3QodCk/aHQ6dm9pZCAwKSksdm9pZCAwIT09bj9udWxsPT09bj92b2lkIGsucmVtb3ZlQXR0cihlLHQpOmkmJiJzZXQiaW4gaSYmdm9pZCAwIT09KHI9aS5zZXQoZSxuLHQpKT9yOihlLnNldEF0dHJpYnV0ZSh0LG4rIiIpLG4pOmkmJiJnZXQiaW4gaSYmbnVsbCE9PShyPWkuZ2V0KGUsdCkpP3I6bnVsbD09KHI9ay5maW5kLmF0dHIoZSx0KSk/dm9pZCAwOnIpfSxhdHRySG9va3M6e3R5cGU6e3NldDpmdW5jdGlvbihlLHQpe2lmKCF5LnJhZGlvVmFsdWUmJiJyYWRpbyI9PT10JiZBKGUsImlucHV0Iikpe3ZhciBuPWUudmFsdWU7cmV0dXJuIGUuc2V0QXR0cmlidXRlKCJ0eXBlIix0KSxuJiYoZS52YWx1ZT1uKSx0fX19fSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0wLGk9dCYmdC5tYXRjaChSKTtpZihpJiYxPT09ZS5ub2RlVHlwZSl3aGlsZShuPWlbcisrXSllLnJlbW92ZUF0dHJpYnV0ZShuKX19KSxodD17c2V0OmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4hMT09PXQ/ay5yZW1vdmVBdHRyKGUsbik6ZS5zZXRBdHRyaWJ1dGUobixuKSxufX0say5lYWNoKGsuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXHcrL2cpLGZ1bmN0aW9uKGUsdCl7dmFyIGE9Z3RbdF18fGsuZmluZC5hdHRyO2d0W3RdPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89dC50b0xvd2VyQ2FzZSgpO3JldHVybiBufHwoaT1ndFtvXSxndFtvXT1yLHI9bnVsbCE9YShlLHQsbik/bzpudWxsLGd0W29dPWkpLHJ9fSk7dmFyIHZ0PS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2kseXQ9L14oPzphfGFyZWEpJC9pO2Z1bmN0aW9uIG10KGUpe3JldHVybihlLm1hdGNoKFIpfHxbXSkuam9pbigiICIpfWZ1bmN0aW9uIHh0KGUpe3JldHVybiBlLmdldEF0dHJpYnV0ZSYmZS5nZXRBdHRyaWJ1dGUoImNsYXNzIil8fCIifWZ1bmN0aW9uIGJ0KGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2U6InN0cmluZyI9PXR5cGVvZiBlJiZlLm1hdGNoKFIpfHxbXX1rLmZuLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihlLHQpe3JldHVybiBfKHRoaXMsay5wcm9wLGUsdCwxPGFyZ3VtZW50cy5sZW5ndGgpfSxyZW1vdmVQcm9wOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtkZWxldGUgdGhpc1trLnByb3BGaXhbZV18fGVdfSl9fSksay5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz1lLm5vZGVUeXBlO2lmKDMhPT1vJiY4IT09byYmMiE9PW8pcmV0dXJuIDE9PT1vJiZrLmlzWE1MRG9jKGUpfHwodD1rLnByb3BGaXhbdF18fHQsaT1rLnByb3BIb29rc1t0XSksdm9pZCAwIT09bj9pJiYic2V0ImluIGkmJnZvaWQgMCE9PShyPWkuc2V0KGUsbix0KSk/cjplW3RdPW46aSYmImdldCJpbiBpJiZudWxsIT09KHI9aS5nZXQoZSx0KSk/cjplW3RdfSxwcm9wSG9va3M6e3RhYkluZGV4OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ay5maW5kLmF0dHIoZSwidGFiaW5kZXgiKTtyZXR1cm4gdD9wYXJzZUludCh0LDEwKTp2dC50ZXN0KGUubm9kZU5hbWUpfHx5dC50ZXN0KGUubm9kZU5hbWUpJiZlLmhyZWY/MDotMX19fSxwcm9wRml4OnsiZm9yIjoiaHRtbEZvciIsImNsYXNzIjoiY2xhc3NOYW1lIn19KSx5Lm9wdFNlbGVjdGVkfHwoay5wcm9wSG9va3Muc2VsZWN0ZWQ9e2dldDpmdW5jdGlvbihlKXt2YXIgdD1lLnBhcmVudE5vZGU7cmV0dXJuIHQmJnQucGFyZW50Tm9kZSYmdC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsbnVsbH0sc2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTt0JiYodC5zZWxlY3RlZEluZGV4LHQucGFyZW50Tm9kZSYmdC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgpfX0pLGsuZWFjaChbInRhYkluZGV4IiwicmVhZE9ubHkiLCJtYXhMZW5ndGgiLCJjZWxsU3BhY2luZyIsImNlbGxQYWRkaW5nIiwicm93U3BhbiIsImNvbFNwYW4iLCJ1c2VNYXAiLCJmcmFtZUJvcmRlciIsImNvbnRlbnRFZGl0YWJsZSJdLGZ1bmN0aW9uKCl7ay5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV09dGhpc30pLGsuZm4uZXh0ZW5kKHthZGRDbGFzczpmdW5jdGlvbih0KXt2YXIgZSxuLHIsaSxvLGEscyx1PTA7aWYobSh0KSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpe2sodGhpcykuYWRkQ2xhc3ModC5jYWxsKHRoaXMsZSx4dCh0aGlzKSkpfSk7aWYoKGU9YnQodCkpLmxlbmd0aCl3aGlsZShuPXRoaXNbdSsrXSlpZihpPXh0KG4pLHI9MT09PW4ubm9kZVR5cGUmJiIgIittdChpKSsiICIpe2E9MDt3aGlsZShvPWVbYSsrXSlyLmluZGV4T2YoIiAiK28rIiAiKTwwJiYocis9bysiICIpO2khPT0ocz1tdChyKSkmJm4uc2V0QXR0cmlidXRlKCJjbGFzcyIscyl9cmV0dXJuIHRoaXN9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKHQpe3ZhciBlLG4scixpLG8sYSxzLHU9MDtpZihtKHQpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oZSl7ayh0aGlzKS5yZW1vdmVDbGFzcyh0LmNhbGwodGhpcyxlLHh0KHRoaXMpKSl9KTtpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdGhpcy5hdHRyKCJjbGFzcyIsIiIpO2lmKChlPWJ0KHQpKS5sZW5ndGgpd2hpbGUobj10aGlzW3UrK10paWYoaT14dChuKSxyPTE9PT1uLm5vZGVUeXBlJiYiICIrbXQoaSkrIiAiKXthPTA7d2hpbGUobz1lW2ErK10pd2hpbGUoLTE8ci5pbmRleE9mKCIgIitvKyIgIikpcj1yLnJlcGxhY2UoIiAiK28rIiAiLCIgIik7aSE9PShzPW10KHIpKSYmbi5zZXRBdHRyaWJ1dGUoImNsYXNzIixzKX1yZXR1cm4gdGhpc30sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oaSx0KXt2YXIgbz10eXBlb2YgaSxhPSJzdHJpbmciPT09b3x8QXJyYXkuaXNBcnJheShpKTtyZXR1cm4iYm9vbGVhbiI9PXR5cGVvZiB0JiZhP3Q/dGhpcy5hZGRDbGFzcyhpKTp0aGlzLnJlbW92ZUNsYXNzKGkpOm0oaSk/dGhpcy5lYWNoKGZ1bmN0aW9uKGUpe2sodGhpcykudG9nZ2xlQ2xhc3MoaS5jYWxsKHRoaXMsZSx4dCh0aGlzKSx0KSx0KX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlLHQsbixyO2lmKGEpe3Q9MCxuPWsodGhpcykscj1idChpKTt3aGlsZShlPXJbdCsrXSluLmhhc0NsYXNzKGUpP24ucmVtb3ZlQ2xhc3MoZSk6bi5hZGRDbGFzcyhlKX1lbHNlIHZvaWQgMCE9PWkmJiJib29sZWFuIiE9PW98fCgoZT14dCh0aGlzKSkmJlEuc2V0KHRoaXMsIl9fY2xhc3NOYW1lX18iLGUpLHRoaXMuc2V0QXR0cmlidXRlJiZ0aGlzLnNldEF0dHJpYnV0ZSgiY2xhc3MiLGV8fCExPT09aT8iIjpRLmdldCh0aGlzLCJfX2NsYXNzTmFtZV9fIil8fCIiKSl9KX0saGFzQ2xhc3M6ZnVuY3Rpb24oZSl7dmFyIHQsbixyPTA7dD0iICIrZSsiICI7d2hpbGUobj10aGlzW3IrK10paWYoMT09PW4ubm9kZVR5cGUmJi0xPCgiICIrbXQoeHQobikpKyIgIikuaW5kZXhPZih0KSlyZXR1cm4hMDtyZXR1cm4hMX19KTt2YXIgd3Q9L1xyL2c7ay5mbi5leHRlbmQoe3ZhbDpmdW5jdGlvbihuKXt2YXIgcixlLGksdD10aGlzWzBdO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhpPW0obiksdGhpcy5lYWNoKGZ1bmN0aW9uKGUpe3ZhciB0OzE9PT10aGlzLm5vZGVUeXBlJiYobnVsbD09KHQ9aT9uLmNhbGwodGhpcyxlLGsodGhpcykudmFsKCkpOm4pP3Q9IiI6Im51bWJlciI9PXR5cGVvZiB0P3QrPSIiOkFycmF5LmlzQXJyYXkodCkmJih0PWsubWFwKHQsZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/IiI6ZSsiIn0pKSwocj1rLnZhbEhvb2tzW3RoaXMudHlwZV18fGsudmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkmJiJzZXQiaW4gciYmdm9pZCAwIT09ci5zZXQodGhpcyx0LCJ2YWx1ZSIpfHwodGhpcy52YWx1ZT10KSl9KSk6dD8ocj1rLnZhbEhvb2tzW3QudHlwZV18fGsudmFsSG9va3NbdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkmJiJnZXQiaW4gciYmdm9pZCAwIT09KGU9ci5nZXQodCwidmFsdWUiKSk/ZToic3RyaW5nIj09dHlwZW9mKGU9dC52YWx1ZSk/ZS5yZXBsYWNlKHd0LCIiKTpudWxsPT1lPyIiOmU6dm9pZCAwfX0pLGsuZXh0ZW5kKHt2YWxIb29rczp7b3B0aW9uOntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ay5maW5kLmF0dHIoZSwidmFsdWUiKTtyZXR1cm4gbnVsbCE9dD90Om10KGsudGV4dChlKSl9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaT1lLm9wdGlvbnMsbz1lLnNlbGVjdGVkSW5kZXgsYT0ic2VsZWN0LW9uZSI9PT1lLnR5cGUscz1hP251bGw6W10sdT1hP28rMTppLmxlbmd0aDtmb3Iocj1vPDA/dTphP286MDtyPHU7cisrKWlmKCgobj1pW3JdKS5zZWxlY3RlZHx8cj09PW8pJiYhbi5kaXNhYmxlZCYmKCFuLnBhcmVudE5vZGUuZGlzYWJsZWR8fCFBKG4ucGFyZW50Tm9kZSwib3B0Z3JvdXAiKSkpe2lmKHQ9ayhuKS52YWwoKSxhKXJldHVybiB0O3MucHVzaCh0KX1yZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpPWUub3B0aW9ucyxvPWsubWFrZUFycmF5KHQpLGE9aS5sZW5ndGg7d2hpbGUoYS0tKSgocj1pW2FdKS5zZWxlY3RlZD0tMTxrLmluQXJyYXkoay52YWxIb29rcy5vcHRpb24uZ2V0KHIpLG8pKSYmKG49ITApO3JldHVybiBufHwoZS5zZWxlY3RlZEluZGV4PS0xKSxvfX19fSksay5lYWNoKFsicmFkaW8iLCJjaGVja2JveCJdLGZ1bmN0aW9uKCl7ay52YWxIb29rc1t0aGlzXT17c2V0OmZ1bmN0aW9uKGUsdCl7aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gZS5jaGVja2VkPS0xPGsuaW5BcnJheShrKGUpLnZhbCgpLHQpfX0seS5jaGVja09ufHwoay52YWxIb29rc1t0aGlzXS5nZXQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PT1lLmdldEF0dHJpYnV0ZSgidmFsdWUiKT8ib24iOmUudmFsdWV9KX0pLHkuZm9jdXNpbj0ib25mb2N1c2luImluIEM7dmFyIFR0PS9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxDdD1mdW5jdGlvbihlKXtlLnN0b3BQcm9wYWdhdGlvbigpfTtrLmV4dGVuZChrLmV2ZW50LHt0cmlnZ2VyOmZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYSxzLHUsbCxjLGYscD1bbnx8RV0sZD12LmNhbGwoZSwidHlwZSIpP2UudHlwZTplLGg9di5jYWxsKGUsIm5hbWVzcGFjZSIpP2UubmFtZXNwYWNlLnNwbGl0KCIuIik6W107aWYobz1mPWE9bj1ufHxFLDMhPT1uLm5vZGVUeXBlJiY4IT09bi5ub2RlVHlwZSYmIVR0LnRlc3QoZCtrLmV2ZW50LnRyaWdnZXJlZCkmJigtMTxkLmluZGV4T2YoIi4iKSYmKGQ9KGg9ZC5zcGxpdCgiLiIpKS5zaGlmdCgpLGguc29ydCgpKSx1PWQuaW5kZXhPZigiOiIpPDAmJiJvbiIrZCwoZT1lW2suZXhwYW5kb10/ZTpuZXcgay5FdmVudChkLCJvYmplY3QiPT10eXBlb2YgZSYmZSkpLmlzVHJpZ2dlcj1yPzI6MyxlLm5hbWVzcGFjZT1oLmpvaW4oIi4iKSxlLnJuYW1lc3BhY2U9ZS5uYW1lc3BhY2U/bmV3IFJlZ0V4cCgiKF58XFwuKSIraC5qb2luKCJcXC4oPzouKlxcLnwpIikrIihcXC58JCkiKTpudWxsLGUucmVzdWx0PXZvaWQgMCxlLnRhcmdldHx8KGUudGFyZ2V0PW4pLHQ9bnVsbD09dD9bZV06ay5tYWtlQXJyYXkodCxbZV0pLGM9ay5ldmVudC5zcGVjaWFsW2RdfHx7fSxyfHwhYy50cmlnZ2VyfHwhMSE9PWMudHJpZ2dlci5hcHBseShuLHQpKSl7aWYoIXImJiFjLm5vQnViYmxlJiYheChuKSl7Zm9yKHM9Yy5kZWxlZ2F0ZVR5cGV8fGQsVHQudGVzdChzK2QpfHwobz1vLnBhcmVudE5vZGUpO287bz1vLnBhcmVudE5vZGUpcC5wdXNoKG8pLGE9bzthPT09KG4ub3duZXJEb2N1bWVudHx8RSkmJnAucHVzaChhLmRlZmF1bHRWaWV3fHxhLnBhcmVudFdpbmRvd3x8Qyl9aT0wO3doaWxlKChvPXBbaSsrXSkmJiFlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpZj1vLGUudHlwZT0xPGk/czpjLmJpbmRUeXBlfHxkLChsPShRLmdldChvLCJldmVudHMiKXx8e30pW2UudHlwZV0mJlEuZ2V0KG8sImhhbmRsZSIpKSYmbC5hcHBseShvLHQpLChsPXUmJm9bdV0pJiZsLmFwcGx5JiZHKG8pJiYoZS5yZXN1bHQ9bC5hcHBseShvLHQpLCExPT09ZS5yZXN1bHQmJmUucHJldmVudERlZmF1bHQoKSk7cmV0dXJuIGUudHlwZT1kLHJ8fGUuaXNEZWZhdWx0UHJldmVudGVkKCl8fGMuX2RlZmF1bHQmJiExIT09Yy5fZGVmYXVsdC5hcHBseShwLnBvcCgpLHQpfHwhRyhuKXx8dSYmbShuW2RdKSYmIXgobikmJigoYT1uW3VdKSYmKG5bdV09bnVsbCksay5ldmVudC50cmlnZ2VyZWQ9ZCxlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkmJmYuYWRkRXZlbnRMaXN0ZW5lcihkLEN0KSxuW2RdKCksZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpJiZmLnJlbW92ZUV2ZW50TGlzdGVuZXIoZCxDdCksay5ldmVudC50cmlnZ2VyZWQ9dm9pZCAwLGEmJihuW3VdPWEpKSxlLnJlc3VsdH19LHNpbXVsYXRlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1rLmV4dGVuZChuZXcgay5FdmVudCxuLHt0eXBlOmUsaXNTaW11bGF0ZWQ6ITB9KTtrLmV2ZW50LnRyaWdnZXIocixudWxsLHQpfX0pLGsuZm4uZXh0ZW5kKHt0cmlnZ2VyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2suZXZlbnQudHJpZ2dlcihlLHQsdGhpcyl9KX0sdHJpZ2dlckhhbmRsZXI6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzWzBdO2lmKG4pcmV0dXJuIGsuZXZlbnQudHJpZ2dlcihlLHQsbiwhMCl9fSkseS5mb2N1c2lufHxrLmVhY2goe2ZvY3VzOiJmb2N1c2luIixibHVyOiJmb2N1c291dCJ9LGZ1bmN0aW9uKG4scil7dmFyIGk9ZnVuY3Rpb24oZSl7ay5ldmVudC5zaW11bGF0ZShyLGUudGFyZ2V0LGsuZXZlbnQuZml4KGUpKX07ay5ldmVudC5zcGVjaWFsW3JdPXtzZXR1cDpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyx0PVEuYWNjZXNzKGUscik7dHx8ZS5hZGRFdmVudExpc3RlbmVyKG4saSwhMCksUS5hY2Nlc3MoZSxyLCh0fHwwKSsxKX0sdGVhcmRvd246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsdD1RLmFjY2VzcyhlLHIpLTE7dD9RLmFjY2VzcyhlLHIsdCk6KGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihuLGksITApLFEucmVtb3ZlKGUscikpfX19KTt2YXIgRXQ9Qy5sb2NhdGlvbixrdD1EYXRlLm5vdygpLFN0PS9cPy87ay5wYXJzZVhNTD1mdW5jdGlvbihlKXt2YXIgdDtpZighZXx8InN0cmluZyIhPXR5cGVvZiBlKXJldHVybiBudWxsO3RyeXt0PShuZXcgQy5ET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyhlLCJ0ZXh0L3htbCIpfWNhdGNoKGUpe3Q9dm9pZCAwfXJldHVybiB0JiYhdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgicGFyc2VyZXJyb3IiKS5sZW5ndGh8fGsuZXJyb3IoIkludmFsaWQgWE1MOiAiK2UpLHR9O3ZhciBOdD0vXFtcXSQvLEF0PS9ccj9cbi9nLER0PS9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxqdD0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7ZnVuY3Rpb24gcXQobixlLHIsaSl7dmFyIHQ7aWYoQXJyYXkuaXNBcnJheShlKSlrLmVhY2goZSxmdW5jdGlvbihlLHQpe3J8fE50LnRlc3Qobik/aShuLHQpOnF0KG4rIlsiKygib2JqZWN0Ij09dHlwZW9mIHQmJm51bGwhPXQ/ZToiIikrIl0iLHQscixpKX0pO2Vsc2UgaWYocnx8Im9iamVjdCIhPT13KGUpKWkobixlKTtlbHNlIGZvcih0IGluIGUpcXQobisiWyIrdCsiXSIsZVt0XSxyLGkpfWsucGFyYW09ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdLGk9ZnVuY3Rpb24oZSx0KXt2YXIgbj1tKHQpP3QoKTp0O3Jbci5sZW5ndGhdPWVuY29kZVVSSUNvbXBvbmVudChlKSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KG51bGw9PW4/IiI6bil9O2lmKG51bGw9PWUpcmV0dXJuIiI7aWYoQXJyYXkuaXNBcnJheShlKXx8ZS5qcXVlcnkmJiFrLmlzUGxhaW5PYmplY3QoZSkpay5lYWNoKGUsZnVuY3Rpb24oKXtpKHRoaXMubmFtZSx0aGlzLnZhbHVlKX0pO2Vsc2UgZm9yKG4gaW4gZSlxdChuLGVbbl0sdCxpKTtyZXR1cm4gci5qb2luKCImIil9LGsuZm4uZXh0ZW5kKHtzZXJpYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gay5wYXJhbSh0aGlzLnNlcmlhbGl6ZUFycmF5KCkpfSxzZXJpYWxpemVBcnJheTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBlPWsucHJvcCh0aGlzLCJlbGVtZW50cyIpO3JldHVybiBlP2subWFrZUFycmF5KGUpOnRoaXN9KS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgZT10aGlzLnR5cGU7cmV0dXJuIHRoaXMubmFtZSYmIWsodGhpcykuaXMoIjpkaXNhYmxlZCIpJiZqdC50ZXN0KHRoaXMubm9kZU5hbWUpJiYhRHQudGVzdChlKSYmKHRoaXMuY2hlY2tlZHx8IXBlLnRlc3QoZSkpfSkubWFwKGZ1bmN0aW9uKGUsdCl7dmFyIG49ayh0aGlzKS52YWwoKTtyZXR1cm4gbnVsbD09bj9udWxsOkFycmF5LmlzQXJyYXkobik/ay5tYXAobixmdW5jdGlvbihlKXtyZXR1cm57bmFtZTp0Lm5hbWUsdmFsdWU6ZS5yZXBsYWNlKEF0LCJcclxuIil9fSk6e25hbWU6dC5uYW1lLHZhbHVlOm4ucmVwbGFjZShBdCwiXHJcbiIpfX0pLmdldCgpfX0pO3ZhciBMdD0vJTIwL2csSHQ9LyMuKiQvLE90PS8oWz8mXSlfPVteJl0qLyxQdD0vXiguKj8pOlsgXHRdKihbXlxyXG5dKikkL2dtLFJ0PS9eKD86R0VUfEhFQUQpJC8sTXQ9L15cL1wvLyxJdD17fSxXdD17fSwkdD0iKi8iLmNvbmNhdCgiKiIpLEZ0PUUuY3JlYXRlRWxlbWVudCgiYSIpO2Z1bmN0aW9uIEJ0KG8pe3JldHVybiBmdW5jdGlvbihlLHQpeyJzdHJpbmciIT10eXBlb2YgZSYmKHQ9ZSxlPSIqIik7dmFyIG4scj0wLGk9ZS50b0xvd2VyQ2FzZSgpLm1hdGNoKFIpfHxbXTtpZihtKHQpKXdoaWxlKG49aVtyKytdKSIrIj09PW5bMF0/KG49bi5zbGljZSgxKXx8IioiLChvW25dPW9bbl18fFtdKS51bnNoaWZ0KHQpKToob1tuXT1vW25dfHxbXSkucHVzaCh0KX19ZnVuY3Rpb24gX3QodCxpLG8sYSl7dmFyIHM9e30sdT10PT09V3Q7ZnVuY3Rpb24gbChlKXt2YXIgcjtyZXR1cm4gc1tlXT0hMCxrLmVhY2godFtlXXx8W10sZnVuY3Rpb24oZSx0KXt2YXIgbj10KGksbyxhKTtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIG58fHV8fHNbbl0/dT8hKHI9bik6dm9pZCAwOihpLmRhdGFUeXBlcy51bnNoaWZ0KG4pLGwobiksITEpfSkscn1yZXR1cm4gbChpLmRhdGFUeXBlc1swXSl8fCFzWyIqIl0mJmwoIioiKX1mdW5jdGlvbiB6dChlLHQpe3ZhciBuLHIsaT1rLmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9uc3x8e307Zm9yKG4gaW4gdCl2b2lkIDAhPT10W25dJiYoKGlbbl0/ZTpyfHwocj17fSkpW25dPXRbbl0pO3JldHVybiByJiZrLmV4dGVuZCghMCxlLHIpLGV9RnQuaHJlZj1FdC5ocmVmLGsuZXh0ZW5kKHthY3RpdmU6MCxsYXN0TW9kaWZpZWQ6e30sZXRhZzp7fSxhamF4U2V0dGluZ3M6e3VybDpFdC5ocmVmLHR5cGU6IkdFVCIsaXNMb2NhbDovXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLy50ZXN0KEV0LnByb3RvY29sKSxnbG9iYWw6ITAscHJvY2Vzc0RhdGE6ITAsYXN5bmM6ITAsY29udGVudFR5cGU6ImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCIsYWNjZXB0czp7IioiOiR0LHRleHQ6InRleHQvcGxhaW4iLGh0bWw6InRleHQvaHRtbCIseG1sOiJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sIixqc29uOiJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQifSxjb250ZW50czp7eG1sOi9cYnhtbFxiLyxodG1sOi9cYmh0bWwvLGpzb246L1xianNvblxiL30scmVzcG9uc2VGaWVsZHM6e3htbDoicmVzcG9uc2VYTUwiLHRleHQ6InJlc3BvbnNlVGV4dCIsanNvbjoicmVzcG9uc2VKU09OIn0sY29udmVydGVyczp7IiogdGV4dCI6U3RyaW5nLCJ0ZXh0IGh0bWwiOiEwLCJ0ZXh0IGpzb24iOkpTT04ucGFyc2UsInRleHQgeG1sIjprLnBhcnNlWE1MfSxmbGF0T3B0aW9uczp7dXJsOiEwLGNvbnRleHQ6ITB9fSxhamF4U2V0dXA6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD96dCh6dChlLGsuYWpheFNldHRpbmdzKSx0KTp6dChrLmFqYXhTZXR0aW5ncyxlKX0sYWpheFByZWZpbHRlcjpCdChJdCksYWpheFRyYW5zcG9ydDpCdChXdCksYWpheDpmdW5jdGlvbihlLHQpeyJvYmplY3QiPT10eXBlb2YgZSYmKHQ9ZSxlPXZvaWQgMCksdD10fHx7fTt2YXIgYyxmLHAsbixkLHIsaCxnLGksbyx2PWsuYWpheFNldHVwKHt9LHQpLHk9di5jb250ZXh0fHx2LG09di5jb250ZXh0JiYoeS5ub2RlVHlwZXx8eS5qcXVlcnkpP2soeSk6ay5ldmVudCx4PWsuRGVmZXJyZWQoKSxiPWsuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLHc9di5zdGF0dXNDb2RlfHx7fSxhPXt9LHM9e30sdT0iY2FuY2VsZWQiLFQ9e3JlYWR5U3RhdGU6MCxnZXRSZXNwb25zZUhlYWRlcjpmdW5jdGlvbihlKXt2YXIgdDtpZihoKXtpZighbil7bj17fTt3aGlsZSh0PVB0LmV4ZWMocCkpblt0WzFdLnRvTG93ZXJDYXNlKCkrIiAiXT0oblt0WzFdLnRvTG93ZXJDYXNlKCkrIiAiXXx8W10pLmNvbmNhdCh0WzJdKX10PW5bZS50b0xvd2VyQ2FzZSgpKyIgIl19cmV0dXJuIG51bGw9PXQ/bnVsbDp0LmpvaW4oIiwgIil9LGdldEFsbFJlc3BvbnNlSGVhZGVyczpmdW5jdGlvbigpe3JldHVybiBoP3A6bnVsbH0sc2V0UmVxdWVzdEhlYWRlcjpmdW5jdGlvbihlLHQpe3JldHVybiBudWxsPT1oJiYoZT1zW2UudG9Mb3dlckNhc2UoKV09c1tlLnRvTG93ZXJDYXNlKCldfHxlLGFbZV09dCksdGhpc30sb3ZlcnJpZGVNaW1lVHlwZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09aCYmKHYubWltZVR5cGU9ZSksdGhpc30sc3RhdHVzQ29kZTpmdW5jdGlvbihlKXt2YXIgdDtpZihlKWlmKGgpVC5hbHdheXMoZVtULnN0YXR1c10pO2Vsc2UgZm9yKHQgaW4gZSl3W3RdPVt3W3RdLGVbdF1dO3JldHVybiB0aGlzfSxhYm9ydDpmdW5jdGlvbihlKXt2YXIgdD1lfHx1O3JldHVybiBjJiZjLmFib3J0KHQpLGwoMCx0KSx0aGlzfX07aWYoeC5wcm9taXNlKFQpLHYudXJsPSgoZXx8di51cmx8fEV0LmhyZWYpKyIiKS5yZXBsYWNlKE10LEV0LnByb3RvY29sKyIvLyIpLHYudHlwZT10Lm1ldGhvZHx8dC50eXBlfHx2Lm1ldGhvZHx8di50eXBlLHYuZGF0YVR5cGVzPSh2LmRhdGFUeXBlfHwiKiIpLnRvTG93ZXJDYXNlKCkubWF0Y2goUil8fFsiIl0sbnVsbD09di5jcm9zc0RvbWFpbil7cj1FLmNyZWF0ZUVsZW1lbnQoImEiKTt0cnl7ci5ocmVmPXYudXJsLHIuaHJlZj1yLmhyZWYsdi5jcm9zc0RvbWFpbj1GdC5wcm90b2NvbCsiLy8iK0Z0Lmhvc3QhPXIucHJvdG9jb2wrIi8vIityLmhvc3R9Y2F0Y2goZSl7di5jcm9zc0RvbWFpbj0hMH19aWYodi5kYXRhJiZ2LnByb2Nlc3NEYXRhJiYic3RyaW5nIiE9dHlwZW9mIHYuZGF0YSYmKHYuZGF0YT1rLnBhcmFtKHYuZGF0YSx2LnRyYWRpdGlvbmFsKSksX3QoSXQsdix0LFQpLGgpcmV0dXJuIFQ7Zm9yKGkgaW4oZz1rLmV2ZW50JiZ2Lmdsb2JhbCkmJjA9PWsuYWN0aXZlKysmJmsuZXZlbnQudHJpZ2dlcigiYWpheFN0YXJ0Iiksdi50eXBlPXYudHlwZS50b1VwcGVyQ2FzZSgpLHYuaGFzQ29udGVudD0hUnQudGVzdCh2LnR5cGUpLGY9di51cmwucmVwbGFjZShIdCwiIiksdi5oYXNDb250ZW50P3YuZGF0YSYmdi5wcm9jZXNzRGF0YSYmMD09PSh2LmNvbnRlbnRUeXBlfHwiIikuaW5kZXhPZigiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIikmJih2LmRhdGE9di5kYXRhLnJlcGxhY2UoTHQsIisiKSk6KG89di51cmwuc2xpY2UoZi5sZW5ndGgpLHYuZGF0YSYmKHYucHJvY2Vzc0RhdGF8fCJzdHJpbmciPT10eXBlb2Ygdi5kYXRhKSYmKGYrPShTdC50ZXN0KGYpPyImIjoiPyIpK3YuZGF0YSxkZWxldGUgdi5kYXRhKSwhMT09PXYuY2FjaGUmJihmPWYucmVwbGFjZShPdCwiJDEiKSxvPShTdC50ZXN0KGYpPyImIjoiPyIpKyJfPSIra3QrKytvKSx2LnVybD1mK28pLHYuaWZNb2RpZmllZCYmKGsubGFzdE1vZGlmaWVkW2ZdJiZULnNldFJlcXVlc3RIZWFkZXIoIklmLU1vZGlmaWVkLVNpbmNlIixrLmxhc3RNb2RpZmllZFtmXSksay5ldGFnW2ZdJiZULnNldFJlcXVlc3RIZWFkZXIoIklmLU5vbmUtTWF0Y2giLGsuZXRhZ1tmXSkpLCh2LmRhdGEmJnYuaGFzQ29udGVudCYmITEhPT12LmNvbnRlbnRUeXBlfHx0LmNvbnRlbnRUeXBlKSYmVC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LVR5cGUiLHYuY29udGVudFR5cGUpLFQuc2V0UmVxdWVzdEhlYWRlcigiQWNjZXB0Iix2LmRhdGFUeXBlc1swXSYmdi5hY2NlcHRzW3YuZGF0YVR5cGVzWzBdXT92LmFjY2VwdHNbdi5kYXRhVHlwZXNbMF1dKygiKiIhPT12LmRhdGFUeXBlc1swXT8iLCAiKyR0KyI7IHE9MC4wMSI6IiIpOnYuYWNjZXB0c1siKiJdKSx2LmhlYWRlcnMpVC5zZXRSZXF1ZXN0SGVhZGVyKGksdi5oZWFkZXJzW2ldKTtpZih2LmJlZm9yZVNlbmQmJighMT09PXYuYmVmb3JlU2VuZC5jYWxsKHksVCx2KXx8aCkpcmV0dXJuIFQuYWJvcnQoKTtpZih1PSJhYm9ydCIsYi5hZGQodi5jb21wbGV0ZSksVC5kb25lKHYuc3VjY2VzcyksVC5mYWlsKHYuZXJyb3IpLGM9X3QoV3Qsdix0LFQpKXtpZihULnJlYWR5U3RhdGU9MSxnJiZtLnRyaWdnZXIoImFqYXhTZW5kIixbVCx2XSksaClyZXR1cm4gVDt2LmFzeW5jJiYwPHYudGltZW91dCYmKGQ9Qy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7VC5hYm9ydCgidGltZW91dCIpfSx2LnRpbWVvdXQpKTt0cnl7aD0hMSxjLnNlbmQoYSxsKX1jYXRjaChlKXtpZihoKXRocm93IGU7bCgtMSxlKX19ZWxzZSBsKC0xLCJObyBUcmFuc3BvcnQiKTtmdW5jdGlvbiBsKGUsdCxuLHIpe3ZhciBpLG8sYSxzLHUsbD10O2h8fChoPSEwLGQmJkMuY2xlYXJUaW1lb3V0KGQpLGM9dm9pZCAwLHA9cnx8IiIsVC5yZWFkeVN0YXRlPTA8ZT80OjAsaT0yMDA8PWUmJmU8MzAwfHwzMDQ9PT1lLG4mJihzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYSxzPWUuY29udGVudHMsdT1lLmRhdGFUeXBlczt3aGlsZSgiKiI9PT11WzBdKXUuc2hpZnQoKSx2b2lkIDA9PT1yJiYocj1lLm1pbWVUeXBlfHx0LmdldFJlc3BvbnNlSGVhZGVyKCJDb250ZW50LVR5cGUiKSk7aWYocilmb3IoaSBpbiBzKWlmKHNbaV0mJnNbaV0udGVzdChyKSl7dS51bnNoaWZ0KGkpO2JyZWFrfWlmKHVbMF1pbiBuKW89dVswXTtlbHNle2ZvcihpIGluIG4pe2lmKCF1WzBdfHxlLmNvbnZlcnRlcnNbaSsiICIrdVswXV0pe289aTticmVha31hfHwoYT1pKX1vPW98fGF9aWYobylyZXR1cm4gbyE9PXVbMF0mJnUudW5zaGlmdChvKSxuW29dfSh2LFQsbikpLHM9ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPXt9LGM9ZS5kYXRhVHlwZXMuc2xpY2UoKTtpZihjWzFdKWZvcihhIGluIGUuY29udmVydGVycylsW2EudG9Mb3dlckNhc2UoKV09ZS5jb252ZXJ0ZXJzW2FdO289Yy5zaGlmdCgpO3doaWxlKG8paWYoZS5yZXNwb25zZUZpZWxkc1tvXSYmKG5bZS5yZXNwb25zZUZpZWxkc1tvXV09dCksIXUmJnImJmUuZGF0YUZpbHRlciYmKHQ9ZS5kYXRhRmlsdGVyKHQsZS5kYXRhVHlwZSkpLHU9byxvPWMuc2hpZnQoKSlpZigiKiI9PT1vKW89dTtlbHNlIGlmKCIqIiE9PXUmJnUhPT1vKXtpZighKGE9bFt1KyIgIitvXXx8bFsiKiAiK29dKSlmb3IoaSBpbiBsKWlmKChzPWkuc3BsaXQoIiAiKSlbMV09PT1vJiYoYT1sW3UrIiAiK3NbMF1dfHxsWyIqICIrc1swXV0pKXshMD09PWE/YT1sW2ldOiEwIT09bFtpXSYmKG89c1swXSxjLnVuc2hpZnQoc1sxXSkpO2JyZWFrfWlmKCEwIT09YSlpZihhJiZlWyJ0aHJvd3MiXSl0PWEodCk7ZWxzZSB0cnl7dD1hKHQpfWNhdGNoKGUpe3JldHVybntzdGF0ZToicGFyc2VyZXJyb3IiLGVycm9yOmE/ZToiTm8gY29udmVyc2lvbiBmcm9tICIrdSsiIHRvICIrb319fXJldHVybntzdGF0ZToic3VjY2VzcyIsZGF0YTp0fX0odixzLFQsaSksaT8odi5pZk1vZGlmaWVkJiYoKHU9VC5nZXRSZXNwb25zZUhlYWRlcigiTGFzdC1Nb2RpZmllZCIpKSYmKGsubGFzdE1vZGlmaWVkW2ZdPXUpLCh1PVQuZ2V0UmVzcG9uc2VIZWFkZXIoImV0YWciKSkmJihrLmV0YWdbZl09dSkpLDIwND09PWV8fCJIRUFEIj09PXYudHlwZT9sPSJub2NvbnRlbnQiOjMwND09PWU/bD0ibm90bW9kaWZpZWQiOihsPXMuc3RhdGUsbz1zLmRhdGEsaT0hKGE9cy5lcnJvcikpKTooYT1sLCFlJiZsfHwobD0iZXJyb3IiLGU8MCYmKGU9MCkpKSxULnN0YXR1cz1lLFQuc3RhdHVzVGV4dD0odHx8bCkrIiIsaT94LnJlc29sdmVXaXRoKHksW28sbCxUXSk6eC5yZWplY3RXaXRoKHksW1QsbCxhXSksVC5zdGF0dXNDb2RlKHcpLHc9dm9pZCAwLGcmJm0udHJpZ2dlcihpPyJhamF4U3VjY2VzcyI6ImFqYXhFcnJvciIsW1QsdixpP286YV0pLGIuZmlyZVdpdGgoeSxbVCxsXSksZyYmKG0udHJpZ2dlcigiYWpheENvbXBsZXRlIixbVCx2XSksLS1rLmFjdGl2ZXx8ay5ldmVudC50cmlnZ2VyKCJhamF4U3RvcCIpKSl9cmV0dXJuIFR9LGdldEpTT046ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBrLmdldChlLHQsbiwianNvbiIpfSxnZXRTY3JpcHQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gay5nZXQoZSx2b2lkIDAsdCwic2NyaXB0Iil9fSksay5lYWNoKFsiZ2V0IiwicG9zdCJdLGZ1bmN0aW9uKGUsaSl7a1tpXT1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gbSh0KSYmKHI9cnx8bixuPXQsdD12b2lkIDApLGsuYWpheChrLmV4dGVuZCh7dXJsOmUsdHlwZTppLGRhdGFUeXBlOnIsZGF0YTp0LHN1Y2Nlc3M6bn0say5pc1BsYWluT2JqZWN0KGUpJiZlKSl9fSksay5fZXZhbFVybD1mdW5jdGlvbihlLHQpe3JldHVybiBrLmFqYXgoe3VybDplLHR5cGU6IkdFVCIsZGF0YVR5cGU6InNjcmlwdCIsY2FjaGU6ITAsYXN5bmM6ITEsZ2xvYmFsOiExLGNvbnZlcnRlcnM6eyJ0ZXh0IHNjcmlwdCI6ZnVuY3Rpb24oKXt9fSxkYXRhRmlsdGVyOmZ1bmN0aW9uKGUpe2suZ2xvYmFsRXZhbChlLHQpfX0pfSxrLmZuLmV4dGVuZCh7d3JhcEFsbDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gdGhpc1swXSYmKG0oZSkmJihlPWUuY2FsbCh0aGlzWzBdKSksdD1rKGUsdGhpc1swXS5vd25lckRvY3VtZW50KS5lcSgwKS5jbG9uZSghMCksdGhpc1swXS5wYXJlbnROb2RlJiZ0Lmluc2VydEJlZm9yZSh0aGlzWzBdKSx0Lm1hcChmdW5jdGlvbigpe3ZhciBlPXRoaXM7d2hpbGUoZS5maXJzdEVsZW1lbnRDaGlsZCllPWUuZmlyc3RFbGVtZW50Q2hpbGQ7cmV0dXJuIGV9KS5hcHBlbmQodGhpcykpLHRoaXN9LHdyYXBJbm5lcjpmdW5jdGlvbihuKXtyZXR1cm4gbShuKT90aGlzLmVhY2goZnVuY3Rpb24oZSl7ayh0aGlzKS53cmFwSW5uZXIobi5jYWxsKHRoaXMsZSkpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9ayh0aGlzKSx0PWUuY29udGVudHMoKTt0Lmxlbmd0aD90LndyYXBBbGwobik6ZS5hcHBlbmQobil9KX0sd3JhcDpmdW5jdGlvbih0KXt2YXIgbj1tKHQpO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oZSl7ayh0aGlzKS53cmFwQWxsKG4/dC5jYWxsKHRoaXMsZSk6dCl9KX0sdW53cmFwOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnBhcmVudChlKS5ub3QoImJvZHkiKS5lYWNoKGZ1bmN0aW9uKCl7ayh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSksdGhpc319KSxrLmV4cHIucHNldWRvcy5oaWRkZW49ZnVuY3Rpb24oZSl7cmV0dXJuIWsuZXhwci5wc2V1ZG9zLnZpc2libGUoZSl9LGsuZXhwci5wc2V1ZG9zLnZpc2libGU9ZnVuY3Rpb24oZSl7cmV0dXJuISEoZS5vZmZzZXRXaWR0aHx8ZS5vZmZzZXRIZWlnaHR8fGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpfSxrLmFqYXhTZXR0aW5ncy54aHI9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG5ldyBDLlhNTEh0dHBSZXF1ZXN0fWNhdGNoKGUpe319O3ZhciBVdD17MDoyMDAsMTIyMzoyMDR9LFh0PWsuYWpheFNldHRpbmdzLnhocigpO3kuY29ycz0hIVh0JiYid2l0aENyZWRlbnRpYWxzImluIFh0LHkuYWpheD1YdD0hIVh0LGsuYWpheFRyYW5zcG9ydChmdW5jdGlvbihpKXt2YXIgbyxhO2lmKHkuY29yc3x8WHQmJiFpLmNyb3NzRG9tYWluKXJldHVybntzZW5kOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1pLnhocigpO2lmKHIub3BlbihpLnR5cGUsaS51cmwsaS5hc3luYyxpLnVzZXJuYW1lLGkucGFzc3dvcmQpLGkueGhyRmllbGRzKWZvcihuIGluIGkueGhyRmllbGRzKXJbbl09aS54aHJGaWVsZHNbbl07Zm9yKG4gaW4gaS5taW1lVHlwZSYmci5vdmVycmlkZU1pbWVUeXBlJiZyLm92ZXJyaWRlTWltZVR5cGUoaS5taW1lVHlwZSksaS5jcm9zc0RvbWFpbnx8ZVsiWC1SZXF1ZXN0ZWQtV2l0aCJdfHwoZVsiWC1SZXF1ZXN0ZWQtV2l0aCJdPSJYTUxIdHRwUmVxdWVzdCIpLGUpci5zZXRSZXF1ZXN0SGVhZGVyKG4sZVtuXSk7bz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXtvJiYobz1hPXIub25sb2FkPXIub25lcnJvcj1yLm9uYWJvcnQ9ci5vbnRpbWVvdXQ9ci5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCwiYWJvcnQiPT09ZT9yLmFib3J0KCk6ImVycm9yIj09PWU/Im51bWJlciIhPXR5cGVvZiByLnN0YXR1cz90KDAsImVycm9yIik6dChyLnN0YXR1cyxyLnN0YXR1c1RleHQpOnQoVXRbci5zdGF0dXNdfHxyLnN0YXR1cyxyLnN0YXR1c1RleHQsInRleHQiIT09KHIucmVzcG9uc2VUeXBlfHwidGV4dCIpfHwic3RyaW5nIiE9dHlwZW9mIHIucmVzcG9uc2VUZXh0P3tiaW5hcnk6ci5yZXNwb25zZX06e3RleHQ6ci5yZXNwb25zZVRleHR9LHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKX19LHIub25sb2FkPW8oKSxhPXIub25lcnJvcj1yLm9udGltZW91dD1vKCJlcnJvciIpLHZvaWQgMCE9PXIub25hYm9ydD9yLm9uYWJvcnQ9YTpyLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpezQ9PT1yLnJlYWR5U3RhdGUmJkMuc2V0VGltZW91dChmdW5jdGlvbigpe28mJmEoKX0pfSxvPW8oImFib3J0Iik7dHJ5e3Iuc2VuZChpLmhhc0NvbnRlbnQmJmkuZGF0YXx8bnVsbCl9Y2F0Y2goZSl7aWYobyl0aHJvdyBlfX0sYWJvcnQ6ZnVuY3Rpb24oKXtvJiZvKCl9fX0pLGsuYWpheFByZWZpbHRlcihmdW5jdGlvbihlKXtlLmNyb3NzRG9tYWluJiYoZS5jb250ZW50cy5zY3JpcHQ9ITEpfSksay5hamF4U2V0dXAoe2FjY2VwdHM6e3NjcmlwdDoidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHQifSxjb250ZW50czp7c2NyaXB0Oi9cYig/OmphdmF8ZWNtYSlzY3JpcHRcYi99LGNvbnZlcnRlcnM6eyJ0ZXh0IHNjcmlwdCI6ZnVuY3Rpb24oZSl7cmV0dXJuIGsuZ2xvYmFsRXZhbChlKSxlfX19KSxrLmFqYXhQcmVmaWx0ZXIoInNjcmlwdCIsZnVuY3Rpb24oZSl7dm9pZCAwPT09ZS5jYWNoZSYmKGUuY2FjaGU9ITEpLGUuY3Jvc3NEb21haW4mJihlLnR5cGU9IkdFVCIpfSksay5hamF4VHJhbnNwb3J0KCJzY3JpcHQiLGZ1bmN0aW9uKG4pe3ZhciByLGk7aWYobi5jcm9zc0RvbWFpbnx8bi5zY3JpcHRBdHRycylyZXR1cm57c2VuZDpmdW5jdGlvbihlLHQpe3I9aygiPHNjcmlwdD4iKS5hdHRyKG4uc2NyaXB0QXR0cnN8fHt9KS5wcm9wKHtjaGFyc2V0Om4uc2NyaXB0Q2hhcnNldCxzcmM6bi51cmx9KS5vbigibG9hZCBlcnJvciIsaT1mdW5jdGlvbihlKXtyLnJlbW92ZSgpLGk9bnVsbCxlJiZ0KCJlcnJvciI9PT1lLnR5cGU/NDA0OjIwMCxlLnR5cGUpfSksRS5oZWFkLmFwcGVuZENoaWxkKHJbMF0pfSxhYm9ydDpmdW5jdGlvbigpe2kmJmkoKX19fSk7dmFyIFZ0LEd0PVtdLFl0PS8oPSlcPyg/PSZ8JCl8XD9cPy87ay5hamF4U2V0dXAoe2pzb25wOiJjYWxsYmFjayIsanNvbnBDYWxsYmFjazpmdW5jdGlvbigpe3ZhciBlPUd0LnBvcCgpfHxrLmV4cGFuZG8rIl8iK2t0Kys7cmV0dXJuIHRoaXNbZV09ITAsZX19KSxrLmFqYXhQcmVmaWx0ZXIoImpzb24ganNvbnAiLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYT0hMSE9PWUuanNvbnAmJihZdC50ZXN0KGUudXJsKT8idXJsIjoic3RyaW5nIj09dHlwZW9mIGUuZGF0YSYmMD09PShlLmNvbnRlbnRUeXBlfHwiIikuaW5kZXhPZigiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIikmJll0LnRlc3QoZS5kYXRhKSYmImRhdGEiKTtpZihhfHwianNvbnAiPT09ZS5kYXRhVHlwZXNbMF0pcmV0dXJuIHI9ZS5qc29ucENhbGxiYWNrPW0oZS5qc29ucENhbGxiYWNrKT9lLmpzb25wQ2FsbGJhY2soKTplLmpzb25wQ2FsbGJhY2ssYT9lW2FdPWVbYV0ucmVwbGFjZShZdCwiJDEiK3IpOiExIT09ZS5qc29ucCYmKGUudXJsKz0oU3QudGVzdChlLnVybCk/IiYiOiI/IikrZS5qc29ucCsiPSIrciksZS5jb252ZXJ0ZXJzWyJzY3JpcHQganNvbiJdPWZ1bmN0aW9uKCl7cmV0dXJuIG98fGsuZXJyb3IocisiIHdhcyBub3QgY2FsbGVkIiksb1swXX0sZS5kYXRhVHlwZXNbMF09Impzb24iLGk9Q1tyXSxDW3JdPWZ1bmN0aW9uKCl7bz1hcmd1bWVudHN9LG4uYWx3YXlzKGZ1bmN0aW9uKCl7dm9pZCAwPT09aT9rKEMpLnJlbW92ZVByb3Aocik6Q1tyXT1pLGVbcl0mJihlLmpzb25wQ2FsbGJhY2s9dC5qc29ucENhbGxiYWNrLEd0LnB1c2gocikpLG8mJm0oaSkmJmkob1swXSksbz1pPXZvaWQgMH0pLCJzY3JpcHQifSkseS5jcmVhdGVIVE1MRG9jdW1lbnQ9KChWdD1FLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgiIikuYm9keSkuaW5uZXJIVE1MPSI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPiIsMj09PVZ0LmNoaWxkTm9kZXMubGVuZ3RoKSxrLnBhcnNlSFRNTD1mdW5jdGlvbihlLHQsbil7cmV0dXJuInN0cmluZyIhPXR5cGVvZiBlP1tdOigiYm9vbGVhbiI9PXR5cGVvZiB0JiYobj10LHQ9ITEpLHR8fCh5LmNyZWF0ZUhUTUxEb2N1bWVudD8oKHI9KHQ9RS5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIiIpKS5jcmVhdGVFbGVtZW50KCJiYXNlIikpLmhyZWY9RS5sb2NhdGlvbi5ocmVmLHQuaGVhZC5hcHBlbmRDaGlsZChyKSk6dD1FKSxvPSFuJiZbXSwoaT1ELmV4ZWMoZSkpP1t0LmNyZWF0ZUVsZW1lbnQoaVsxXSldOihpPXdlKFtlXSx0LG8pLG8mJm8ubGVuZ3RoJiZrKG8pLnJlbW92ZSgpLGsubWVyZ2UoW10saS5jaGlsZE5vZGVzKSkpO3ZhciByLGksb30say5mbi5sb2FkPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYT10aGlzLHM9ZS5pbmRleE9mKCIgIik7cmV0dXJuLTE8cyYmKHI9bXQoZS5zbGljZShzKSksZT1lLnNsaWNlKDAscykpLG0odCk/KG49dCx0PXZvaWQgMCk6dCYmIm9iamVjdCI9PXR5cGVvZiB0JiYoaT0iUE9TVCIpLDA8YS5sZW5ndGgmJmsuYWpheCh7dXJsOmUsdHlwZTppfHwiR0VUIixkYXRhVHlwZToiaHRtbCIsZGF0YTp0fSkuZG9uZShmdW5jdGlvbihlKXtvPWFyZ3VtZW50cyxhLmh0bWwocj9rKCI8ZGl2PiIpLmFwcGVuZChrLnBhcnNlSFRNTChlKSkuZmluZChyKTplKX0pLmFsd2F5cyhuJiZmdW5jdGlvbihlLHQpe2EuZWFjaChmdW5jdGlvbigpe24uYXBwbHkodGhpcyxvfHxbZS5yZXNwb25zZVRleHQsdCxlXSl9KX0pLHRoaXN9LGsuZWFjaChbImFqYXhTdGFydCIsImFqYXhTdG9wIiwiYWpheENvbXBsZXRlIiwiYWpheEVycm9yIiwiYWpheFN1Y2Nlc3MiLCJhamF4U2VuZCJdLGZ1bmN0aW9uKGUsdCl7ay5mblt0XT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5vbih0LGUpfX0pLGsuZXhwci5wc2V1ZG9zLmFuaW1hdGVkPWZ1bmN0aW9uKHQpe3JldHVybiBrLmdyZXAoay50aW1lcnMsZnVuY3Rpb24oZSl7cmV0dXJuIHQ9PT1lLmVsZW19KS5sZW5ndGh9LGsub2Zmc2V0PXtzZXRPZmZzZXQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsPWsuY3NzKGUsInBvc2l0aW9uIiksYz1rKGUpLGY9e307InN0YXRpYyI9PT1sJiYoZS5zdHlsZS5wb3NpdGlvbj0icmVsYXRpdmUiKSxzPWMub2Zmc2V0KCksbz1rLmNzcyhlLCJ0b3AiKSx1PWsuY3NzKGUsImxlZnQiKSwoImFic29sdXRlIj09PWx8fCJmaXhlZCI9PT1sKSYmLTE8KG8rdSkuaW5kZXhPZigiYXV0byIpPyhhPShyPWMucG9zaXRpb24oKSkudG9wLGk9ci5sZWZ0KTooYT1wYXJzZUZsb2F0KG8pfHwwLGk9cGFyc2VGbG9hdCh1KXx8MCksbSh0KSYmKHQ9dC5jYWxsKGUsbixrLmV4dGVuZCh7fSxzKSkpLG51bGwhPXQudG9wJiYoZi50b3A9dC50b3Atcy50b3ArYSksbnVsbCE9dC5sZWZ0JiYoZi5sZWZ0PXQubGVmdC1zLmxlZnQraSksInVzaW5nImluIHQ/dC51c2luZy5jYWxsKGUsZik6Yy5jc3MoZil9fSxrLmZuLmV4dGVuZCh7b2Zmc2V0OmZ1bmN0aW9uKHQpe2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PXQ/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oZSl7ay5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsdCxlKX0pO3ZhciBlLG4scj10aGlzWzBdO3JldHVybiByP3IuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGg/KGU9ci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPXIub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldyx7dG9wOmUudG9wK24ucGFnZVlPZmZzZXQsbGVmdDplLmxlZnQrbi5wYWdlWE9mZnNldH0pOnt0b3A6MCxsZWZ0OjB9OnZvaWQgMH0scG9zaXRpb246ZnVuY3Rpb24oKXtpZih0aGlzWzBdKXt2YXIgZSx0LG4scj10aGlzWzBdLGk9e3RvcDowLGxlZnQ6MH07aWYoImZpeGVkIj09PWsuY3NzKHIsInBvc2l0aW9uIikpdD1yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2Vsc2V7dD10aGlzLm9mZnNldCgpLG49ci5vd25lckRvY3VtZW50LGU9ci5vZmZzZXRQYXJlbnR8fG4uZG9jdW1lbnRFbGVtZW50O3doaWxlKGUmJihlPT09bi5ib2R5fHxlPT09bi5kb2N1bWVudEVsZW1lbnQpJiYic3RhdGljIj09PWsuY3NzKGUsInBvc2l0aW9uIikpZT1lLnBhcmVudE5vZGU7ZSYmZSE9PXImJjE9PT1lLm5vZGVUeXBlJiYoKGk9ayhlKS5vZmZzZXQoKSkudG9wKz1rLmNzcyhlLCJib3JkZXJUb3BXaWR0aCIsITApLGkubGVmdCs9ay5jc3MoZSwiYm9yZGVyTGVmdFdpZHRoIiwhMCkpfXJldHVybnt0b3A6dC50b3AtaS50b3Atay5jc3MociwibWFyZ2luVG9wIiwhMCksbGVmdDp0LmxlZnQtaS5sZWZ0LWsuY3NzKHIsIm1hcmdpbkxlZnQiLCEwKX19fSxvZmZzZXRQYXJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9mZnNldFBhcmVudDt3aGlsZShlJiYic3RhdGljIj09PWsuY3NzKGUsInBvc2l0aW9uIikpZT1lLm9mZnNldFBhcmVudDtyZXR1cm4gZXx8aWV9KX19KSxrLmVhY2goe3Njcm9sbExlZnQ6InBhZ2VYT2Zmc2V0IixzY3JvbGxUb3A6InBhZ2VZT2Zmc2V0In0sZnVuY3Rpb24odCxpKXt2YXIgbz0icGFnZVlPZmZzZXQiPT09aTtrLmZuW3RdPWZ1bmN0aW9uKGUpe3JldHVybiBfKHRoaXMsZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKHgoZSk/cj1lOjk9PT1lLm5vZGVUeXBlJiYocj1lLmRlZmF1bHRWaWV3KSx2b2lkIDA9PT1uKXJldHVybiByP3JbaV06ZVt0XTtyP3Iuc2Nyb2xsVG8obz9yLnBhZ2VYT2Zmc2V0Om4sbz9uOnIucGFnZVlPZmZzZXQpOmVbdF09bn0sdCxlLGFyZ3VtZW50cy5sZW5ndGgpfX0pLGsuZWFjaChbInRvcCIsImxlZnQiXSxmdW5jdGlvbihlLG4pe2suY3NzSG9va3Nbbl09emUoeS5waXhlbFBvc2l0aW9uLGZ1bmN0aW9uKGUsdCl7aWYodClyZXR1cm4gdD1fZShlLG4pLCRlLnRlc3QodCk/ayhlKS5wb3NpdGlvbigpW25dKyJweCI6dH0pfSksay5lYWNoKHtIZWlnaHQ6ImhlaWdodCIsV2lkdGg6IndpZHRoIn0sZnVuY3Rpb24oYSxzKXtrLmVhY2goe3BhZGRpbmc6ImlubmVyIithLGNvbnRlbnQ6cywiIjoib3V0ZXIiK2F9LGZ1bmN0aW9uKHIsbyl7ay5mbltvXT1mdW5jdGlvbihlLHQpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGgmJihyfHwiYm9vbGVhbiIhPXR5cGVvZiBlKSxpPXJ8fCghMD09PWV8fCEwPT09dD8ibWFyZ2luIjoiYm9yZGVyIik7cmV0dXJuIF8odGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHI7cmV0dXJuIHgoZSk/MD09PW8uaW5kZXhPZigib3V0ZXIiKT9lWyJpbm5lciIrYV06ZS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbImNsaWVudCIrYV06OT09PWUubm9kZVR5cGU/KHI9ZS5kb2N1bWVudEVsZW1lbnQsTWF0aC5tYXgoZS5ib2R5WyJzY3JvbGwiK2FdLHJbInNjcm9sbCIrYV0sZS5ib2R5WyJvZmZzZXQiK2FdLHJbIm9mZnNldCIrYV0sclsiY2xpZW50IithXSkpOnZvaWQgMD09PW4/ay5jc3MoZSx0LGkpOmsuc3R5bGUoZSx0LG4saSl9LHMsbj9lOnZvaWQgMCxuKX19KX0pLGsuZWFjaCgiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudSIuc3BsaXQoIiAiKSxmdW5jdGlvbihlLG4pe2suZm5bbl09ZnVuY3Rpb24oZSx0KXtyZXR1cm4gMDxhcmd1bWVudHMubGVuZ3RoP3RoaXMub24obixudWxsLGUsdCk6dGhpcy50cmlnZ2VyKG4pfX0pLGsuZm4uZXh0ZW5kKHtob3ZlcjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm1vdXNlZW50ZXIoZSkubW91c2VsZWF2ZSh0fHxlKX19KSxrLmZuLmV4dGVuZCh7YmluZDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMub24oZSxudWxsLHQsbil9LHVuYmluZDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm9mZihlLG51bGwsdCl9LGRlbGVnYXRlOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLm9uKHQsZSxuLHIpfSx1bmRlbGVnYXRlOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gMT09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5vZmYoZSwiKioiKTp0aGlzLm9mZih0LGV8fCIqKiIsbil9fSksay5wcm94eT1mdW5jdGlvbihlLHQpe3ZhciBuLHIsaTtpZigic3RyaW5nIj09dHlwZW9mIHQmJihuPWVbdF0sdD1lLGU9biksbShlKSlyZXR1cm4gcj1zLmNhbGwoYXJndW1lbnRzLDIpLChpPWZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkodHx8dGhpcyxyLmNvbmNhdChzLmNhbGwoYXJndW1lbnRzKSkpfSkuZ3VpZD1lLmd1aWQ9ZS5ndWlkfHxrLmd1aWQrKyxpfSxrLmhvbGRSZWFkeT1mdW5jdGlvbihlKXtlP2sucmVhZHlXYWl0Kys6ay5yZWFkeSghMCl9LGsuaXNBcnJheT1BcnJheS5pc0FycmF5LGsucGFyc2VKU09OPUpTT04ucGFyc2Usay5ub2RlTmFtZT1BLGsuaXNGdW5jdGlvbj1tLGsuaXNXaW5kb3c9eCxrLmNhbWVsQ2FzZT1WLGsudHlwZT13LGsubm93PURhdGUubm93LGsuaXNOdW1lcmljPWZ1bmN0aW9uKGUpe3ZhciB0PWsudHlwZShlKTtyZXR1cm4oIm51bWJlciI9PT10fHwic3RyaW5nIj09PXQpJiYhaXNOYU4oZS1wYXJzZUZsb2F0KGUpKX0sImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCYmZGVmaW5lKCJqcXVlcnkiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIGt9KTt2YXIgUXQ9Qy5qUXVlcnksSnQ9Qy4kO3JldHVybiBrLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIEMuJD09PWsmJihDLiQ9SnQpLGUmJkMualF1ZXJ5PT09ayYmKEMualF1ZXJ5PVF0KSxrfSxlfHwoQy5qUXVlcnk9Qy4kPWspLGt9KTsNCg0KLyohDQogKiBqUXVlcnkgVmFsaWRhdGlvbiBQbHVnaW4gdjEuMTcuMA0KICoNCiAqIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvDQogKg0KICogQ29weXJpZ2h0IChjKSAyMDE3IErDtnJuIFphZWZmZXJlcg0KICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlDQogKi8NCihmdW5jdGlvbihuKXt0eXBlb2YgZGVmaW5lPT0iZnVuY3Rpb24iJiZkZWZpbmUuYW1kP2RlZmluZShbImpxdWVyeSJdLG4pOnR5cGVvZiBtb2R1bGU9PSJvYmplY3QiJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1uKHJlcXVpcmUoImpxdWVyeSIpKTpuKGpRdWVyeSl9KShmdW5jdGlvbihuKXtuLmV4dGVuZChuLmZuLHt2YWxpZGF0ZTpmdW5jdGlvbih0KXtpZighdGhpcy5sZW5ndGgpe3QmJnQuZGVidWcmJndpbmRvdy5jb25zb2xlJiZjb25zb2xlLndhcm4oIk5vdGhpbmcgc2VsZWN0ZWQsIGNhbid0IHZhbGlkYXRlLCByZXR1cm5pbmcgbm90aGluZy4iKTtyZXR1cm59dmFyIGk9bi5kYXRhKHRoaXNbMF0sInZhbGlkYXRvciIpO2lmKGkpcmV0dXJuIGk7aWYodGhpcy5hdHRyKCJub3ZhbGlkYXRlIiwibm92YWxpZGF0ZSIpLGk9bmV3IG4udmFsaWRhdG9yKHQsdGhpc1swXSksbi5kYXRhKHRoaXNbMF0sInZhbGlkYXRvciIsaSksaS5zZXR0aW5ncy5vbnN1Ym1pdCl7dGhpcy5vbigiY2xpY2sudmFsaWRhdGUiLCI6c3VibWl0IixmdW5jdGlvbih0KXtpLnN1Ym1pdEJ1dHRvbj10LmN1cnJlbnRUYXJnZXQ7bih0aGlzKS5oYXNDbGFzcygiY2FuY2VsIikmJihpLmNhbmNlbFN1Ym1pdD0hMCk7bih0aGlzKS5hdHRyKCJmb3Jtbm92YWxpZGF0ZSIpIT09dW5kZWZpbmVkJiYoaS5jYW5jZWxTdWJtaXQ9ITApfSk7dGhpcy5vbigic3VibWl0LnZhbGlkYXRlIixmdW5jdGlvbih0KXtmdW5jdGlvbiByKCl7dmFyIHIsdTtyZXR1cm4oaS5zdWJtaXRCdXR0b24mJihpLnNldHRpbmdzLnN1Ym1pdEhhbmRsZXJ8fGkuZm9ybVN1Ym1pdHRlZCkmJihyPW4oIjxpbnB1dCB0eXBlPSdoaWRkZW4nLz4iKS5hdHRyKCJuYW1lIixpLnN1Ym1pdEJ1dHRvbi5uYW1lKS52YWwobihpLnN1Ym1pdEJ1dHRvbikudmFsKCkpLmFwcGVuZFRvKGkuY3VycmVudEZvcm0pKSxpLnNldHRpbmdzLnN1Ym1pdEhhbmRsZXIpPyh1PWkuc2V0dGluZ3Muc3VibWl0SGFuZGxlci5jYWxsKGksaS5jdXJyZW50Rm9ybSx0KSxyJiZyLnJlbW92ZSgpLHUhPT11bmRlZmluZWQpP3U6ITE6ITB9cmV0dXJuKGkuc2V0dGluZ3MuZGVidWcmJnQucHJldmVudERlZmF1bHQoKSxpLmNhbmNlbFN1Ym1pdCk/KGkuY2FuY2VsU3VibWl0PSExLHIoKSk6aS5mb3JtKCk/aS5wZW5kaW5nUmVxdWVzdD8oaS5mb3JtU3VibWl0dGVkPSEwLCExKTpyKCk6KGkuZm9jdXNJbnZhbGlkKCksITEpfSl9cmV0dXJuIGl9LHZhbGlkOmZ1bmN0aW9uKCl7dmFyIHQsaSxyO3JldHVybiBuKHRoaXNbMF0pLmlzKCJmb3JtIik/dD10aGlzLnZhbGlkYXRlKCkuZm9ybSgpOihyPVtdLHQ9ITAsaT1uKHRoaXNbMF0uZm9ybSkudmFsaWRhdGUoKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt0PWkuZWxlbWVudCh0aGlzKSYmdDt0fHwocj1yLmNvbmNhdChpLmVycm9yTGlzdCkpfSksaS5lcnJvckxpc3Q9ciksdH0scnVsZXM6ZnVuY3Rpb24odCxpKXt2YXIgcj10aGlzWzBdLGUscyxmLHUsbyxoO2lmKHIhPW51bGwmJighci5mb3JtJiZyLmhhc0F0dHJpYnV0ZSgiY29udGVudGVkaXRhYmxlIikmJihyLmZvcm09dGhpcy5jbG9zZXN0KCJmb3JtIilbMF0sci5uYW1lPXRoaXMuYXR0cigibmFtZSIpKSxyLmZvcm0hPW51bGwpKXtpZih0KXtlPW4uZGF0YShyLmZvcm0sInZhbGlkYXRvciIpLnNldHRpbmdzO3M9ZS5ydWxlcztmPW4udmFsaWRhdG9yLnN0YXRpY1J1bGVzKHIpO3N3aXRjaCh0KXtjYXNlImFkZCI6bi5leHRlbmQoZixuLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKGkpKTtkZWxldGUgZi5tZXNzYWdlcztzW3IubmFtZV09ZjtpLm1lc3NhZ2VzJiYoZS5tZXNzYWdlc1tyLm5hbWVdPW4uZXh0ZW5kKGUubWVzc2FnZXNbci5uYW1lXSxpLm1lc3NhZ2VzKSk7YnJlYWs7Y2FzZSJyZW1vdmUiOnJldHVybiBpPyhoPXt9LG4uZWFjaChpLnNwbGl0KC9ccy8pLGZ1bmN0aW9uKG4sdCl7aFt0XT1mW3RdO2RlbGV0ZSBmW3RdfSksaCk6KGRlbGV0ZSBzW3IubmFtZV0sZil9fXJldHVybiB1PW4udmFsaWRhdG9yLm5vcm1hbGl6ZVJ1bGVzKG4uZXh0ZW5kKHt9LG4udmFsaWRhdG9yLmNsYXNzUnVsZXMociksbi52YWxpZGF0b3IuYXR0cmlidXRlUnVsZXMociksbi52YWxpZGF0b3IuZGF0YVJ1bGVzKHIpLG4udmFsaWRhdG9yLnN0YXRpY1J1bGVzKHIpKSxyKSx1LnJlcXVpcmVkJiYobz11LnJlcXVpcmVkLGRlbGV0ZSB1LnJlcXVpcmVkLHU9bi5leHRlbmQoe3JlcXVpcmVkOm99LHUpKSx1LnJlbW90ZSYmKG89dS5yZW1vdGUsZGVsZXRlIHUucmVtb3RlLHU9bi5leHRlbmQodSx7cmVtb3RlOm99KSksdX19fSk7bi5leHRlbmQobi5leHByLnBzZXVkb3N8fG4uZXhwclsiOiJdLHtibGFuazpmdW5jdGlvbih0KXtyZXR1cm4hbi50cmltKCIiK24odCkudmFsKCkpfSxmaWxsZWQ6ZnVuY3Rpb24odCl7dmFyIGk9bih0KS52YWwoKTtyZXR1cm4gaSE9PW51bGwmJiEhbi50cmltKCIiK2kpfSx1bmNoZWNrZWQ6ZnVuY3Rpb24odCl7cmV0dXJuIW4odCkucHJvcCgiY2hlY2tlZCIpfX0pO24udmFsaWRhdG9yPWZ1bmN0aW9uKHQsaSl7dGhpcy5zZXR0aW5ncz1uLmV4dGVuZCghMCx7fSxuLnZhbGlkYXRvci5kZWZhdWx0cyx0KTt0aGlzLmN1cnJlbnRGb3JtPWk7dGhpcy5pbml0KCl9O24udmFsaWRhdG9yLmZvcm1hdD1mdW5jdGlvbih0LGkpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPT09MT9mdW5jdGlvbigpe3ZhciBpPW4ubWFrZUFycmF5KGFyZ3VtZW50cyk7cmV0dXJuIGkudW5zaGlmdCh0KSxuLnZhbGlkYXRvci5mb3JtYXQuYXBwbHkodGhpcyxpKX06aT09PXVuZGVmaW5lZD90Oihhcmd1bWVudHMubGVuZ3RoPjImJmkuY29uc3RydWN0b3IhPT1BcnJheSYmKGk9bi5tYWtlQXJyYXkoYXJndW1lbnRzKS5zbGljZSgxKSksaS5jb25zdHJ1Y3RvciE9PUFycmF5JiYoaT1baV0pLG4uZWFjaChpLGZ1bmN0aW9uKG4saSl7dD10LnJlcGxhY2UobmV3IFJlZ0V4cCgiXFx7IituKyJcXH0iLCJnIiksZnVuY3Rpb24oKXtyZXR1cm4gaX0pfSksdCl9O24uZXh0ZW5kKG4udmFsaWRhdG9yLHtkZWZhdWx0czp7bWVzc2FnZXM6e30sZ3JvdXBzOnt9LHJ1bGVzOnt9LGVycm9yQ2xhc3M6ImVycm9yIixwZW5kaW5nQ2xhc3M6InBlbmRpbmciLHZhbGlkQ2xhc3M6InZhbGlkIixlcnJvckVsZW1lbnQ6ImxhYmVsIixmb2N1c0NsZWFudXA6ITEsZm9jdXNJbnZhbGlkOiEwLGVycm9yQ29udGFpbmVyOm4oW10pLGVycm9yTGFiZWxDb250YWluZXI6bihbXSksb25zdWJtaXQ6ITAsaWdub3JlOiI6aGlkZGVuIixpZ25vcmVUaXRsZTohMSxvbmZvY3VzaW46ZnVuY3Rpb24obil7dGhpcy5sYXN0QWN0aXZlPW47dGhpcy5zZXR0aW5ncy5mb2N1c0NsZWFudXAmJih0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0JiZ0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0LmNhbGwodGhpcyxuLHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcyx0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MpLHRoaXMuaGlkZVRoZXNlKHRoaXMuZXJyb3JzRm9yKG4pKSl9LG9uZm9jdXNvdXQ6ZnVuY3Rpb24obil7IXRoaXMuY2hlY2thYmxlKG4pJiYobi5uYW1lIGluIHRoaXMuc3VibWl0dGVkfHwhdGhpcy5vcHRpb25hbChuKSkmJnRoaXMuZWxlbWVudChuKX0sb25rZXl1cDpmdW5jdGlvbih0LGkpeyhpLndoaWNoIT09OXx8dGhpcy5lbGVtZW50VmFsdWUodCkhPT0iIikmJm4uaW5BcnJheShpLmtleUNvZGUsWzE2LDE3LDE4LDIwLDM1LDM2LDM3LDM4LDM5LDQwLDQ1LDE0NCwyMjVdKT09PS0xJiYodC5uYW1lIGluIHRoaXMuc3VibWl0dGVkfHx0Lm5hbWUgaW4gdGhpcy5pbnZhbGlkKSYmdGhpcy5lbGVtZW50KHQpfSxvbmNsaWNrOmZ1bmN0aW9uKG4pe24ubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZD90aGlzLmVsZW1lbnQobik6bi5wYXJlbnROb2RlLm5hbWUgaW4gdGhpcy5zdWJtaXR0ZWQmJnRoaXMuZWxlbWVudChuLnBhcmVudE5vZGUpfSxoaWdobGlnaHQ6ZnVuY3Rpb24odCxpLHIpe3QudHlwZT09PSJyYWRpbyI/dGhpcy5maW5kQnlOYW1lKHQubmFtZSkuYWRkQ2xhc3MoaSkucmVtb3ZlQ2xhc3Mocik6bih0KS5hZGRDbGFzcyhpKS5yZW1vdmVDbGFzcyhyKX0sdW5oaWdobGlnaHQ6ZnVuY3Rpb24odCxpLHIpe3QudHlwZT09PSJyYWRpbyI/dGhpcy5maW5kQnlOYW1lKHQubmFtZSkucmVtb3ZlQ2xhc3MoaSkuYWRkQ2xhc3Mocik6bih0KS5yZW1vdmVDbGFzcyhpKS5hZGRDbGFzcyhyKX19LHNldERlZmF1bHRzOmZ1bmN0aW9uKHQpe24uZXh0ZW5kKG4udmFsaWRhdG9yLmRlZmF1bHRzLHQpfSxtZXNzYWdlczp7cmVxdWlyZWQ6IlRoaXMgZmllbGQgaXMgcmVxdWlyZWQuIixyZW1vdGU6IlBsZWFzZSBmaXggdGhpcyBmaWVsZC4iLGVtYWlsOiJQbGVhc2UgZW50ZXIgYSB2YWxpZCBlbWFpbCBhZGRyZXNzLiIsdXJsOiJQbGVhc2UgZW50ZXIgYSB2YWxpZCBVUkwuIixkYXRlOiJQbGVhc2UgZW50ZXIgYSB2YWxpZCBkYXRlLiIsZGF0ZUlTTzoiUGxlYXNlIGVudGVyIGEgdmFsaWQgZGF0ZSAoSVNPKS4iLG51bWJlcjoiUGxlYXNlIGVudGVyIGEgdmFsaWQgbnVtYmVyLiIsZGlnaXRzOiJQbGVhc2UgZW50ZXIgb25seSBkaWdpdHMuIixlcXVhbFRvOiJQbGVhc2UgZW50ZXIgdGhlIHNhbWUgdmFsdWUgYWdhaW4uIixtYXhsZW5ndGg6bi52YWxpZGF0b3IuZm9ybWF0KCJQbGVhc2UgZW50ZXIgbm8gbW9yZSB0aGFuIHswfSBjaGFyYWN0ZXJzLiIpLG1pbmxlbmd0aDpuLnZhbGlkYXRvci5mb3JtYXQoIlBsZWFzZSBlbnRlciBhdCBsZWFzdCB7MH0gY2hhcmFjdGVycy4iKSxyYW5nZWxlbmd0aDpuLnZhbGlkYXRvci5mb3JtYXQoIlBsZWFzZSBlbnRlciBhIHZhbHVlIGJldHdlZW4gezB9IGFuZCB7MX0gY2hhcmFjdGVycyBsb25nLiIpLHJhbmdlOm4udmFsaWRhdG9yLmZvcm1hdCgiUGxlYXNlIGVudGVyIGEgdmFsdWUgYmV0d2VlbiB7MH0gYW5kIHsxfS4iKSxtYXg6bi52YWxpZGF0b3IuZm9ybWF0KCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gezB9LiIpLG1pbjpuLnZhbGlkYXRvci5mb3JtYXQoIlBsZWFzZSBlbnRlciBhIHZhbHVlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB7MH0uIiksc3RlcDpuLnZhbGlkYXRvci5mb3JtYXQoIlBsZWFzZSBlbnRlciBhIG11bHRpcGxlIG9mIHswfS4iKX0sYXV0b0NyZWF0ZVJhbmdlczohMSxwcm90b3R5cGU6e2luaXQ6ZnVuY3Rpb24oKXtmdW5jdGlvbiBpKHQpeyF0aGlzLmZvcm0mJnRoaXMuaGFzQXR0cmlidXRlKCJjb250ZW50ZWRpdGFibGUiKSYmKHRoaXMuZm9ybT1uKHRoaXMpLmNsb3Nlc3QoImZvcm0iKVswXSx0aGlzLm5hbWU9bih0aGlzKS5hdHRyKCJuYW1lIikpO3ZhciByPW4uZGF0YSh0aGlzLmZvcm0sInZhbGlkYXRvciIpLHU9Im9uIit0LnR5cGUucmVwbGFjZSgvXnZhbGlkYXRlLywiIiksaT1yLnNldHRpbmdzO2lbdV0mJiFuKHRoaXMpLmlzKGkuaWdub3JlKSYmaVt1XS5jYWxsKHIsdGhpcyx0KX10aGlzLmxhYmVsQ29udGFpbmVyPW4odGhpcy5zZXR0aW5ncy5lcnJvckxhYmVsQ29udGFpbmVyKTt0aGlzLmVycm9yQ29udGV4dD10aGlzLmxhYmVsQ29udGFpbmVyLmxlbmd0aCYmdGhpcy5sYWJlbENvbnRhaW5lcnx8bih0aGlzLmN1cnJlbnRGb3JtKTt0aGlzLmNvbnRhaW5lcnM9bih0aGlzLnNldHRpbmdzLmVycm9yQ29udGFpbmVyKS5hZGQodGhpcy5zZXR0aW5ncy5lcnJvckxhYmVsQ29udGFpbmVyKTt0aGlzLnN1Ym1pdHRlZD17fTt0aGlzLnZhbHVlQ2FjaGU9e307dGhpcy5wZW5kaW5nUmVxdWVzdD0wO3RoaXMucGVuZGluZz17fTt0aGlzLmludmFsaWQ9e307dGhpcy5yZXNldCgpO3ZhciByPXRoaXMuZ3JvdXBzPXt9LHQ7bi5lYWNoKHRoaXMuc2V0dGluZ3MuZ3JvdXBzLGZ1bmN0aW9uKHQsaSl7dHlwZW9mIGk9PSJzdHJpbmciJiYoaT1pLnNwbGl0KC9ccy8pKTtuLmVhY2goaSxmdW5jdGlvbihuLGkpe3JbaV09dH0pfSk7dD10aGlzLnNldHRpbmdzLnJ1bGVzO24uZWFjaCh0LGZ1bmN0aW9uKGkscil7dFtpXT1uLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKHIpfSk7bih0aGlzLmN1cnJlbnRGb3JtKS5vbigiZm9jdXNpbi52YWxpZGF0ZSBmb2N1c291dC52YWxpZGF0ZSBrZXl1cC52YWxpZGF0ZSIsIjp0ZXh0LCBbdHlwZT0ncGFzc3dvcmQnXSwgW3R5cGU9J2ZpbGUnXSwgc2VsZWN0LCB0ZXh0YXJlYSwgW3R5cGU9J251bWJlciddLCBbdHlwZT0nc2VhcmNoJ10sIFt0eXBlPSd0ZWwnXSwgW3R5cGU9J3VybCddLCBbdHlwZT0nZW1haWwnXSwgW3R5cGU9J2RhdGV0aW1lJ10sIFt0eXBlPSdkYXRlJ10sIFt0eXBlPSdtb250aCddLCBbdHlwZT0nd2VlayddLCBbdHlwZT0ndGltZSddLCBbdHlwZT0nZGF0ZXRpbWUtbG9jYWwnXSwgW3R5cGU9J3JhbmdlJ10sIFt0eXBlPSdjb2xvciddLCBbdHlwZT0ncmFkaW8nXSwgW3R5cGU9J2NoZWNrYm94J10sIFtjb250ZW50ZWRpdGFibGVdLCBbdHlwZT0nYnV0dG9uJ10iLGkpLm9uKCJjbGljay52YWxpZGF0ZSIsInNlbGVjdCwgb3B0aW9uLCBbdHlwZT0ncmFkaW8nXSwgW3R5cGU9J2NoZWNrYm94J10iLGkpO2lmKHRoaXMuc2V0dGluZ3MuaW52YWxpZEhhbmRsZXIpbih0aGlzLmN1cnJlbnRGb3JtKS5vbigiaW52YWxpZC1mb3JtLnZhbGlkYXRlIix0aGlzLnNldHRpbmdzLmludmFsaWRIYW5kbGVyKX0sZm9ybTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNoZWNrRm9ybSgpLG4uZXh0ZW5kKHRoaXMuc3VibWl0dGVkLHRoaXMuZXJyb3JNYXApLHRoaXMuaW52YWxpZD1uLmV4dGVuZCh7fSx0aGlzLmVycm9yTWFwKSx0aGlzLnZhbGlkKCl8fG4odGhpcy5jdXJyZW50Rm9ybSkudHJpZ2dlckhhbmRsZXIoImludmFsaWQtZm9ybSIsW3RoaXNdKSx0aGlzLnNob3dFcnJvcnMoKSx0aGlzLnZhbGlkKCl9LGNoZWNrRm9ybTpmdW5jdGlvbigpe3RoaXMucHJlcGFyZUZvcm0oKTtmb3IodmFyIG49MCx0PXRoaXMuY3VycmVudEVsZW1lbnRzPXRoaXMuZWxlbWVudHMoKTt0W25dO24rKyl0aGlzLmNoZWNrKHRbbl0pO3JldHVybiB0aGlzLnZhbGlkKCl9LGVsZW1lbnQ6ZnVuY3Rpb24odCl7dmFyIGk9dGhpcy5jbGVhbih0KSxyPXRoaXMudmFsaWRhdGlvblRhcmdldEZvcihpKSx1PXRoaXMsZj0hMCxlLG87cmV0dXJuIHI9PT11bmRlZmluZWQ/ZGVsZXRlIHRoaXMuaW52YWxpZFtpLm5hbWVdOih0aGlzLnByZXBhcmVFbGVtZW50KHIpLHRoaXMuY3VycmVudEVsZW1lbnRzPW4ociksbz10aGlzLmdyb3Vwc1tyLm5hbWVdLG8mJm4uZWFjaCh0aGlzLmdyb3VwcyxmdW5jdGlvbihuLHQpe3Q9PT1vJiZuIT09ci5uYW1lJiYoaT11LnZhbGlkYXRpb25UYXJnZXRGb3IodS5jbGVhbih1LmZpbmRCeU5hbWUobikpKSxpJiZpLm5hbWUgaW4gdS5pbnZhbGlkJiYodS5jdXJyZW50RWxlbWVudHMucHVzaChpKSxmPXUuY2hlY2soaSkmJmYpKX0pLGU9dGhpcy5jaGVjayhyKSE9PSExLGY9ZiYmZSx0aGlzLmludmFsaWRbci5uYW1lXT1lPyExOiEwLHRoaXMubnVtYmVyT2ZJbnZhbGlkcygpfHwodGhpcy50b0hpZGU9dGhpcy50b0hpZGUuYWRkKHRoaXMuY29udGFpbmVycykpLHRoaXMuc2hvd0Vycm9ycygpLG4odCkuYXR0cigiYXJpYS1pbnZhbGlkIiwhZSkpLGZ9LHNob3dFcnJvcnM6ZnVuY3Rpb24odCl7aWYodCl7dmFyIGk9dGhpcztuLmV4dGVuZCh0aGlzLmVycm9yTWFwLHQpO3RoaXMuZXJyb3JMaXN0PW4ubWFwKHRoaXMuZXJyb3JNYXAsZnVuY3Rpb24obix0KXtyZXR1cm57bWVzc2FnZTpuLGVsZW1lbnQ6aS5maW5kQnlOYW1lKHQpWzBdfX0pO3RoaXMuc3VjY2Vzc0xpc3Q9bi5ncmVwKHRoaXMuc3VjY2Vzc0xpc3QsZnVuY3Rpb24obil7cmV0dXJuIShuLm5hbWUgaW4gdCl9KX10aGlzLnNldHRpbmdzLnNob3dFcnJvcnM/dGhpcy5zZXR0aW5ncy5zaG93RXJyb3JzLmNhbGwodGhpcyx0aGlzLmVycm9yTWFwLHRoaXMuZXJyb3JMaXN0KTp0aGlzLmRlZmF1bHRTaG93RXJyb3JzKCl9LHJlc2V0Rm9ybTpmdW5jdGlvbigpe24uZm4ucmVzZXRGb3JtJiZuKHRoaXMuY3VycmVudEZvcm0pLnJlc2V0Rm9ybSgpO3RoaXMuaW52YWxpZD17fTt0aGlzLnN1Ym1pdHRlZD17fTt0aGlzLnByZXBhcmVGb3JtKCk7dGhpcy5oaWRlRXJyb3JzKCk7dmFyIHQ9dGhpcy5lbGVtZW50cygpLnJlbW92ZURhdGEoInByZXZpb3VzVmFsdWUiKS5yZW1vdmVBdHRyKCJhcmlhLWludmFsaWQiKTt0aGlzLnJlc2V0RWxlbWVudHModCl9LHJlc2V0RWxlbWVudHM6ZnVuY3Rpb24obil7dmFyIHQ7aWYodGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodClmb3IodD0wO25bdF07dCsrKXRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCh0aGlzLG5bdF0sdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLCIiKSx0aGlzLmZpbmRCeU5hbWUoblt0XS5uYW1lKS5yZW1vdmVDbGFzcyh0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MpO2Vsc2Ugbi5yZW1vdmVDbGFzcyh0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MpLnJlbW92ZUNsYXNzKHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyl9LG51bWJlck9mSW52YWxpZHM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vYmplY3RMZW5ndGgodGhpcy5pbnZhbGlkKX0sb2JqZWN0TGVuZ3RoOmZ1bmN0aW9uKG4pe3ZhciBpPTA7Zm9yKHZhciB0IGluIG4pblt0XSE9PXVuZGVmaW5lZCYmblt0XSE9PW51bGwmJm5bdF0hPT0hMSYmaSsrO3JldHVybiBpfSxoaWRlRXJyb3JzOmZ1bmN0aW9uKCl7dGhpcy5oaWRlVGhlc2UodGhpcy50b0hpZGUpfSxoaWRlVGhlc2U6ZnVuY3Rpb24obil7bi5ub3QodGhpcy5jb250YWluZXJzKS50ZXh0KCIiKTt0aGlzLmFkZFdyYXBwZXIobikuaGlkZSgpfSx2YWxpZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNpemUoKT09PTB9LHNpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcnJvckxpc3QubGVuZ3RofSxmb2N1c0ludmFsaWQ6ZnVuY3Rpb24oKXtpZih0aGlzLnNldHRpbmdzLmZvY3VzSW52YWxpZCl0cnl7bih0aGlzLmZpbmRMYXN0QWN0aXZlKCl8fHRoaXMuZXJyb3JMaXN0Lmxlbmd0aCYmdGhpcy5lcnJvckxpc3RbMF0uZWxlbWVudHx8W10pLmZpbHRlcigiOnZpc2libGUiKS5mb2N1cygpLnRyaWdnZXIoImZvY3VzaW4iKX1jYXRjaCh0KXt9fSxmaW5kTGFzdEFjdGl2ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMubGFzdEFjdGl2ZTtyZXR1cm4gdCYmbi5ncmVwKHRoaXMuZXJyb3JMaXN0LGZ1bmN0aW9uKG4pe3JldHVybiBuLmVsZW1lbnQubmFtZT09PXQubmFtZX0pLmxlbmd0aD09PTEmJnR9LGVsZW1lbnRzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxpPXt9O3JldHVybiBuKHRoaXMuY3VycmVudEZvcm0pLmZpbmQoImlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBbY29udGVudGVkaXRhYmxlXSIpLm5vdCgiOnN1Ym1pdCwgOnJlc2V0LCA6aW1hZ2UsIDpkaXNhYmxlZCIpLm5vdCh0aGlzLnNldHRpbmdzLmlnbm9yZSkuZmlsdGVyKGZ1bmN0aW9uKCl7dmFyIHI9dGhpcy5uYW1lfHxuKHRoaXMpLmF0dHIoIm5hbWUiKTtyZXR1cm4oIXImJnQuc2V0dGluZ3MuZGVidWcmJndpbmRvdy5jb25zb2xlJiZjb25zb2xlLmVycm9yKCIlbyBoYXMgbm8gbmFtZSBhc3NpZ25lZCIsdGhpcyksdGhpcy5oYXNBdHRyaWJ1dGUoImNvbnRlbnRlZGl0YWJsZSIpJiYodGhpcy5mb3JtPW4odGhpcykuY2xvc2VzdCgiZm9ybSIpWzBdLHRoaXMubmFtZT1yKSxyIGluIGl8fCF0Lm9iamVjdExlbmd0aChuKHRoaXMpLnJ1bGVzKCkpKT8hMTooaVtyXT0hMCwhMCl9KX0sY2xlYW46ZnVuY3Rpb24odCl7cmV0dXJuIG4odClbMF19LGVycm9yczpmdW5jdGlvbigpe3ZhciB0PXRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcy5zcGxpdCgiICIpLmpvaW4oIi4iKTtyZXR1cm4gbih0aGlzLnNldHRpbmdzLmVycm9yRWxlbWVudCsiLiIrdCx0aGlzLmVycm9yQ29udGV4dCl9LHJlc2V0SW50ZXJuYWxzOmZ1bmN0aW9uKCl7dGhpcy5zdWNjZXNzTGlzdD1bXTt0aGlzLmVycm9yTGlzdD1bXTt0aGlzLmVycm9yTWFwPXt9O3RoaXMudG9TaG93PW4oW10pO3RoaXMudG9IaWRlPW4oW10pfSxyZXNldDpmdW5jdGlvbigpe3RoaXMucmVzZXRJbnRlcm5hbHMoKTt0aGlzLmN1cnJlbnRFbGVtZW50cz1uKFtdKX0scHJlcGFyZUZvcm06ZnVuY3Rpb24oKXt0aGlzLnJlc2V0KCk7dGhpcy50b0hpZGU9dGhpcy5lcnJvcnMoKS5hZGQodGhpcy5jb250YWluZXJzKX0scHJlcGFyZUVsZW1lbnQ6ZnVuY3Rpb24obil7dGhpcy5yZXNldCgpO3RoaXMudG9IaWRlPXRoaXMuZXJyb3JzRm9yKG4pfSxlbGVtZW50VmFsdWU6ZnVuY3Rpb24odCl7dmFyIGY9bih0KSx1PXQudHlwZSxpLHI7cmV0dXJuIHU9PT0icmFkaW8ifHx1PT09ImNoZWNrYm94Ij90aGlzLmZpbmRCeU5hbWUodC5uYW1lKS5maWx0ZXIoIjpjaGVja2VkIikudmFsKCk6dT09PSJudW1iZXIiJiZ0eXBlb2YgdC52YWxpZGl0eSE9InVuZGVmaW5lZCI/dC52YWxpZGl0eS5iYWRJbnB1dD8iTmFOIjpmLnZhbCgpOihpPXQuaGFzQXR0cmlidXRlKCJjb250ZW50ZWRpdGFibGUiKT9mLnRleHQoKTpmLnZhbCgpLHU9PT0iZmlsZSIpP2kuc3Vic3RyKDAsMTIpPT09IkM6XFxmYWtlcGF0aFxcIj9pLnN1YnN0cigxMik6KHI9aS5sYXN0SW5kZXhPZigiLyIpLHI+PTApP2kuc3Vic3RyKHIrMSk6KHI9aS5sYXN0SW5kZXhPZigiXFwiKSxyPj0wKT9pLnN1YnN0cihyKzEpOmk6dHlwZW9mIGk9PSJzdHJpbmciP2kucmVwbGFjZSgvXHIvZywiIik6aX0sY2hlY2s6ZnVuY3Rpb24odCl7dD10aGlzLnZhbGlkYXRpb25UYXJnZXRGb3IodGhpcy5jbGVhbih0KSk7dmFyIGk9bih0KS5ydWxlcygpLGM9bi5tYXAoaSxmdW5jdGlvbihuLHQpe3JldHVybiB0fSkubGVuZ3RoLGg9ITEsdT10aGlzLmVsZW1lbnRWYWx1ZSh0KSxmLGUscixvO2lmKHR5cGVvZiBpLm5vcm1hbGl6ZXI9PSJmdW5jdGlvbiI/bz1pLm5vcm1hbGl6ZXI6dHlwZW9mIHRoaXMuc2V0dGluZ3Mubm9ybWFsaXplcj09ImZ1bmN0aW9uIiYmKG89dGhpcy5zZXR0aW5ncy5ub3JtYWxpemVyKSxvKXtpZih1PW8uY2FsbCh0LHUpLHR5cGVvZiB1IT0ic3RyaW5nIil0aHJvdyBuZXcgVHlwZUVycm9yKCJUaGUgbm9ybWFsaXplciBzaG91bGQgcmV0dXJuIGEgc3RyaW5nIHZhbHVlLiIpO2RlbGV0ZSBpLm5vcm1hbGl6ZXJ9Zm9yKGUgaW4gaSl7cj17bWV0aG9kOmUscGFyYW1ldGVyczppW2VdfTt0cnl7aWYoZj1uLnZhbGlkYXRvci5tZXRob2RzW2VdLmNhbGwodGhpcyx1LHQsci5wYXJhbWV0ZXJzKSxmPT09ImRlcGVuZGVuY3ktbWlzbWF0Y2giJiZjPT09MSl7aD0hMDtjb250aW51ZX1pZihoPSExLGY9PT0icGVuZGluZyIpe3RoaXMudG9IaWRlPXRoaXMudG9IaWRlLm5vdCh0aGlzLmVycm9yc0Zvcih0KSk7cmV0dXJufWlmKCFmKXJldHVybiB0aGlzLmZvcm1hdEFuZEFkZCh0LHIpLCExfWNhdGNoKHMpe3RoaXMuc2V0dGluZ3MuZGVidWcmJndpbmRvdy5jb25zb2xlJiZjb25zb2xlLmxvZygiRXhjZXB0aW9uIG9jY3VycmVkIHdoZW4gY2hlY2tpbmcgZWxlbWVudCAiK3QuaWQrIiwgY2hlY2sgdGhlICciK3IubWV0aG9kKyInIG1ldGhvZC4iLHMpO3MgaW5zdGFuY2VvZiBUeXBlRXJyb3ImJihzLm1lc3NhZ2UrPSIuICBFeGNlcHRpb24gb2NjdXJyZWQgd2hlbiBjaGVja2luZyBlbGVtZW50ICIrdC5pZCsiLCBjaGVjayB0aGUgJyIrci5tZXRob2QrIicgbWV0aG9kLiIpO3Rocm93IHM7fX1pZighaClyZXR1cm4gdGhpcy5vYmplY3RMZW5ndGgoaSkmJnRoaXMuc3VjY2Vzc0xpc3QucHVzaCh0KSwhMH0sY3VzdG9tRGF0YU1lc3NhZ2U6ZnVuY3Rpb24odCxpKXtyZXR1cm4gbih0KS5kYXRhKCJtc2ciK2kuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkraS5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSl8fG4odCkuZGF0YSgibXNnIil9LGN1c3RvbU1lc3NhZ2U6ZnVuY3Rpb24obix0KXt2YXIgaT10aGlzLnNldHRpbmdzLm1lc3NhZ2VzW25dO3JldHVybiBpJiYoaS5jb25zdHJ1Y3Rvcj09PVN0cmluZz9pOmlbdF0pfSxmaW5kRGVmaW5lZDpmdW5jdGlvbigpe2Zvcih2YXIgbj0wO248YXJndW1lbnRzLmxlbmd0aDtuKyspaWYoYXJndW1lbnRzW25dIT09dW5kZWZpbmVkKXJldHVybiBhcmd1bWVudHNbbl07cmV0dXJuIHVuZGVmaW5lZH0sZGVmYXVsdE1lc3NhZ2U6ZnVuY3Rpb24odCxpKXt0eXBlb2YgaT09InN0cmluZyImJihpPXttZXRob2Q6aX0pO3ZhciByPXRoaXMuZmluZERlZmluZWQodGhpcy5jdXN0b21NZXNzYWdlKHQubmFtZSxpLm1ldGhvZCksdGhpcy5jdXN0b21EYXRhTWVzc2FnZSh0LGkubWV0aG9kKSwhdGhpcy5zZXR0aW5ncy5pZ25vcmVUaXRsZSYmdC50aXRsZXx8dW5kZWZpbmVkLG4udmFsaWRhdG9yLm1lc3NhZ2VzW2kubWV0aG9kXSwiPHN0cm9uZz5XYXJuaW5nOiBObyBtZXNzYWdlIGRlZmluZWQgZm9yICIrdC5uYW1lKyI8XC9zdHJvbmc+IiksdT0vXCQ/XHsoXGQrKVx9L2c7cmV0dXJuIHR5cGVvZiByPT0iZnVuY3Rpb24iP3I9ci5jYWxsKHRoaXMsaS5wYXJhbWV0ZXJzLHQpOnUudGVzdChyKSYmKHI9bi52YWxpZGF0b3IuZm9ybWF0KHIucmVwbGFjZSh1LCJ7JDF9IiksaS5wYXJhbWV0ZXJzKSkscn0sZm9ybWF0QW5kQWRkOmZ1bmN0aW9uKG4sdCl7dmFyIGk9dGhpcy5kZWZhdWx0TWVzc2FnZShuLHQpO3RoaXMuZXJyb3JMaXN0LnB1c2goe21lc3NhZ2U6aSxlbGVtZW50Om4sbWV0aG9kOnQubWV0aG9kfSk7dGhpcy5lcnJvck1hcFtuLm5hbWVdPWk7dGhpcy5zdWJtaXR0ZWRbbi5uYW1lXT1pfSxhZGRXcmFwcGVyOmZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLnNldHRpbmdzLndyYXBwZXImJihuPW4uYWRkKG4ucGFyZW50KHRoaXMuc2V0dGluZ3Mud3JhcHBlcikpKSxufSxkZWZhdWx0U2hvd0Vycm9yczpmdW5jdGlvbigpe2Zvcih2YXIgaSx0LG49MDt0aGlzLmVycm9yTGlzdFtuXTtuKyspdD10aGlzLmVycm9yTGlzdFtuXSx0aGlzLnNldHRpbmdzLmhpZ2hsaWdodCYmdGhpcy5zZXR0aW5ncy5oaWdobGlnaHQuY2FsbCh0aGlzLHQuZWxlbWVudCx0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MsdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzKSx0aGlzLnNob3dMYWJlbCh0LmVsZW1lbnQsdC5tZXNzYWdlKTtpZih0aGlzLmVycm9yTGlzdC5sZW5ndGgmJih0aGlzLnRvU2hvdz10aGlzLnRvU2hvdy5hZGQodGhpcy5jb250YWluZXJzKSksdGhpcy5zZXR0aW5ncy5zdWNjZXNzKWZvcihuPTA7dGhpcy5zdWNjZXNzTGlzdFtuXTtuKyspdGhpcy5zaG93TGFiZWwodGhpcy5zdWNjZXNzTGlzdFtuXSk7aWYodGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodClmb3Iobj0wLGk9dGhpcy52YWxpZEVsZW1lbnRzKCk7aVtuXTtuKyspdGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodC5jYWxsKHRoaXMsaVtuXSx0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MsdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzKTt0aGlzLnRvSGlkZT10aGlzLnRvSGlkZS5ub3QodGhpcy50b1Nob3cpO3RoaXMuaGlkZUVycm9ycygpO3RoaXMuYWRkV3JhcHBlcih0aGlzLnRvU2hvdykuc2hvdygpfSx2YWxpZEVsZW1lbnRzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VycmVudEVsZW1lbnRzLm5vdCh0aGlzLmludmFsaWRFbGVtZW50cygpKX0saW52YWxpZEVsZW1lbnRzOmZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcy5lcnJvckxpc3QpLm1hcChmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnR9KX0sc2hvd0xhYmVsOmZ1bmN0aW9uKHQsaSl7dmFyIHUscyxlLG8scj10aGlzLmVycm9yc0Zvcih0KSxoPXRoaXMuaWRPck5hbWUodCksZj1uKHQpLmF0dHIoImFyaWEtZGVzY3JpYmVkYnkiKTtyLmxlbmd0aD8oci5yZW1vdmVDbGFzcyh0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MpLmFkZENsYXNzKHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcyksci5odG1sKGkpKToocj1uKCI8Iit0aGlzLnNldHRpbmdzLmVycm9yRWxlbWVudCsiPiIpLmF0dHIoImlkIixoKyItZXJyb3IiKS5hZGRDbGFzcyh0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MpLmh0bWwoaXx8IiIpLHU9cix0aGlzLnNldHRpbmdzLndyYXBwZXImJih1PXIuaGlkZSgpLnNob3coKS53cmFwKCI8Iit0aGlzLnNldHRpbmdzLndyYXBwZXIrIi8+IikucGFyZW50KCkpLHRoaXMubGFiZWxDb250YWluZXIubGVuZ3RoP3RoaXMubGFiZWxDb250YWluZXIuYXBwZW5kKHUpOnRoaXMuc2V0dGluZ3MuZXJyb3JQbGFjZW1lbnQ/dGhpcy5zZXR0aW5ncy5lcnJvclBsYWNlbWVudC5jYWxsKHRoaXMsdSxuKHQpKTp1Lmluc2VydEFmdGVyKHQpLHIuaXMoImxhYmVsIik/ci5hdHRyKCJmb3IiLGgpOnIucGFyZW50cygibGFiZWxbZm9yPSciK3RoaXMuZXNjYXBlQ3NzTWV0YShoKSsiJ10iKS5sZW5ndGg9PT0wJiYoZT1yLmF0dHIoImlkIiksZj9mLm1hdGNoKG5ldyBSZWdFeHAoIlxcYiIrdGhpcy5lc2NhcGVDc3NNZXRhKGUpKyJcXGIiKSl8fChmKz0iICIrZSk6Zj1lLG4odCkuYXR0cigiYXJpYS1kZXNjcmliZWRieSIsZikscz10aGlzLmdyb3Vwc1t0Lm5hbWVdLHMmJihvPXRoaXMsbi5lYWNoKG8uZ3JvdXBzLGZ1bmN0aW9uKHQsaSl7aT09PXMmJm4oIltuYW1lPSciK28uZXNjYXBlQ3NzTWV0YSh0KSsiJ10iLG8uY3VycmVudEZvcm0pLmF0dHIoImFyaWEtZGVzY3JpYmVkYnkiLHIuYXR0cigiaWQiKSl9KSkpKTshaSYmdGhpcy5zZXR0aW5ncy5zdWNjZXNzJiYoci50ZXh0KCIiKSx0eXBlb2YgdGhpcy5zZXR0aW5ncy5zdWNjZXNzPT0ic3RyaW5nIj9yLmFkZENsYXNzKHRoaXMuc2V0dGluZ3Muc3VjY2Vzcyk6dGhpcy5zZXR0aW5ncy5zdWNjZXNzKHIsdCkpO3RoaXMudG9TaG93PXRoaXMudG9TaG93LmFkZChyKX0sZXJyb3JzRm9yOmZ1bmN0aW9uKHQpe3ZhciByPXRoaXMuZXNjYXBlQ3NzTWV0YSh0aGlzLmlkT3JOYW1lKHQpKSx1PW4odCkuYXR0cigiYXJpYS1kZXNjcmliZWRieSIpLGk9ImxhYmVsW2Zvcj0nIityKyInXSwgbGFiZWxbZm9yPSciK3IrIiddICoiO3JldHVybiB1JiYoaT1pKyIsICMiK3RoaXMuZXNjYXBlQ3NzTWV0YSh1KS5yZXBsYWNlKC9ccysvZywiLCAjIikpLHRoaXMuZXJyb3JzKCkuZmlsdGVyKGkpfSxlc2NhcGVDc3NNZXRhOmZ1bmN0aW9uKG4pe3JldHVybiBuLnJlcGxhY2UoLyhbXFwhIiMkJSYnKCkqKywuLzo7PD0+P0BcW1xdXmB7fH1+XSkvZywiXFwkMSIpfSxpZE9yTmFtZTpmdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5ncm91cHNbbi5uYW1lXXx8KHRoaXMuY2hlY2thYmxlKG4pP24ubmFtZTpuLmlkfHxuLm5hbWUpfSx2YWxpZGF0aW9uVGFyZ2V0Rm9yOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNoZWNrYWJsZSh0KSYmKHQ9dGhpcy5maW5kQnlOYW1lKHQubmFtZSkpLG4odCkubm90KHRoaXMuc2V0dGluZ3MuaWdub3JlKVswXX0sY2hlY2thYmxlOmZ1bmN0aW9uKG4pe3JldHVybi9yYWRpb3xjaGVja2JveC9pLnRlc3Qobi50eXBlKX0sZmluZEJ5TmFtZTpmdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLmN1cnJlbnRGb3JtKS5maW5kKCJbbmFtZT0nIit0aGlzLmVzY2FwZUNzc01ldGEodCkrIiddIil9LGdldExlbmd0aDpmdW5jdGlvbih0LGkpe3N3aXRjaChpLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpe2Nhc2Uic2VsZWN0IjpyZXR1cm4gbigib3B0aW9uOnNlbGVjdGVkIixpKS5sZW5ndGg7Y2FzZSJpbnB1dCI6aWYodGhpcy5jaGVja2FibGUoaSkpcmV0dXJuIHRoaXMuZmluZEJ5TmFtZShpLm5hbWUpLmZpbHRlcigiOmNoZWNrZWQiKS5sZW5ndGh9cmV0dXJuIHQubGVuZ3RofSxkZXBlbmQ6ZnVuY3Rpb24obix0KXtyZXR1cm4gdGhpcy5kZXBlbmRUeXBlc1t0eXBlb2Ygbl0/dGhpcy5kZXBlbmRUeXBlc1t0eXBlb2Ygbl0obix0KTohMH0sZGVwZW5kVHlwZXM6e2Jvb2xlYW46ZnVuY3Rpb24obil7cmV0dXJuIG59LHN0cmluZzpmdW5jdGlvbih0LGkpe3JldHVybiEhbih0LGkuZm9ybSkubGVuZ3RofSwiZnVuY3Rpb24iOmZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4odCl9fSxvcHRpb25hbDpmdW5jdGlvbih0KXt2YXIgaT10aGlzLmVsZW1lbnRWYWx1ZSh0KTtyZXR1cm4hbi52YWxpZGF0b3IubWV0aG9kcy5yZXF1aXJlZC5jYWxsKHRoaXMsaSx0KSYmImRlcGVuZGVuY3ktbWlzbWF0Y2gifSxzdGFydFJlcXVlc3Q6ZnVuY3Rpb24odCl7dGhpcy5wZW5kaW5nW3QubmFtZV18fCh0aGlzLnBlbmRpbmdSZXF1ZXN0Kyssbih0KS5hZGRDbGFzcyh0aGlzLnNldHRpbmdzLnBlbmRpbmdDbGFzcyksdGhpcy5wZW5kaW5nW3QubmFtZV09ITApfSxzdG9wUmVxdWVzdDpmdW5jdGlvbih0LGkpe3RoaXMucGVuZGluZ1JlcXVlc3QtLTt0aGlzLnBlbmRpbmdSZXF1ZXN0PDAmJih0aGlzLnBlbmRpbmdSZXF1ZXN0PTApO2RlbGV0ZSB0aGlzLnBlbmRpbmdbdC5uYW1lXTtuKHQpLnJlbW92ZUNsYXNzKHRoaXMuc2V0dGluZ3MucGVuZGluZ0NsYXNzKTtpJiZ0aGlzLnBlbmRpbmdSZXF1ZXN0PT09MCYmdGhpcy5mb3JtU3VibWl0dGVkJiZ0aGlzLmZvcm0oKT8obih0aGlzLmN1cnJlbnRGb3JtKS5zdWJtaXQoKSx0aGlzLnN1Ym1pdEJ1dHRvbiYmbigiaW5wdXQ6aGlkZGVuW25hbWU9JyIrdGhpcy5zdWJtaXRCdXR0b24ubmFtZSsiJ10iLHRoaXMuY3VycmVudEZvcm0pLnJlbW92ZSgpLHRoaXMuZm9ybVN1Ym1pdHRlZD0hMSk6IWkmJnRoaXMucGVuZGluZ1JlcXVlc3Q9PT0wJiZ0aGlzLmZvcm1TdWJtaXR0ZWQmJihuKHRoaXMuY3VycmVudEZvcm0pLnRyaWdnZXJIYW5kbGVyKCJpbnZhbGlkLWZvcm0iLFt0aGlzXSksdGhpcy5mb3JtU3VibWl0dGVkPSExKX0scHJldmlvdXNWYWx1ZTpmdW5jdGlvbih0LGkpe3JldHVybiBpPXR5cGVvZiBpPT0ic3RyaW5nIiYmaXx8InJlbW90ZSIsbi5kYXRhKHQsInByZXZpb3VzVmFsdWUiKXx8bi5kYXRhKHQsInByZXZpb3VzVmFsdWUiLHtvbGQ6bnVsbCx2YWxpZDohMCxtZXNzYWdlOnRoaXMuZGVmYXVsdE1lc3NhZ2UodCx7bWV0aG9kOml9KX0pfSxkZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5yZXNldEZvcm0oKTtuKHRoaXMuY3VycmVudEZvcm0pLm9mZigiLnZhbGlkYXRlIikucmVtb3ZlRGF0YSgidmFsaWRhdG9yIikuZmluZCgiLnZhbGlkYXRlLWVxdWFsVG8tYmx1ciIpLm9mZigiLnZhbGlkYXRlLWVxdWFsVG8iKS5yZW1vdmVDbGFzcygidmFsaWRhdGUtZXF1YWxUby1ibHVyIil9fSxjbGFzc1J1bGVTZXR0aW5nczp7cmVxdWlyZWQ6e3JlcXVpcmVkOiEwfSxlbWFpbDp7ZW1haWw6ITB9LHVybDp7dXJsOiEwfSxkYXRlOntkYXRlOiEwfSxkYXRlSVNPOntkYXRlSVNPOiEwfSxudW1iZXI6e251bWJlcjohMH0sZGlnaXRzOntkaWdpdHM6ITB9LGNyZWRpdGNhcmQ6e2NyZWRpdGNhcmQ6ITB9fSxhZGRDbGFzc1J1bGVzOmZ1bmN0aW9uKHQsaSl7dC5jb25zdHJ1Y3Rvcj09PVN0cmluZz90aGlzLmNsYXNzUnVsZVNldHRpbmdzW3RdPWk6bi5leHRlbmQodGhpcy5jbGFzc1J1bGVTZXR0aW5ncyx0KX0sY2xhc3NSdWxlczpmdW5jdGlvbih0KXt2YXIgaT17fSxyPW4odCkuYXR0cigiY2xhc3MiKTtyZXR1cm4gciYmbi5lYWNoKHIuc3BsaXQoIiAiKSxmdW5jdGlvbigpe3RoaXMgaW4gbi52YWxpZGF0b3IuY2xhc3NSdWxlU2V0dGluZ3MmJm4uZXh0ZW5kKGksbi52YWxpZGF0b3IuY2xhc3NSdWxlU2V0dGluZ3NbdGhpc10pfSksaX0sbm9ybWFsaXplQXR0cmlidXRlUnVsZTpmdW5jdGlvbihuLHQsaSxyKXsvbWlufG1heHxzdGVwLy50ZXN0KGkpJiYodD09PW51bGx8fC9udW1iZXJ8cmFuZ2V8dGV4dC8udGVzdCh0KSkmJihyPU51bWJlcihyKSxpc05hTihyKSYmKHI9dW5kZWZpbmVkKSk7cnx8cj09PTA/bltpXT1yOnQ9PT1pJiZ0IT09InJhbmdlIiYmKG5baV09ITApfSxhdHRyaWJ1dGVSdWxlczpmdW5jdGlvbih0KXt2YXIgcj17fSxmPW4odCksZT10LmdldEF0dHJpYnV0ZSgidHlwZSIpLHUsaTtmb3IodSBpbiBuLnZhbGlkYXRvci5tZXRob2RzKXU9PT0icmVxdWlyZWQiPyhpPXQuZ2V0QXR0cmlidXRlKHUpLGk9PT0iIiYmKGk9ITApLGk9ISFpKTppPWYuYXR0cih1KSx0aGlzLm5vcm1hbGl6ZUF0dHJpYnV0ZVJ1bGUocixlLHUsaSk7cmV0dXJuIHIubWF4bGVuZ3RoJiYvLTF8MjE0NzQ4MzY0N3w1MjQyODgvLnRlc3Qoci5tYXhsZW5ndGgpJiZkZWxldGUgci5tYXhsZW5ndGgscn0sZGF0YVJ1bGVzOmZ1bmN0aW9uKHQpe3ZhciByPXt9LGY9bih0KSxlPXQuZ2V0QXR0cmlidXRlKCJ0eXBlIiksaSx1O2ZvcihpIGluIG4udmFsaWRhdG9yLm1ldGhvZHMpdT1mLmRhdGEoInJ1bGUiK2kuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkraS5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSksdGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVSdWxlKHIsZSxpLHUpO3JldHVybiByfSxzdGF0aWNSdWxlczpmdW5jdGlvbih0KXt2YXIgaT17fSxyPW4uZGF0YSh0LmZvcm0sInZhbGlkYXRvciIpO3JldHVybiByLnNldHRpbmdzLnJ1bGVzJiYoaT1uLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKHIuc2V0dGluZ3MucnVsZXNbdC5uYW1lXSl8fHt9KSxpfSxub3JtYWxpemVSdWxlczpmdW5jdGlvbih0LGkpe3JldHVybiBuLmVhY2godCxmdW5jdGlvbihyLHUpe2lmKHU9PT0hMSl7ZGVsZXRlIHRbcl07cmV0dXJufWlmKHUucGFyYW18fHUuZGVwZW5kcyl7dmFyIGY9ITA7c3dpdGNoKHR5cGVvZiB1LmRlcGVuZHMpe2Nhc2Uic3RyaW5nIjpmPSEhbih1LmRlcGVuZHMsaS5mb3JtKS5sZW5ndGg7YnJlYWs7Y2FzZSJmdW5jdGlvbiI6Zj11LmRlcGVuZHMuY2FsbChpLGkpfWY/dFtyXT11LnBhcmFtIT09dW5kZWZpbmVkP3UucGFyYW06ITA6KG4uZGF0YShpLmZvcm0sInZhbGlkYXRvciIpLnJlc2V0RWxlbWVudHMobihpKSksZGVsZXRlIHRbcl0pfX0pLG4uZWFjaCh0LGZ1bmN0aW9uKHIsdSl7dFtyXT1uLmlzRnVuY3Rpb24odSkmJnIhPT0ibm9ybWFsaXplciI/dShpKTp1fSksbi5lYWNoKFsibWlubGVuZ3RoIiwibWF4bGVuZ3RoIl0sZnVuY3Rpb24oKXt0W3RoaXNdJiYodFt0aGlzXT1OdW1iZXIodFt0aGlzXSkpfSksbi5lYWNoKFsicmFuZ2VsZW5ndGgiLCJyYW5nZSJdLGZ1bmN0aW9uKCl7dmFyIGk7dFt0aGlzXSYmKG4uaXNBcnJheSh0W3RoaXNdKT90W3RoaXNdPVtOdW1iZXIodFt0aGlzXVswXSksTnVtYmVyKHRbdGhpc11bMV0pXTp0eXBlb2YgdFt0aGlzXT09InN0cmluZyImJihpPXRbdGhpc10ucmVwbGFjZSgvW1xbXF1dL2csIiIpLnNwbGl0KC9bXHMsXSsvKSx0W3RoaXNdPVtOdW1iZXIoaVswXSksTnVtYmVyKGlbMV0pXSkpfSksbi52YWxpZGF0b3IuYXV0b0NyZWF0ZVJhbmdlcyYmKHQubWluIT1udWxsJiZ0Lm1heCE9bnVsbCYmKHQucmFuZ2U9W3QubWluLHQubWF4XSxkZWxldGUgdC5taW4sZGVsZXRlIHQubWF4KSx0Lm1pbmxlbmd0aCE9bnVsbCYmdC5tYXhsZW5ndGghPW51bGwmJih0LnJhbmdlbGVuZ3RoPVt0Lm1pbmxlbmd0aCx0Lm1heGxlbmd0aF0sZGVsZXRlIHQubWlubGVuZ3RoLGRlbGV0ZSB0Lm1heGxlbmd0aCkpLHR9LG5vcm1hbGl6ZVJ1bGU6ZnVuY3Rpb24odCl7aWYodHlwZW9mIHQ9PSJzdHJpbmciKXt2YXIgaT17fTtuLmVhY2godC5zcGxpdCgvXHMvKSxmdW5jdGlvbigpe2lbdGhpc109ITB9KTt0PWl9cmV0dXJuIHR9LGFkZE1ldGhvZDpmdW5jdGlvbih0LGkscil7bi52YWxpZGF0b3IubWV0aG9kc1t0XT1pO24udmFsaWRhdG9yLm1lc3NhZ2VzW3RdPXIhPT11bmRlZmluZWQ/cjpuLnZhbGlkYXRvci5tZXNzYWdlc1t0XTtpLmxlbmd0aDwzJiZuLnZhbGlkYXRvci5hZGRDbGFzc1J1bGVzKHQsbi52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSh0KSl9LG1ldGhvZHM6e3JlcXVpcmVkOmZ1bmN0aW9uKHQsaSxyKXtpZighdGhpcy5kZXBlbmQocixpKSlyZXR1cm4iZGVwZW5kZW5jeS1taXNtYXRjaCI7aWYoaS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09InNlbGVjdCIpe3ZhciB1PW4oaSkudmFsKCk7cmV0dXJuIHUmJnUubGVuZ3RoPjB9cmV0dXJuIHRoaXMuY2hlY2thYmxlKGkpP3RoaXMuZ2V0TGVuZ3RoKHQsaSk+MDp0Lmxlbmd0aD4wfSxlbWFpbDpmdW5jdGlvbihuLHQpe3JldHVybiB0aGlzLm9wdGlvbmFsKHQpfHwvXlthLXpBLVowLTkuISMkJSYnKitcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykqJC8udGVzdChuKX0sdXJsOmZ1bmN0aW9uKG4sdCl7cmV0dXJuIHRoaXMub3B0aW9uYWwodCl8fC9eKD86KD86KD86aHR0cHM/fGZ0cCk6KT9cL1wvKSg/OlxTKyg/OjpcUyopP0ApPyg/Oig/ISg/OjEwfDEyNykoPzpcLlxkezEsM30pezN9KSg/ISg/OjE2OVwuMjU0fDE5MlwuMTY4KSg/OlwuXGR7MSwzfSl7Mn0pKD8hMTcyXC4oPzoxWzYtOV18MlxkfDNbMC0xXSkoPzpcLlxkezEsM30pezJ9KSg/OlsxLTldXGQ/fDFcZFxkfDJbMDFdXGR8MjJbMC0zXSkoPzpcLig/OjE/XGR7MSwyfXwyWzAtNF1cZHwyNVswLTVdKSl7Mn0oPzpcLig/OlsxLTldXGQ/fDFcZFxkfDJbMC00XVxkfDI1WzAtNF0pKXwoPzooPzpbYS16XHUwMGExLVx1ZmZmZjAtOV0tKikqW2Etelx1MDBhMS1cdWZmZmYwLTldKykoPzpcLig/OlthLXpcdTAwYTEtXHVmZmZmMC05XS0qKSpbYS16XHUwMGExLVx1ZmZmZjAtOV0rKSooPzpcLig/OlthLXpcdTAwYTEtXHVmZmZmXXsyLH0pKS4/KSg/OjpcZHsyLDV9KT8oPzpbLz8jXVxTKik/JC9pLnRlc3Qobil9LGRhdGU6ZnVuY3Rpb24obix0KXtyZXR1cm4gdGhpcy5vcHRpb25hbCh0KXx8IS9JbnZhbGlkfE5hTi8udGVzdChuZXcgRGF0ZShuKS50b1N0cmluZygpKX0sZGF0ZUlTTzpmdW5jdGlvbihuLHQpe3JldHVybiB0aGlzLm9wdGlvbmFsKHQpfHwvXlxkezR9W1wvXC1dKDA/WzEtOV18MVswMTJdKVtcL1wtXSgwP1sxLTldfFsxMl1bMC05XXwzWzAxXSkkLy50ZXN0KG4pfSxudW1iZXI6ZnVuY3Rpb24obix0KXtyZXR1cm4gdGhpcy5vcHRpb25hbCh0KXx8L14oPzotP1xkK3wtP1xkezEsM30oPzosXGR7M30pKyk/KD86XC5cZCspPyQvLnRlc3Qobil9LGRpZ2l0czpmdW5jdGlvbihuLHQpe3JldHVybiB0aGlzLm9wdGlvbmFsKHQpfHwvXlxkKyQvLnRlc3Qobil9LG1pbmxlbmd0aDpmdW5jdGlvbih0LGkscil7dmFyIHU9bi5pc0FycmF5KHQpP3QubGVuZ3RoOnRoaXMuZ2V0TGVuZ3RoKHQsaSk7cmV0dXJuIHRoaXMub3B0aW9uYWwoaSl8fHU+PXJ9LG1heGxlbmd0aDpmdW5jdGlvbih0LGkscil7dmFyIHU9bi5pc0FycmF5KHQpP3QubGVuZ3RoOnRoaXMuZ2V0TGVuZ3RoKHQsaSk7cmV0dXJuIHRoaXMub3B0aW9uYWwoaSl8fHU8PXJ9LHJhbmdlbGVuZ3RoOmZ1bmN0aW9uKHQsaSxyKXt2YXIgdT1uLmlzQXJyYXkodCk/dC5sZW5ndGg6dGhpcy5nZXRMZW5ndGgodCxpKTtyZXR1cm4gdGhpcy5vcHRpb25hbChpKXx8dT49clswXSYmdTw9clsxXX0sbWluOmZ1bmN0aW9uKG4sdCxpKXtyZXR1cm4gdGhpcy5vcHRpb25hbCh0KXx8bj49aX0sbWF4OmZ1bmN0aW9uKG4sdCxpKXtyZXR1cm4gdGhpcy5vcHRpb25hbCh0KXx8bjw9aX0scmFuZ2U6ZnVuY3Rpb24obix0LGkpe3JldHVybiB0aGlzLm9wdGlvbmFsKHQpfHxuPj1pWzBdJiZuPD1pWzFdfSxzdGVwOmZ1bmN0aW9uKHQsaSxyKXt2YXIgdT1uKGkpLmF0dHIoInR5cGUiKSxoPSJTdGVwIGF0dHJpYnV0ZSBvbiBpbnB1dCB0eXBlICIrdSsiIGlzIG5vdCBzdXBwb3J0ZWQuIixjPW5ldyBSZWdFeHAoIlxcYiIrdSsiXFxiIiksbD11JiYhYy50ZXN0KCJ0ZXh0LG51bWJlcixyYW5nZSIpLGU9ZnVuY3Rpb24obil7dmFyIHQ9KCIiK24pLm1hdGNoKC8oPzpcLihcZCspKT8kLyk7cmV0dXJuIHQ/dFsxXT90WzFdLmxlbmd0aDowOjB9LG89ZnVuY3Rpb24obil7cmV0dXJuIE1hdGgucm91bmQobipNYXRoLnBvdygxMCxmKSl9LHM9ITAsZjtpZihsKXRocm93IG5ldyBFcnJvcihoKTtyZXR1cm4gZj1lKHIpLChlKHQpPmZ8fG8odCklbyhyKSE9MCkmJihzPSExKSx0aGlzLm9wdGlvbmFsKGkpfHxzfSxlcXVhbFRvOmZ1bmN0aW9uKHQsaSxyKXt2YXIgdT1uKHIpO2lmKHRoaXMuc2V0dGluZ3Mub25mb2N1c291dCYmdS5ub3QoIi52YWxpZGF0ZS1lcXVhbFRvLWJsdXIiKS5sZW5ndGgpdS5hZGRDbGFzcygidmFsaWRhdGUtZXF1YWxUby1ibHVyIikub24oImJsdXIudmFsaWRhdGUtZXF1YWxUbyIsZnVuY3Rpb24oKXtuKGkpLnZhbGlkKCl9KTtyZXR1cm4gdD09PXUudmFsKCl9LHJlbW90ZTpmdW5jdGlvbih0LGkscix1KXtpZih0aGlzLm9wdGlvbmFsKGkpKXJldHVybiJkZXBlbmRlbmN5LW1pc21hdGNoIjt1PXR5cGVvZiB1PT0ic3RyaW5nIiYmdXx8InJlbW90ZSI7dmFyIGU9dGhpcy5wcmV2aW91c1ZhbHVlKGksdSksZixvLHM7cmV0dXJuKHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbaS5uYW1lXXx8KHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbaS5uYW1lXT17fSksZS5vcmlnaW5hbE1lc3NhZ2U9ZS5vcmlnaW5hbE1lc3NhZ2V8fHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbaS5uYW1lXVt1XSx0aGlzLnNldHRpbmdzLm1lc3NhZ2VzW2kubmFtZV1bdV09ZS5tZXNzYWdlLHI9dHlwZW9mIHI9PSJzdHJpbmciJiZ7dXJsOnJ9fHxyLHM9bi5wYXJhbShuLmV4dGVuZCh7ZGF0YTp0fSxyLmRhdGEpKSxlLm9sZD09PXMpP2UudmFsaWQ6KGUub2xkPXMsZj10aGlzLHRoaXMuc3RhcnRSZXF1ZXN0KGkpLG89e30sb1tpLm5hbWVdPXQsbi5hamF4KG4uZXh0ZW5kKCEwLHttb2RlOiJhYm9ydCIscG9ydDoidmFsaWRhdGUiK2kubmFtZSxkYXRhVHlwZToianNvbiIsZGF0YTpvLGNvbnRleHQ6Zi5jdXJyZW50Rm9ybSxzdWNjZXNzOmZ1bmN0aW9uKG4pe3ZhciByPW49PT0hMHx8bj09PSJ0cnVlIixvLHMsaDtmLnNldHRpbmdzLm1lc3NhZ2VzW2kubmFtZV1bdV09ZS5vcmlnaW5hbE1lc3NhZ2U7cj8oaD1mLmZvcm1TdWJtaXR0ZWQsZi5yZXNldEludGVybmFscygpLGYudG9IaWRlPWYuZXJyb3JzRm9yKGkpLGYuZm9ybVN1Ym1pdHRlZD1oLGYuc3VjY2Vzc0xpc3QucHVzaChpKSxmLmludmFsaWRbaS5uYW1lXT0hMSxmLnNob3dFcnJvcnMoKSk6KG89e30scz1ufHxmLmRlZmF1bHRNZXNzYWdlKGkse21ldGhvZDp1LHBhcmFtZXRlcnM6dH0pLG9baS5uYW1lXT1lLm1lc3NhZ2U9cyxmLmludmFsaWRbaS5uYW1lXT0hMCxmLnNob3dFcnJvcnMobykpO2UudmFsaWQ9cjtmLnN0b3BSZXF1ZXN0KGkscil9fSxyKSksInBlbmRpbmciKX19fSk7dmFyIHQ9e30saTtyZXR1cm4gbi5hamF4UHJlZmlsdGVyP24uYWpheFByZWZpbHRlcihmdW5jdGlvbihuLGkscil7dmFyIHU9bi5wb3J0O24ubW9kZT09PSJhYm9ydCImJih0W3VdJiZ0W3VdLmFib3J0KCksdFt1XT1yKX0pOihpPW4uYWpheCxuLmFqYXg9ZnVuY3Rpb24ocil7dmFyIGY9KCJtb2RlImluIHI/cjpuLmFqYXhTZXR0aW5ncykubW9kZSx1PSgicG9ydCJpbiByP3I6bi5hamF4U2V0dGluZ3MpLnBvcnQ7cmV0dXJuIGY9PT0iYWJvcnQiPyh0W3VdJiZ0W3VdLmFib3J0KCksdFt1XT1pLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0W3VdKTppLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pLG59KTsNCihmdW5jdGlvbihuKXt0eXBlb2YgZGVmaW5lPT0iZnVuY3Rpb24iJiZkZWZpbmUuYW1kP2RlZmluZSgianF1ZXJ5LnZhbGlkYXRlLnVub2J0cnVzaXZlIixbImpxdWVyeS12YWxpZGF0aW9uIl0sbik6dHlwZW9mIG1vZHVsZT09Im9iamVjdCImJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPW4ocmVxdWlyZSgianF1ZXJ5LXZhbGlkYXRpb24iKSk6alF1ZXJ5LnZhbGlkYXRvci51bm9idHJ1c2l2ZT1uKGpRdWVyeSl9KShmdW5jdGlvbihuKXtmdW5jdGlvbiBpKG4sdCxpKXtuLnJ1bGVzW3RdPWk7bi5tZXNzYWdlJiYobi5tZXNzYWdlc1t0XT1uLm1lc3NhZ2UpfWZ1bmN0aW9uIGgobil7cmV0dXJuIG4ucmVwbGFjZSgvXlxzK3xccyskL2csIiIpLnNwbGl0KC9ccyosXHMqL2cpfWZ1bmN0aW9uIGYobil7cmV0dXJuIG4ucmVwbGFjZSgvKFshIiMkJSYnKCkqKywuLzo7PD0+P0BcW1xcXF1eYHt8fX5dKS9nLCJcXCQxIil9ZnVuY3Rpb24gZShuKXtyZXR1cm4gbi5zdWJzdHIoMCxuLmxhc3RJbmRleE9mKCIuIikrMSl9ZnVuY3Rpb24gbyhuLHQpe3JldHVybiBuLmluZGV4T2YoIiouIik9PT0wJiYobj1uLnJlcGxhY2UoIiouIix0KSksbn1mdW5jdGlvbiBjKHQsaSl7dmFyIHI9bih0aGlzKS5maW5kKCJbZGF0YS12YWxtc2ctZm9yPSciK2YoaVswXS5uYW1lKSsiJ10iKSx1PXIuYXR0cigiZGF0YS12YWxtc2ctcmVwbGFjZSIpLGU9dT9uLnBhcnNlSlNPTih1KSE9PSExOm51bGw7ci5yZW1vdmVDbGFzcygiZmllbGQtdmFsaWRhdGlvbi12YWxpZCIpLmFkZENsYXNzKCJmaWVsZC12YWxpZGF0aW9uLWVycm9yIik7dC5kYXRhKCJ1bm9idHJ1c2l2ZUNvbnRhaW5lciIscik7ZT8oci5lbXB0eSgpLHQucmVtb3ZlQ2xhc3MoImlucHV0LXZhbGlkYXRpb24tZXJyb3IiKS5hcHBlbmRUbyhyKSk6dC5oaWRlKCl9ZnVuY3Rpb24gbCh0LGkpe3ZhciB1PW4odGhpcykuZmluZCgiW2RhdGEtdmFsbXNnLXN1bW1hcnk9dHJ1ZV0iKSxyPXUuZmluZCgidWwiKTtyJiZyLmxlbmd0aCYmaS5lcnJvckxpc3QubGVuZ3RoJiYoci5lbXB0eSgpLHUuYWRkQ2xhc3MoInZhbGlkYXRpb24tc3VtbWFyeS1lcnJvcnMiKS5yZW1vdmVDbGFzcygidmFsaWRhdGlvbi1zdW1tYXJ5LXZhbGlkIiksbi5lYWNoKGkuZXJyb3JMaXN0LGZ1bmN0aW9uKCl7bigiPGxpIC8+IikuaHRtbCh0aGlzLm1lc3NhZ2UpLmFwcGVuZFRvKHIpfSkpfWZ1bmN0aW9uIGEodCl7dmFyIGk9dC5kYXRhKCJ1bm9idHJ1c2l2ZUNvbnRhaW5lciIpLHIsdTtpJiYocj1pLmF0dHIoImRhdGEtdmFsbXNnLXJlcGxhY2UiKSx1PXI/bi5wYXJzZUpTT04ocik6bnVsbCxpLmFkZENsYXNzKCJmaWVsZC12YWxpZGF0aW9uLXZhbGlkIikucmVtb3ZlQ2xhc3MoImZpZWxkLXZhbGlkYXRpb24tZXJyb3IiKSx0LnJlbW92ZURhdGEoInVub2J0cnVzaXZlQ29udGFpbmVyIiksdSYmaS5lbXB0eSgpKX1mdW5jdGlvbiB2KCl7dmFyIHQ9bih0aGlzKSxpPSJfX2pxdWVyeV91bm9idHJ1c2l2ZV92YWxpZGF0aW9uX2Zvcm1fcmVzZXQiO2lmKCF0LmRhdGEoaSkpe3QuZGF0YShpLCEwKTt0cnl7dC5kYXRhKCJ2YWxpZGF0b3IiKS5yZXNldEZvcm0oKX1maW5hbGx5e3QucmVtb3ZlRGF0YShpKX10LmZpbmQoIi52YWxpZGF0aW9uLXN1bW1hcnktZXJyb3JzIikuYWRkQ2xhc3MoInZhbGlkYXRpb24tc3VtbWFyeS12YWxpZCIpLnJlbW92ZUNsYXNzKCJ2YWxpZGF0aW9uLXN1bW1hcnktZXJyb3JzIik7dC5maW5kKCIuZmllbGQtdmFsaWRhdGlvbi1lcnJvciIpLmFkZENsYXNzKCJmaWVsZC12YWxpZGF0aW9uLXZhbGlkIikucmVtb3ZlQ2xhc3MoImZpZWxkLXZhbGlkYXRpb24tZXJyb3IiKS5yZW1vdmVEYXRhKCJ1bm9idHJ1c2l2ZUNvbnRhaW5lciIpLmZpbmQoIj4qIikucmVtb3ZlRGF0YSgidW5vYnRydXNpdmVDb250YWluZXIiKX19ZnVuY3Rpb24gcyh0KXt2YXIgaT1uKHQpLGY9aS5kYXRhKHUpLHM9bi5wcm94eSh2LHQpLGU9ci51bm9idHJ1c2l2ZS5vcHRpb25zfHx7fSxvPWZ1bmN0aW9uKGkscil7dmFyIHU9ZVtpXTt1JiZuLmlzRnVuY3Rpb24odSkmJnUuYXBwbHkodCxyKX07cmV0dXJuIGZ8fChmPXtvcHRpb25zOntlcnJvckNsYXNzOmUuZXJyb3JDbGFzc3x8ImlucHV0LXZhbGlkYXRpb24tZXJyb3IiLGVycm9yRWxlbWVudDplLmVycm9yRWxlbWVudHx8InNwYW4iLGVycm9yUGxhY2VtZW50OmZ1bmN0aW9uKCl7Yy5hcHBseSh0LGFyZ3VtZW50cyk7bygiZXJyb3JQbGFjZW1lbnQiLGFyZ3VtZW50cyl9LGludmFsaWRIYW5kbGVyOmZ1bmN0aW9uKCl7bC5hcHBseSh0LGFyZ3VtZW50cyk7bygiaW52YWxpZEhhbmRsZXIiLGFyZ3VtZW50cyl9LG1lc3NhZ2VzOnt9LHJ1bGVzOnt9LHN1Y2Nlc3M6ZnVuY3Rpb24oKXthLmFwcGx5KHQsYXJndW1lbnRzKTtvKCJzdWNjZXNzIixhcmd1bWVudHMpfX0sYXR0YWNoVmFsaWRhdGlvbjpmdW5jdGlvbigpe2kub2ZmKCJyZXNldC4iK3Uscykub24oInJlc2V0LiIrdSxzKS52YWxpZGF0ZSh0aGlzLm9wdGlvbnMpfSx2YWxpZGF0ZTpmdW5jdGlvbigpe3JldHVybiBpLnZhbGlkYXRlKCksaS52YWxpZCgpfX0saS5kYXRhKHUsZikpLGZ9dmFyIHI9bi52YWxpZGF0b3IsdCx1PSJ1bm9idHJ1c2l2ZVZhbGlkYXRpb24iO3JldHVybiByLnVub2J0cnVzaXZlPXthZGFwdGVyczpbXSxwYXJzZUVsZW1lbnQ6ZnVuY3Rpb24odCxpKXt2YXIgdT1uKHQpLGY9dS5wYXJlbnRzKCJmb3JtIilbMF0scixlLG87ZiYmKHI9cyhmKSxyLm9wdGlvbnMucnVsZXNbdC5uYW1lXT1lPXt9LHIub3B0aW9ucy5tZXNzYWdlc1t0Lm5hbWVdPW89e30sbi5lYWNoKHRoaXMuYWRhcHRlcnMsZnVuY3Rpb24oKXt2YXIgaT0iZGF0YS12YWwtIit0aGlzLm5hbWUscj11LmF0dHIoaSkscz17fTtyIT09dW5kZWZpbmVkJiYoaSs9Ii0iLG4uZWFjaCh0aGlzLnBhcmFtcyxmdW5jdGlvbigpe3NbdGhpc109dS5hdHRyKGkrdGhpcyl9KSx0aGlzLmFkYXB0KHtlbGVtZW50OnQsZm9ybTpmLG1lc3NhZ2U6cixwYXJhbXM6cyxydWxlczplLG1lc3NhZ2VzOm99KSl9KSxuLmV4dGVuZChlLHtfX2R1bW15X186ITB9KSxpfHxyLmF0dGFjaFZhbGlkYXRpb24oKSl9LHBhcnNlOmZ1bmN0aW9uKHQpe3ZhciBpPW4odCksdT1pLnBhcmVudHMoKS5hZGRCYWNrKCkuZmlsdGVyKCJmb3JtIikuYWRkKGkuZmluZCgiZm9ybSIpKS5oYXMoIltkYXRhLXZhbD10cnVlXSIpO2kuZmluZCgiW2RhdGEtdmFsPXRydWVdIikuZWFjaChmdW5jdGlvbigpe3IudW5vYnRydXNpdmUucGFyc2VFbGVtZW50KHRoaXMsITApfSk7dS5lYWNoKGZ1bmN0aW9uKCl7dmFyIG49cyh0aGlzKTtuJiZuLmF0dGFjaFZhbGlkYXRpb24oKX0pfX0sdD1yLnVub2J0cnVzaXZlLmFkYXB0ZXJzLHQuYWRkPWZ1bmN0aW9uKG4sdCxpKXtyZXR1cm4gaXx8KGk9dCx0PVtdKSx0aGlzLnB1c2goe25hbWU6bixwYXJhbXM6dCxhZGFwdDppfSksdGhpc30sdC5hZGRCb29sPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIHRoaXMuYWRkKG4sZnVuY3Rpb24ocil7aShyLHR8fG4sITApfSl9LHQuYWRkTWluTWF4PWZ1bmN0aW9uKG4sdCxyLHUsZixlKXtyZXR1cm4gdGhpcy5hZGQobixbZnx8Im1pbiIsZXx8Im1heCJdLGZ1bmN0aW9uKG4pe3ZhciBmPW4ucGFyYW1zLm1pbixlPW4ucGFyYW1zLm1heDtmJiZlP2kobix1LFtmLGVdKTpmP2kobix0LGYpOmUmJmkobixyLGUpfSl9LHQuYWRkU2luZ2xlVmFsPWZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gdGhpcy5hZGQobixbdHx8InZhbCJdLGZ1bmN0aW9uKHUpe2kodSxyfHxuLHUucGFyYW1zW3RdKX0pfSxyLmFkZE1ldGhvZCgiX19kdW1teV9fIixmdW5jdGlvbigpe3JldHVybiEwfSksci5hZGRNZXRob2QoInJlZ2V4IixmdW5jdGlvbihuLHQsaSl7dmFyIHI7cmV0dXJuIHRoaXMub3B0aW9uYWwodCk/ITA6KHI9bmV3IFJlZ0V4cChpKS5leGVjKG4pLHImJnIuaW5kZXg9PT0wJiZyWzBdLmxlbmd0aD09PW4ubGVuZ3RoKX0pLHIuYWRkTWV0aG9kKCJub25hbHBoYW1pbiIsZnVuY3Rpb24obix0LGkpe3ZhciByO3JldHVybiBpJiYocj1uLm1hdGNoKC9cVy9nKSxyPXImJnIubGVuZ3RoPj1pKSxyfSksci5tZXRob2RzLmV4dGVuc2lvbj8odC5hZGRTaW5nbGVWYWwoImFjY2VwdCIsIm1pbXR5cGUiKSx0LmFkZFNpbmdsZVZhbCgiZXh0ZW5zaW9uIiwiZXh0ZW5zaW9uIikpOnQuYWRkU2luZ2xlVmFsKCJleHRlbnNpb24iLCJleHRlbnNpb24iLCJhY2NlcHQiKSx0LmFkZFNpbmdsZVZhbCgicmVnZXgiLCJwYXR0ZXJuIiksdC5hZGRCb29sKCJjcmVkaXRjYXJkIikuYWRkQm9vbCgiZGF0ZSIpLmFkZEJvb2woImRpZ2l0cyIpLmFkZEJvb2woImVtYWlsIikuYWRkQm9vbCgibnVtYmVyIikuYWRkQm9vbCgidXJsIiksdC5hZGRNaW5NYXgoImxlbmd0aCIsIm1pbmxlbmd0aCIsIm1heGxlbmd0aCIsInJhbmdlbGVuZ3RoIikuYWRkTWluTWF4KCJyYW5nZSIsIm1pbiIsIm1heCIsInJhbmdlIiksdC5hZGRNaW5NYXgoIm1pbmxlbmd0aCIsIm1pbmxlbmd0aCIpLmFkZE1pbk1heCgibWF4bGVuZ3RoIiwibWlubGVuZ3RoIiwibWF4bGVuZ3RoIiksdC5hZGQoImVxdWFsdG8iLFsib3RoZXIiXSxmdW5jdGlvbih0KXt2YXIgcj1lKHQuZWxlbWVudC5uYW1lKSx1PXQucGFyYW1zLm90aGVyLHM9byh1LHIpLGg9bih0LmZvcm0pLmZpbmQoIjppbnB1dCIpLmZpbHRlcigiW25hbWU9JyIrZihzKSsiJ10iKVswXTtpKHQsImVxdWFsVG8iLGgpfSksdC5hZGQoInJlcXVpcmVkIixmdW5jdGlvbihuKXsobi5lbGVtZW50LnRhZ05hbWUudG9VcHBlckNhc2UoKSE9PSJJTlBVVCJ8fG4uZWxlbWVudC50eXBlLnRvVXBwZXJDYXNlKCkhPT0iQ0hFQ0tCT1giKSYmaShuLCJyZXF1aXJlZCIsITApfSksdC5hZGQoInJlbW90ZSIsWyJ1cmwiLCJ0eXBlIiwiYWRkaXRpb25hbGZpZWxkcyJdLGZ1bmN0aW9uKHQpe3ZhciByPXt1cmw6dC5wYXJhbXMudXJsLHR5cGU6dC5wYXJhbXMudHlwZXx8IkdFVCIsZGF0YTp7fX0sdT1lKHQuZWxlbWVudC5uYW1lKTtuLmVhY2goaCh0LnBhcmFtcy5hZGRpdGlvbmFsZmllbGRzfHx0LmVsZW1lbnQubmFtZSksZnVuY3Rpb24oaSxlKXt2YXIgcz1vKGUsdSk7ci5kYXRhW3NdPWZ1bmN0aW9uKCl7dmFyIGk9bih0LmZvcm0pLmZpbmQoIjppbnB1dCIpLmZpbHRlcigiW25hbWU9JyIrZihzKSsiJ10iKTtyZXR1cm4gaS5pcygiOmNoZWNrYm94Iik/aS5maWx0ZXIoIjpjaGVja2VkIikudmFsKCl8fGkuZmlsdGVyKCI6aGlkZGVuIikudmFsKCl8fCIiOmkuaXMoIjpyYWRpbyIpP2kuZmlsdGVyKCI6Y2hlY2tlZCIpLnZhbCgpfHwiIjppLnZhbCgpfX0pO2kodCwicmVtb3RlIixyKX0pLHQuYWRkKCJwYXNzd29yZCIsWyJtaW4iLCJub25hbHBoYW1pbiIsInJlZ2V4Il0sZnVuY3Rpb24obil7bi5wYXJhbXMubWluJiZpKG4sIm1pbmxlbmd0aCIsbi5wYXJhbXMubWluKTtuLnBhcmFtcy5ub25hbHBoYW1pbiYmaShuLCJub25hbHBoYW1pbiIsbi5wYXJhbXMubm9uYWxwaGFtaW4pO24ucGFyYW1zLnJlZ2V4JiZpKG4sInJlZ2V4IixuLnBhcmFtcy5yZWdleCl9KSx0LmFkZCgiZmlsZWV4dGVuc2lvbnMiLFsiZXh0ZW5zaW9ucyJdLGZ1bmN0aW9uKG4pe2kobiwiZXh0ZW5zaW9uIixuLnBhcmFtcy5leHRlbnNpb25zKX0pLG4oZnVuY3Rpb24oKXtyLnVub2J0cnVzaXZlLnBhcnNlKGRvY3VtZW50KX0pLHIudW5vYnRydXNpdmV9KTsNCihmdW5jdGlvbihuKXtmdW5jdGlvbiBpKG4sdCl7Zm9yKHZhciBpPXdpbmRvdyxyPShufHwiIikuc3BsaXQoIi4iKTtpJiZyLmxlbmd0aDspaT1pW3Iuc2hpZnQoKV07cmV0dXJuIHR5cGVvZiBpPT0iZnVuY3Rpb24iP2k6KHQucHVzaChuKSxGdW5jdGlvbi5jb25zdHJ1Y3Rvci5hcHBseShudWxsLHQpKX1mdW5jdGlvbiByKG4pe3JldHVybiBuPT09IkdFVCJ8fG49PT0iUE9TVCJ9ZnVuY3Rpb24gZShuLHQpe3IodCl8fG4uc2V0UmVxdWVzdEhlYWRlcigiWC1IVFRQLU1ldGhvZC1PdmVycmlkZSIsdCl9ZnVuY3Rpb24gbyh0LGkscil7dmFyIHU7ci5pbmRleE9mKCJhcHBsaWNhdGlvbi94LWphdmFzY3JpcHQiKT09PS0xJiYodT0odC5nZXRBdHRyaWJ1dGUoImRhdGEtYWpheC1tb2RlIil8fCIiKS50b1VwcGVyQ2FzZSgpLG4odC5nZXRBdHRyaWJ1dGUoImRhdGEtYWpheC11cGRhdGUiKSkuZWFjaChmdW5jdGlvbih0LHIpe3ZhciBmO3N3aXRjaCh1KXtjYXNlIkJFRk9SRSI6Zj1yLmZpcnN0Q2hpbGQ7bigiPGRpdiAvPiIpLmh0bWwoaSkuY29udGVudHMoKS5lYWNoKGZ1bmN0aW9uKCl7ci5pbnNlcnRCZWZvcmUodGhpcyxmKX0pO2JyZWFrO2Nhc2UiQUZURVIiOm4oIjxkaXYgLz4iKS5odG1sKGkpLmNvbnRlbnRzKCkuZWFjaChmdW5jdGlvbigpe3IuYXBwZW5kQ2hpbGQodGhpcyl9KTticmVhaztkZWZhdWx0Om4ocikuaHRtbChpKX19KSl9ZnVuY3Rpb24gdSh0LHUpe3ZhciBzLGgsZixjOyhzPXQuZ2V0QXR0cmlidXRlKCJkYXRhLWFqYXgtY29uZmlybSIpLCFzfHx3aW5kb3cuY29uZmlybShzKSkmJihoPW4odC5nZXRBdHRyaWJ1dGUoImRhdGEtYWpheC1sb2FkaW5nIikpLGM9dC5nZXRBdHRyaWJ1dGUoImRhdGEtYWpheC1sb2FkaW5nLWR1cmF0aW9uIil8fDAsbi5leHRlbmQodSx7dHlwZTp0LmdldEF0dHJpYnV0ZSgiZGF0YS1hamF4LW1ldGhvZCIpfHx1bmRlZmluZWQsdXJsOnQuZ2V0QXR0cmlidXRlKCJkYXRhLWFqYXgtdXJsIil8fHVuZGVmaW5lZCxiZWZvcmVTZW5kOmZ1bmN0aW9uKG4pe3ZhciByO3JldHVybiBlKG4sZikscj1pKHQuZ2V0QXR0cmlidXRlKCJkYXRhLWFqYXgtYmVnaW4iKSxbInhociJdKS5hcHBseSh0aGlzLGFyZ3VtZW50cyksciE9PSExJiZoLnNob3coYykscn0sY29tcGxldGU6ZnVuY3Rpb24oKXtoLmhpZGUoYyk7aSh0LmdldEF0dHJpYnV0ZSgiZGF0YS1hamF4LWNvbXBsZXRlIiksWyJ4aHIiLCJzdGF0dXMiXSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxzdWNjZXNzOmZ1bmN0aW9uKG4scix1KXtvKHQsbix1LmdldFJlc3BvbnNlSGVhZGVyKCJDb250ZW50LVR5cGUiKXx8InRleHQvaHRtbCIpO2kodC5nZXRBdHRyaWJ1dGUoImRhdGEtYWpheC1zdWNjZXNzIiksWyJkYXRhIiwic3RhdHVzIiwieGhyIl0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZXJyb3I6aSh0LmdldEF0dHJpYnV0ZSgiZGF0YS1hamF4LWZhaWx1cmUiKSxbInhociIsInN0YXR1cyIsImVycm9yIl0pfSksdS5kYXRhLnB1c2goe25hbWU6IlgtUmVxdWVzdGVkLVdpdGgiLHZhbHVlOiJYTUxIdHRwUmVxdWVzdCJ9KSxmPXUudHlwZS50b1VwcGVyQ2FzZSgpLHIoZil8fCh1LnR5cGU9IlBPU1QiLHUuZGF0YS5wdXNoKHtuYW1lOiJYLUhUVFAtTWV0aG9kLU92ZXJyaWRlIix2YWx1ZTpmfSkpLG4uYWpheCh1KSl9ZnVuY3Rpb24gcyh0KXt2YXIgaT1uKHQpLmRhdGEoZik7cmV0dXJuIWl8fCFpLnZhbGlkYXRlfHxpLnZhbGlkYXRlKCl9dmFyIHQ9InVub2J0cnVzaXZlQWpheENsaWNrIixmPSJ1bm9idHJ1c2l2ZVZhbGlkYXRpb24iO24oZG9jdW1lbnQpLm9uKCJjbGljayIsImFbZGF0YS1hamF4PXRydWVdIixmdW5jdGlvbihuKXtuLnByZXZlbnREZWZhdWx0KCk7dSh0aGlzLHt1cmw6dGhpcy5ocmVmLHR5cGU6IkdFVCIsZGF0YTpbXX0pfSk7bihkb2N1bWVudCkub24oImNsaWNrIiwiZm9ybVtkYXRhLWFqYXg9dHJ1ZV0gaW5wdXRbdHlwZT1pbWFnZV0iLGZ1bmN0aW9uKGkpe3ZhciByPWkudGFyZ2V0Lm5hbWUsdT1uKGkudGFyZ2V0KSxmPXUucGFyZW50cygiZm9ybSIpWzBdLGU9dS5vZmZzZXQoKTtuKGYpLmRhdGEodCxbe25hbWU6cisiLngiLHZhbHVlOk1hdGgucm91bmQoaS5wYWdlWC1lLmxlZnQpfSx7bmFtZTpyKyIueSIsdmFsdWU6TWF0aC5yb3VuZChpLnBhZ2VZLWUudG9wKX1dKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bihmKS5yZW1vdmVEYXRhKHQpfSwwKX0pO24oZG9jdW1lbnQpLm9uKCJjbGljayIsImZvcm1bZGF0YS1hamF4PXRydWVdIDpzdWJtaXQiLGZ1bmN0aW9uKGkpe3ZhciByPWkudGFyZ2V0Lm5hbWUsdT1uKGkudGFyZ2V0KS5wYXJlbnRzKCJmb3JtIilbMF07bih1KS5kYXRhKHQscj9be25hbWU6cix2YWx1ZTppLnRhcmdldC52YWx1ZX1dOltdKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bih1KS5yZW1vdmVEYXRhKHQpfSwwKX0pO24oZG9jdW1lbnQpLm9uKCJzdWJtaXQiLCJmb3JtW2RhdGEtYWpheD10cnVlXSIsZnVuY3Rpb24oaSl7dmFyIHI9bih0aGlzKS5kYXRhKHQpfHxbXTsoaS5wcmV2ZW50RGVmYXVsdCgpLHModGhpcykpJiZ1KHRoaXMse3VybDp0aGlzLmFjdGlvbix0eXBlOnRoaXMubWV0aG9kfHwiR0VUIixkYXRhOnIuY29uY2F0KG4odGhpcykuc2VyaWFsaXplQXJyYXkoKSl9KX0pfSkoalF1ZXJ5KTsNCi8qIQ0KICAqIEJvb3RzdHJhcCB2NS4wLjIgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS8pDQogICogQ29weXJpZ2h0IDIwMTEtMjAyMSBUaGUgQm9vdHN0cmFwIEF1dGhvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ncmFwaHMvY29udHJpYnV0b3JzKQ0KICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKQ0KICAqLw0KIWZ1bmN0aW9uICh0LCBlKSB7ICJvYmplY3QiID09IHR5cGVvZiBleHBvcnRzICYmICJ1bmRlZmluZWQiICE9IHR5cGVvZiBtb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA9IGUoKSA6ICJmdW5jdGlvbiIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGUpIDogKHQgPSAidW5kZWZpbmVkIiAhPSB0eXBlb2YgZ2xvYmFsVGhpcyA/IGdsb2JhbFRoaXMgOiB0IHx8IHNlbGYpLmJvb3RzdHJhcCA9IGUoKSB9KHRoaXMsIChmdW5jdGlvbiAoKSB7ICJ1c2Ugc3RyaWN0IjsgY29uc3QgdCA9IHsgZmluZDogKHQsIGUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpID0+IFtdLmNvbmNhdCguLi5FbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsLmNhbGwoZSwgdCkpLCBmaW5kT25lOiAodCwgZSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgPT4gRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3Rvci5jYWxsKGUsIHQpLCBjaGlsZHJlbjogKHQsIGUpID0+IFtdLmNvbmNhdCguLi50LmNoaWxkcmVuKS5maWx0ZXIodCA9PiB0Lm1hdGNoZXMoZSkpLCBwYXJlbnRzKHQsIGUpIHsgY29uc3QgaSA9IFtdOyBsZXQgbiA9IHQucGFyZW50Tm9kZTsgZm9yICg7IG4gJiYgbi5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgMyAhPT0gbi5ub2RlVHlwZTspbi5tYXRjaGVzKGUpICYmIGkucHVzaChuKSwgbiA9IG4ucGFyZW50Tm9kZTsgcmV0dXJuIGkgfSwgcHJldih0LCBlKSB7IGxldCBpID0gdC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOyBmb3IgKDsgaTspIHsgaWYgKGkubWF0Y2hlcyhlKSkgcmV0dXJuIFtpXTsgaSA9IGkucHJldmlvdXNFbGVtZW50U2libGluZyB9IHJldHVybiBbXSB9LCBuZXh0KHQsIGUpIHsgbGV0IGkgPSB0Lm5leHRFbGVtZW50U2libGluZzsgZm9yICg7IGk7KSB7IGlmIChpLm1hdGNoZXMoZSkpIHJldHVybiBbaV07IGkgPSBpLm5leHRFbGVtZW50U2libGluZyB9IHJldHVybiBbXSB9IH0sIGUgPSB0ID0+IHsgZG8geyB0ICs9IE1hdGguZmxvb3IoMWU2ICogTWF0aC5yYW5kb20oKSkgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodCkpOyByZXR1cm4gdCB9LCBpID0gdCA9PiB7IGxldCBlID0gdC5nZXRBdHRyaWJ1dGUoImRhdGEtYnMtdGFyZ2V0Iik7IGlmICghZSB8fCAiIyIgPT09IGUpIHsgbGV0IGkgPSB0LmdldEF0dHJpYnV0ZSgiaHJlZiIpOyBpZiAoIWkgfHwgIWkuaW5jbHVkZXMoIiMiKSAmJiAhaS5zdGFydHNXaXRoKCIuIikpIHJldHVybiBudWxsOyBpLmluY2x1ZGVzKCIjIikgJiYgIWkuc3RhcnRzV2l0aCgiIyIpICYmIChpID0gIiMiICsgaS5zcGxpdCgiIyIpWzFdKSwgZSA9IGkgJiYgIiMiICE9PSBpID8gaS50cmltKCkgOiBudWxsIH0gcmV0dXJuIGUgfSwgbiA9IHQgPT4geyBjb25zdCBlID0gaSh0KTsgcmV0dXJuIGUgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKSA/IGUgOiBudWxsIH0sIHMgPSB0ID0+IHsgY29uc3QgZSA9IGkodCk7IHJldHVybiBlID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKSA6IG51bGwgfSwgbyA9IHQgPT4geyB0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCJ0cmFuc2l0aW9uZW5kIikpIH0sIHIgPSB0ID0+ICEoIXQgfHwgIm9iamVjdCIgIT0gdHlwZW9mIHQpICYmICh2b2lkIDAgIT09IHQuanF1ZXJ5ICYmICh0ID0gdFswXSksIHZvaWQgMCAhPT0gdC5ub2RlVHlwZSksIGEgPSBlID0+IHIoZSkgPyBlLmpxdWVyeSA/IGVbMF0gOiBlIDogInN0cmluZyIgPT0gdHlwZW9mIGUgJiYgZS5sZW5ndGggPiAwID8gdC5maW5kT25lKGUpIDogbnVsbCwgbCA9ICh0LCBlLCBpKSA9PiB7IE9iamVjdC5rZXlzKGkpLmZvckVhY2gobiA9PiB7IGNvbnN0IHMgPSBpW25dLCBvID0gZVtuXSwgYSA9IG8gJiYgcihvKSA/ICJlbGVtZW50IiA6IG51bGwgPT0gKGwgPSBvKSA/ICIiICsgbCA6IHt9LnRvU3RyaW5nLmNhbGwobCkubWF0Y2goL1xzKFthLXpdKykvaSlbMV0udG9Mb3dlckNhc2UoKTsgdmFyIGw7IGlmICghbmV3IFJlZ0V4cChzKS50ZXN0KGEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKGAke3QudG9VcHBlckNhc2UoKX06IE9wdGlvbiAiJHtufSIgcHJvdmlkZWQgdHlwZSAiJHthfSIgYnV0IGV4cGVjdGVkIHR5cGUgIiR7c30iLmApIH0pIH0sIGMgPSB0ID0+ICEoIXIodCkgfHwgMCA9PT0gdC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkgJiYgInZpc2libGUiID09PSBnZXRDb21wdXRlZFN0eWxlKHQpLmdldFByb3BlcnR5VmFsdWUoInZpc2liaWxpdHkiKSwgaCA9IHQgPT4gIXQgfHwgdC5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUgfHwgISF0LmNsYXNzTGlzdC5jb250YWlucygiZGlzYWJsZWQiKSB8fCAodm9pZCAwICE9PSB0LmRpc2FibGVkID8gdC5kaXNhYmxlZCA6IHQuaGFzQXR0cmlidXRlKCJkaXNhYmxlZCIpICYmICJmYWxzZSIgIT09IHQuZ2V0QXR0cmlidXRlKCJkaXNhYmxlZCIpKSwgZCA9IHQgPT4geyBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hdHRhY2hTaGFkb3cpIHJldHVybiBudWxsOyBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgdC5nZXRSb290Tm9kZSkgeyBjb25zdCBlID0gdC5nZXRSb290Tm9kZSgpOyByZXR1cm4gZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QgPyBlIDogbnVsbCB9IHJldHVybiB0IGluc3RhbmNlb2YgU2hhZG93Um9vdCA/IHQgOiB0LnBhcmVudE5vZGUgPyBkKHQucGFyZW50Tm9kZSkgOiBudWxsIH0sIHUgPSAoKSA9PiB7IH0sIGYgPSB0ID0+IHQub2Zmc2V0SGVpZ2h0LCBwID0gKCkgPT4geyBjb25zdCB7IGpRdWVyeTogdCB9ID0gd2luZG93OyByZXR1cm4gdCAmJiAhZG9jdW1lbnQuYm9keS5oYXNBdHRyaWJ1dGUoImRhdGEtYnMtbm8tanF1ZXJ5IikgPyB0IDogbnVsbCB9LCBtID0gW10sIGcgPSAoKSA9PiAicnRsIiA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRpciwgXyA9IHQgPT4geyB2YXIgZTsgZSA9ICgpID0+IHsgY29uc3QgZSA9IHAoKTsgaWYgKGUpIHsgY29uc3QgaSA9IHQuTkFNRSwgbiA9IGUuZm5baV07IGUuZm5baV0gPSB0LmpRdWVyeUludGVyZmFjZSwgZS5mbltpXS5Db25zdHJ1Y3RvciA9IHQsIGUuZm5baV0ubm9Db25mbGljdCA9ICgpID0+IChlLmZuW2ldID0gbiwgdC5qUXVlcnlJbnRlcmZhY2UpIH0gfSwgImxvYWRpbmciID09PSBkb2N1bWVudC5yZWFkeVN0YXRlID8gKG0ubGVuZ3RoIHx8IGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIkRPTUNvbnRlbnRMb2FkZWQiLCAoKSA9PiB7IG0uZm9yRWFjaCh0ID0+IHQoKSkgfSksIG0ucHVzaChlKSkgOiBlKCkgfSwgYiA9IHQgPT4geyAiZnVuY3Rpb24iID09IHR5cGVvZiB0ICYmIHQoKSB9LCB2ID0gKHQsIGUsIGkgPSAhMCkgPT4geyBpZiAoIWkpIHJldHVybiB2b2lkIGIodCk7IGNvbnN0IG4gPSAodCA9PiB7IGlmICghdCkgcmV0dXJuIDA7IGxldCB7IHRyYW5zaXRpb25EdXJhdGlvbjogZSwgdHJhbnNpdGlvbkRlbGF5OiBpIH0gPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0KTsgY29uc3QgbiA9IE51bWJlci5wYXJzZUZsb2F0KGUpLCBzID0gTnVtYmVyLnBhcnNlRmxvYXQoaSk7IHJldHVybiBuIHx8IHMgPyAoZSA9IGUuc3BsaXQoIiwiKVswXSwgaSA9IGkuc3BsaXQoIiwiKVswXSwgMWUzICogKE51bWJlci5wYXJzZUZsb2F0KGUpICsgTnVtYmVyLnBhcnNlRmxvYXQoaSkpKSA6IDAgfSkoZSkgKyA1OyBsZXQgcyA9ICExOyBjb25zdCByID0gKHsgdGFyZ2V0OiBpIH0pID0+IHsgaSA9PT0gZSAmJiAocyA9ICEwLCBlLnJlbW92ZUV2ZW50TGlzdGVuZXIoInRyYW5zaXRpb25lbmQiLCByKSwgYih0KSkgfTsgZS5hZGRFdmVudExpc3RlbmVyKCJ0cmFuc2l0aW9uZW5kIiwgciksIHNldFRpbWVvdXQoKCkgPT4geyBzIHx8IG8oZSkgfSwgbikgfSwgeSA9ICh0LCBlLCBpLCBuKSA9PiB7IGxldCBzID0gdC5pbmRleE9mKGUpOyBpZiAoLTEgPT09IHMpIHJldHVybiB0WyFpICYmIG4gPyB0Lmxlbmd0aCAtIDEgOiAwXTsgY29uc3QgbyA9IHQubGVuZ3RoOyByZXR1cm4gcyArPSBpID8gMSA6IC0xLCBuICYmIChzID0gKHMgKyBvKSAlIG8pLCB0W01hdGgubWF4KDAsIE1hdGgubWluKHMsIG8gLSAxKSldIH0sIHcgPSAvW14uXSooPz1cLi4qKVwufC4qLywgRSA9IC9cLi4qLywgQSA9IC86OlxkKyQvLCBUID0ge307IGxldCBPID0gMTsgY29uc3QgQyA9IHsgbW91c2VlbnRlcjogIm1vdXNlb3ZlciIsIG1vdXNlbGVhdmU6ICJtb3VzZW91dCIgfSwgayA9IC9eKG1vdXNlZW50ZXJ8bW91c2VsZWF2ZSkvaSwgTCA9IG5ldyBTZXQoWyJjbGljayIsICJkYmxjbGljayIsICJtb3VzZXVwIiwgIm1vdXNlZG93biIsICJjb250ZXh0bWVudSIsICJtb3VzZXdoZWVsIiwgIkRPTU1vdXNlU2Nyb2xsIiwgIm1vdXNlb3ZlciIsICJtb3VzZW91dCIsICJtb3VzZW1vdmUiLCAic2VsZWN0c3RhcnQiLCAic2VsZWN0ZW5kIiwgImtleWRvd24iLCAia2V5cHJlc3MiLCAia2V5dXAiLCAib3JpZW50YXRpb25jaGFuZ2UiLCAidG91Y2hzdGFydCIsICJ0b3VjaG1vdmUiLCAidG91Y2hlbmQiLCAidG91Y2hjYW5jZWwiLCAicG9pbnRlcmRvd24iLCAicG9pbnRlcm1vdmUiLCAicG9pbnRlcnVwIiwgInBvaW50ZXJsZWF2ZSIsICJwb2ludGVyY2FuY2VsIiwgImdlc3R1cmVzdGFydCIsICJnZXN0dXJlY2hhbmdlIiwgImdlc3R1cmVlbmQiLCAiZm9jdXMiLCAiYmx1ciIsICJjaGFuZ2UiLCAicmVzZXQiLCAic2VsZWN0IiwgInN1Ym1pdCIsICJmb2N1c2luIiwgImZvY3Vzb3V0IiwgImxvYWQiLCAidW5sb2FkIiwgImJlZm9yZXVubG9hZCIsICJyZXNpemUiLCAibW92ZSIsICJET01Db250ZW50TG9hZGVkIiwgInJlYWR5c3RhdGVjaGFuZ2UiLCAiZXJyb3IiLCAiYWJvcnQiLCAic2Nyb2xsIl0pOyBmdW5jdGlvbiB4KHQsIGUpIHsgcmV0dXJuIGUgJiYgYCR7ZX06OiR7TysrfWAgfHwgdC51aWRFdmVudCB8fCBPKysgfSBmdW5jdGlvbiBEKHQpIHsgY29uc3QgZSA9IHgodCk7IHJldHVybiB0LnVpZEV2ZW50ID0gZSwgVFtlXSA9IFRbZV0gfHwge30sIFRbZV0gfSBmdW5jdGlvbiBTKHQsIGUsIGkgPSBudWxsKSB7IGNvbnN0IG4gPSBPYmplY3Qua2V5cyh0KTsgZm9yIChsZXQgcyA9IDAsIG8gPSBuLmxlbmd0aDsgcyA8IG87IHMrKykgeyBjb25zdCBvID0gdFtuW3NdXTsgaWYgKG8ub3JpZ2luYWxIYW5kbGVyID09PSBlICYmIG8uZGVsZWdhdGlvblNlbGVjdG9yID09PSBpKSByZXR1cm4gbyB9IHJldHVybiBudWxsIH0gZnVuY3Rpb24gSSh0LCBlLCBpKSB7IGNvbnN0IG4gPSAic3RyaW5nIiA9PSB0eXBlb2YgZSwgcyA9IG4gPyBpIDogZTsgbGV0IG8gPSBNKHQpOyByZXR1cm4gTC5oYXMobykgfHwgKG8gPSB0KSwgW24sIHMsIG9dIH0gZnVuY3Rpb24gTih0LCBlLCBpLCBuLCBzKSB7IGlmICgic3RyaW5nIiAhPSB0eXBlb2YgZSB8fCAhdCkgcmV0dXJuOyBpZiAoaSB8fCAoaSA9IG4sIG4gPSBudWxsKSwgay50ZXN0KGUpKSB7IGNvbnN0IHQgPSB0ID0+IGZ1bmN0aW9uIChlKSB7IGlmICghZS5yZWxhdGVkVGFyZ2V0IHx8IGUucmVsYXRlZFRhcmdldCAhPT0gZS5kZWxlZ2F0ZVRhcmdldCAmJiAhZS5kZWxlZ2F0ZVRhcmdldC5jb250YWlucyhlLnJlbGF0ZWRUYXJnZXQpKSByZXR1cm4gdC5jYWxsKHRoaXMsIGUpIH07IG4gPyBuID0gdChuKSA6IGkgPSB0KGkpIH0gY29uc3QgW28sIHIsIGFdID0gSShlLCBpLCBuKSwgbCA9IEQodCksIGMgPSBsW2FdIHx8IChsW2FdID0ge30pLCBoID0gUyhjLCByLCBvID8gaSA6IG51bGwpOyBpZiAoaCkgcmV0dXJuIHZvaWQgKGgub25lT2ZmID0gaC5vbmVPZmYgJiYgcyk7IGNvbnN0IGQgPSB4KHIsIGUucmVwbGFjZSh3LCAiIikpLCB1ID0gbyA/IGZ1bmN0aW9uICh0LCBlLCBpKSB7IHJldHVybiBmdW5jdGlvbiBuKHMpIHsgY29uc3QgbyA9IHQucXVlcnlTZWxlY3RvckFsbChlKTsgZm9yIChsZXQgeyB0YXJnZXQ6IHIgfSA9IHM7IHIgJiYgciAhPT0gdGhpczsgciA9IHIucGFyZW50Tm9kZSlmb3IgKGxldCBhID0gby5sZW5ndGg7IGEtLTspaWYgKG9bYV0gPT09IHIpIHJldHVybiBzLmRlbGVnYXRlVGFyZ2V0ID0gciwgbi5vbmVPZmYgJiYgUC5vZmYodCwgcy50eXBlLCBlLCBpKSwgaS5hcHBseShyLCBbc10pOyByZXR1cm4gbnVsbCB9IH0odCwgaSwgbikgOiBmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gZnVuY3Rpb24gaShuKSB7IHJldHVybiBuLmRlbGVnYXRlVGFyZ2V0ID0gdCwgaS5vbmVPZmYgJiYgUC5vZmYodCwgbi50eXBlLCBlKSwgZS5hcHBseSh0LCBbbl0pIH0gfSh0LCBpKTsgdS5kZWxlZ2F0aW9uU2VsZWN0b3IgPSBvID8gaSA6IG51bGwsIHUub3JpZ2luYWxIYW5kbGVyID0gciwgdS5vbmVPZmYgPSBzLCB1LnVpZEV2ZW50ID0gZCwgY1tkXSA9IHUsIHQuYWRkRXZlbnRMaXN0ZW5lcihhLCB1LCBvKSB9IGZ1bmN0aW9uIGoodCwgZSwgaSwgbiwgcykgeyBjb25zdCBvID0gUyhlW2ldLCBuLCBzKTsgbyAmJiAodC5yZW1vdmVFdmVudExpc3RlbmVyKGksIG8sIEJvb2xlYW4ocykpLCBkZWxldGUgZVtpXVtvLnVpZEV2ZW50XSkgfSBmdW5jdGlvbiBNKHQpIHsgcmV0dXJuIHQgPSB0LnJlcGxhY2UoRSwgIiIpLCBDW3RdIHx8IHQgfSBjb25zdCBQID0geyBvbih0LCBlLCBpLCBuKSB7IE4odCwgZSwgaSwgbiwgITEpIH0sIG9uZSh0LCBlLCBpLCBuKSB7IE4odCwgZSwgaSwgbiwgITApIH0sIG9mZih0LCBlLCBpLCBuKSB7IGlmICgic3RyaW5nIiAhPSB0eXBlb2YgZSB8fCAhdCkgcmV0dXJuOyBjb25zdCBbcywgbywgcl0gPSBJKGUsIGksIG4pLCBhID0gciAhPT0gZSwgbCA9IEQodCksIGMgPSBlLnN0YXJ0c1dpdGgoIi4iKTsgaWYgKHZvaWQgMCAhPT0gbykgeyBpZiAoIWwgfHwgIWxbcl0pIHJldHVybjsgcmV0dXJuIHZvaWQgaih0LCBsLCByLCBvLCBzID8gaSA6IG51bGwpIH0gYyAmJiBPYmplY3Qua2V5cyhsKS5mb3JFYWNoKGkgPT4geyAhZnVuY3Rpb24gKHQsIGUsIGksIG4pIHsgY29uc3QgcyA9IGVbaV0gfHwge307IE9iamVjdC5rZXlzKHMpLmZvckVhY2gobyA9PiB7IGlmIChvLmluY2x1ZGVzKG4pKSB7IGNvbnN0IG4gPSBzW29dOyBqKHQsIGUsIGksIG4ub3JpZ2luYWxIYW5kbGVyLCBuLmRlbGVnYXRpb25TZWxlY3RvcikgfSB9KSB9KHQsIGwsIGksIGUuc2xpY2UoMSkpIH0pOyBjb25zdCBoID0gbFtyXSB8fCB7fTsgT2JqZWN0LmtleXMoaCkuZm9yRWFjaChpID0+IHsgY29uc3QgbiA9IGkucmVwbGFjZShBLCAiIik7IGlmICghYSB8fCBlLmluY2x1ZGVzKG4pKSB7IGNvbnN0IGUgPSBoW2ldOyBqKHQsIGwsIHIsIGUub3JpZ2luYWxIYW5kbGVyLCBlLmRlbGVnYXRpb25TZWxlY3RvcikgfSB9KSB9LCB0cmlnZ2VyKHQsIGUsIGkpIHsgaWYgKCJzdHJpbmciICE9IHR5cGVvZiBlIHx8ICF0KSByZXR1cm4gbnVsbDsgY29uc3QgbiA9IHAoKSwgcyA9IE0oZSksIG8gPSBlICE9PSBzLCByID0gTC5oYXMocyk7IGxldCBhLCBsID0gITAsIGMgPSAhMCwgaCA9ICExLCBkID0gbnVsbDsgcmV0dXJuIG8gJiYgbiAmJiAoYSA9IG4uRXZlbnQoZSwgaSksIG4odCkudHJpZ2dlcihhKSwgbCA9ICFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCksIGMgPSAhYS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpLCBoID0gYS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSksIHIgPyAoZCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCJIVE1MRXZlbnRzIiksIGQuaW5pdEV2ZW50KHMsIGwsICEwKSkgOiBkID0gbmV3IEN1c3RvbUV2ZW50KGUsIHsgYnViYmxlczogbCwgY2FuY2VsYWJsZTogITAgfSksIHZvaWQgMCAhPT0gaSAmJiBPYmplY3Qua2V5cyhpKS5mb3JFYWNoKHQgPT4geyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZCwgdCwgeyBnZXQ6ICgpID0+IGlbdF0gfSkgfSksIGggJiYgZC5wcmV2ZW50RGVmYXVsdCgpLCBjICYmIHQuZGlzcGF0Y2hFdmVudChkKSwgZC5kZWZhdWx0UHJldmVudGVkICYmIHZvaWQgMCAhPT0gYSAmJiBhLnByZXZlbnREZWZhdWx0KCksIGQgfSB9LCBIID0gbmV3IE1hcDsgdmFyIFIgPSB7IHNldCh0LCBlLCBpKSB7IEguaGFzKHQpIHx8IEguc2V0KHQsIG5ldyBNYXApOyBjb25zdCBuID0gSC5nZXQodCk7IG4uaGFzKGUpIHx8IDAgPT09IG4uc2l6ZSA/IG4uc2V0KGUsIGkpIDogY29uc29sZS5lcnJvcihgQm9vdHN0cmFwIGRvZXNuJ3QgYWxsb3cgbW9yZSB0aGFuIG9uZSBpbnN0YW5jZSBwZXIgZWxlbWVudC4gQm91bmQgaW5zdGFuY2U6ICR7QXJyYXkuZnJvbShuLmtleXMoKSlbMF19LmApIH0sIGdldDogKHQsIGUpID0+IEguaGFzKHQpICYmIEguZ2V0KHQpLmdldChlKSB8fCBudWxsLCByZW1vdmUodCwgZSkgeyBpZiAoIUguaGFzKHQpKSByZXR1cm47IGNvbnN0IGkgPSBILmdldCh0KTsgaS5kZWxldGUoZSksIDAgPT09IGkuc2l6ZSAmJiBILmRlbGV0ZSh0KSB9IH07IGNsYXNzIEIgeyBjb25zdHJ1Y3Rvcih0KSB7ICh0ID0gYSh0KSkgJiYgKHRoaXMuX2VsZW1lbnQgPSB0LCBSLnNldCh0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKSkgfSBkaXNwb3NlKCkgeyBSLnJlbW92ZSh0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZKSwgUC5vZmYodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpLCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKS5mb3JFYWNoKHQgPT4geyB0aGlzW3RdID0gbnVsbCB9KSB9IF9xdWV1ZUNhbGxiYWNrKHQsIGUsIGkgPSAhMCkgeyB2KHQsIGUsIGkpIH0gc3RhdGljIGdldEluc3RhbmNlKHQpIHsgcmV0dXJuIFIuZ2V0KHQsIHRoaXMuREFUQV9LRVkpIH0gc3RhdGljIGdldE9yQ3JlYXRlSW5zdGFuY2UodCwgZSA9IHt9KSB7IHJldHVybiB0aGlzLmdldEluc3RhbmNlKHQpIHx8IG5ldyB0aGlzKHQsICJvYmplY3QiID09IHR5cGVvZiBlID8gZSA6IG51bGwpIH0gc3RhdGljIGdldCBWRVJTSU9OKCkgeyByZXR1cm4gIjUuMC4yIiB9IHN0YXRpYyBnZXQgTkFNRSgpIHsgdGhyb3cgbmV3IEVycm9yKCdZb3UgaGF2ZSB0byBpbXBsZW1lbnQgdGhlIHN0YXRpYyBtZXRob2QgIk5BTUUiLCBmb3IgZWFjaCBjb21wb25lbnQhJykgfSBzdGF0aWMgZ2V0IERBVEFfS0VZKCkgeyByZXR1cm4gImJzLiIgKyB0aGlzLk5BTUUgfSBzdGF0aWMgZ2V0IEVWRU5UX0tFWSgpIHsgcmV0dXJuICIuIiArIHRoaXMuREFUQV9LRVkgfSB9IGNsYXNzIFcgZXh0ZW5kcyBCIHsgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gImFsZXJ0IiB9IGNsb3NlKHQpIHsgY29uc3QgZSA9IHQgPyB0aGlzLl9nZXRSb290RWxlbWVudCh0KSA6IHRoaXMuX2VsZW1lbnQsIGkgPSB0aGlzLl90cmlnZ2VyQ2xvc2VFdmVudChlKTsgbnVsbCA9PT0gaSB8fCBpLmRlZmF1bHRQcmV2ZW50ZWQgfHwgdGhpcy5fcmVtb3ZlRWxlbWVudChlKSB9IF9nZXRSb290RWxlbWVudCh0KSB7IHJldHVybiBzKHQpIHx8IHQuY2xvc2VzdCgiLmFsZXJ0IikgfSBfdHJpZ2dlckNsb3NlRXZlbnQodCkgeyByZXR1cm4gUC50cmlnZ2VyKHQsICJjbG9zZS5icy5hbGVydCIpIH0gX3JlbW92ZUVsZW1lbnQodCkgeyB0LmNsYXNzTGlzdC5yZW1vdmUoInNob3ciKTsgY29uc3QgZSA9IHQuY2xhc3NMaXN0LmNvbnRhaW5zKCJmYWRlIik7IHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4gdGhpcy5fZGVzdHJveUVsZW1lbnQodCksIHQsIGUpIH0gX2Rlc3Ryb3lFbGVtZW50KHQpIHsgdC5yZW1vdmUoKSwgUC50cmlnZ2VyKHQsICJjbG9zZWQuYnMuYWxlcnQiKSB9IHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCkgeyByZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbiAoKSB7IGNvbnN0IGUgPSBXLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyk7ICJjbG9zZSIgPT09IHQgJiYgZVt0XSh0aGlzKSB9KSkgfSBzdGF0aWMgaGFuZGxlRGlzbWlzcyh0KSB7IHJldHVybiBmdW5jdGlvbiAoZSkgeyBlICYmIGUucHJldmVudERlZmF1bHQoKSwgdC5jbG9zZSh0aGlzKSB9IH0gfSBQLm9uKGRvY3VtZW50LCAiY2xpY2suYnMuYWxlcnQuZGF0YS1hcGkiLCAnW2RhdGEtYnMtZGlzbWlzcz0iYWxlcnQiXScsIFcuaGFuZGxlRGlzbWlzcyhuZXcgVykpLCBfKFcpOyBjbGFzcyBxIGV4dGVuZHMgQiB7IHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuICJidXR0b24iIH0gdG9nZ2xlKCkgeyB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgiYXJpYS1wcmVzc2VkIiwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCJhY3RpdmUiKSkgfSBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpIHsgcmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24gKCkgeyBjb25zdCBlID0gcS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpOyAidG9nZ2xlIiA9PT0gdCAmJiBlW3RdKCkgfSkpIH0gfSBmdW5jdGlvbiB6KHQpIHsgcmV0dXJuICJ0cnVlIiA9PT0gdCB8fCAiZmFsc2UiICE9PSB0ICYmICh0ID09PSBOdW1iZXIodCkudG9TdHJpbmcoKSA/IE51bWJlcih0KSA6ICIiID09PSB0IHx8ICJudWxsIiA9PT0gdCA/IG51bGwgOiB0KSB9IGZ1bmN0aW9uICQodCkgeyByZXR1cm4gdC5yZXBsYWNlKC9bQS1aXS9nLCB0ID0+ICItIiArIHQudG9Mb3dlckNhc2UoKSkgfSBQLm9uKGRvY3VtZW50LCAiY2xpY2suYnMuYnV0dG9uLmRhdGEtYXBpIiwgJ1tkYXRhLWJzLXRvZ2dsZT0iYnV0dG9uIl0nLCB0ID0+IHsgdC5wcmV2ZW50RGVmYXVsdCgpOyBjb25zdCBlID0gdC50YXJnZXQuY2xvc2VzdCgnW2RhdGEtYnMtdG9nZ2xlPSJidXR0b24iXScpOyBxLmdldE9yQ3JlYXRlSW5zdGFuY2UoZSkudG9nZ2xlKCkgfSksIF8ocSk7IGNvbnN0IFUgPSB7IHNldERhdGFBdHRyaWJ1dGUodCwgZSwgaSkgeyB0LnNldEF0dHJpYnV0ZSgiZGF0YS1icy0iICsgJChlKSwgaSkgfSwgcmVtb3ZlRGF0YUF0dHJpYnV0ZSh0LCBlKSB7IHQucmVtb3ZlQXR0cmlidXRlKCJkYXRhLWJzLSIgKyAkKGUpKSB9LCBnZXREYXRhQXR0cmlidXRlcyh0KSB7IGlmICghdCkgcmV0dXJuIHt9OyBjb25zdCBlID0ge307IHJldHVybiBPYmplY3Qua2V5cyh0LmRhdGFzZXQpLmZpbHRlcih0ID0+IHQuc3RhcnRzV2l0aCgiYnMiKSkuZm9yRWFjaChpID0+IHsgbGV0IG4gPSBpLnJlcGxhY2UoL15icy8sICIiKTsgbiA9IG4uY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBuLnNsaWNlKDEsIG4ubGVuZ3RoKSwgZVtuXSA9IHoodC5kYXRhc2V0W2ldKSB9KSwgZSB9LCBnZXREYXRhQXR0cmlidXRlOiAodCwgZSkgPT4geih0LmdldEF0dHJpYnV0ZSgiZGF0YS1icy0iICsgJChlKSkpLCBvZmZzZXQodCkgeyBjb25zdCBlID0gdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgcmV0dXJuIHsgdG9wOiBlLnRvcCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLCBsZWZ0OiBlLmxlZnQgKyBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgfSB9LCBwb3NpdGlvbjogdCA9PiAoeyB0b3A6IHQub2Zmc2V0VG9wLCBsZWZ0OiB0Lm9mZnNldExlZnQgfSkgfSwgRiA9IHsgaW50ZXJ2YWw6IDVlMywga2V5Ym9hcmQ6ICEwLCBzbGlkZTogITEsIHBhdXNlOiAiaG92ZXIiLCB3cmFwOiAhMCwgdG91Y2g6ICEwIH0sIFYgPSB7IGludGVydmFsOiAiKG51bWJlcnxib29sZWFuKSIsIGtleWJvYXJkOiAiYm9vbGVhbiIsIHNsaWRlOiAiKGJvb2xlYW58c3RyaW5nKSIsIHBhdXNlOiAiKHN0cmluZ3xib29sZWFuKSIsIHdyYXA6ICJib29sZWFuIiwgdG91Y2g6ICJib29sZWFuIiB9LCBLID0gIm5leHQiLCBYID0gInByZXYiLCBZID0gImxlZnQiLCBRID0gInJpZ2h0IiwgRyA9IHsgQXJyb3dMZWZ0OiBRLCBBcnJvd1JpZ2h0OiBZIH07IGNsYXNzIFogZXh0ZW5kcyBCIHsgY29uc3RydWN0b3IoZSwgaSkgeyBzdXBlcihlKSwgdGhpcy5faXRlbXMgPSBudWxsLCB0aGlzLl9pbnRlcnZhbCA9IG51bGwsIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBudWxsLCB0aGlzLl9pc1BhdXNlZCA9ICExLCB0aGlzLl9pc1NsaWRpbmcgPSAhMSwgdGhpcy50b3VjaFRpbWVvdXQgPSBudWxsLCB0aGlzLnRvdWNoU3RhcnRYID0gMCwgdGhpcy50b3VjaERlbHRhWCA9IDAsIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhpKSwgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSB0LmZpbmRPbmUoIi5jYXJvdXNlbC1pbmRpY2F0b3JzIiwgdGhpcy5fZWxlbWVudCksIHRoaXMuX3RvdWNoU3VwcG9ydGVkID0gIm9udG91Y2hzdGFydCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDAsIHRoaXMuX3BvaW50ZXJFdmVudCA9IEJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudCksIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCkgfSBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7IHJldHVybiBGIH0gc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gImNhcm91c2VsIiB9IG5leHQoKSB7IHRoaXMuX3NsaWRlKEspIH0gbmV4dFdoZW5WaXNpYmxlKCkgeyAhZG9jdW1lbnQuaGlkZGVuICYmIGModGhpcy5fZWxlbWVudCkgJiYgdGhpcy5uZXh0KCkgfSBwcmV2KCkgeyB0aGlzLl9zbGlkZShYKSB9IHBhdXNlKGUpIHsgZSB8fCAodGhpcy5faXNQYXVzZWQgPSAhMCksIHQuZmluZE9uZSgiLmNhcm91c2VsLWl0ZW0tbmV4dCwgLmNhcm91c2VsLWl0ZW0tcHJldiIsIHRoaXMuX2VsZW1lbnQpICYmIChvKHRoaXMuX2VsZW1lbnQpLCB0aGlzLmN5Y2xlKCEwKSksIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpLCB0aGlzLl9pbnRlcnZhbCA9IG51bGwgfSBjeWNsZSh0KSB7IHQgfHwgKHRoaXMuX2lzUGF1c2VkID0gITEpLCB0aGlzLl9pbnRlcnZhbCAmJiAoY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCksIHRoaXMuX2ludGVydmFsID0gbnVsbCksIHRoaXMuX2NvbmZpZyAmJiB0aGlzLl9jb25maWcuaW50ZXJ2YWwgJiYgIXRoaXMuX2lzUGF1c2VkICYmICh0aGlzLl91cGRhdGVJbnRlcnZhbCgpLCB0aGlzLl9pbnRlcnZhbCA9IHNldEludGVydmFsKChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLm5leHRXaGVuVmlzaWJsZSA6IHRoaXMubmV4dCkuYmluZCh0aGlzKSwgdGhpcy5fY29uZmlnLmludGVydmFsKSkgfSB0byhlKSB7IHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSB0LmZpbmRPbmUoIi5hY3RpdmUuY2Fyb3VzZWwtaXRlbSIsIHRoaXMuX2VsZW1lbnQpOyBjb25zdCBpID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2FjdGl2ZUVsZW1lbnQpOyBpZiAoZSA+IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEgfHwgZSA8IDApIHJldHVybjsgaWYgKHRoaXMuX2lzU2xpZGluZykgcmV0dXJuIHZvaWQgUC5vbmUodGhpcy5fZWxlbWVudCwgInNsaWQuYnMuY2Fyb3VzZWwiLCAoKSA9PiB0aGlzLnRvKGUpKTsgaWYgKGkgPT09IGUpIHJldHVybiB0aGlzLnBhdXNlKCksIHZvaWQgdGhpcy5jeWNsZSgpOyBjb25zdCBuID0gZSA+IGkgPyBLIDogWDsgdGhpcy5fc2xpZGUobiwgdGhpcy5faXRlbXNbZV0pIH0gX2dldENvbmZpZyh0KSB7IHJldHVybiB0ID0geyAuLi5GLCAuLi5VLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLCAuLi4ib2JqZWN0IiA9PSB0eXBlb2YgdCA/IHQgOiB7fSB9LCBsKCJjYXJvdXNlbCIsIHQsIFYpLCB0IH0gX2hhbmRsZVN3aXBlKCkgeyBjb25zdCB0ID0gTWF0aC5hYnModGhpcy50b3VjaERlbHRhWCk7IGlmICh0IDw9IDQwKSByZXR1cm47IGNvbnN0IGUgPSB0IC8gdGhpcy50b3VjaERlbHRhWDsgdGhpcy50b3VjaERlbHRhWCA9IDAsIGUgJiYgdGhpcy5fc2xpZGUoZSA+IDAgPyBRIDogWSkgfSBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7IHRoaXMuX2NvbmZpZy5rZXlib2FyZCAmJiBQLm9uKHRoaXMuX2VsZW1lbnQsICJrZXlkb3duLmJzLmNhcm91c2VsIiwgdCA9PiB0aGlzLl9rZXlkb3duKHQpKSwgImhvdmVyIiA9PT0gdGhpcy5fY29uZmlnLnBhdXNlICYmIChQLm9uKHRoaXMuX2VsZW1lbnQsICJtb3VzZWVudGVyLmJzLmNhcm91c2VsIiwgdCA9PiB0aGlzLnBhdXNlKHQpKSwgUC5vbih0aGlzLl9lbGVtZW50LCAibW91c2VsZWF2ZS5icy5jYXJvdXNlbCIsIHQgPT4gdGhpcy5jeWNsZSh0KSkpLCB0aGlzLl9jb25maWcudG91Y2ggJiYgdGhpcy5fdG91Y2hTdXBwb3J0ZWQgJiYgdGhpcy5fYWRkVG91Y2hFdmVudExpc3RlbmVycygpIH0gX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKSB7IGNvbnN0IGUgPSB0ID0+IHsgIXRoaXMuX3BvaW50ZXJFdmVudCB8fCAicGVuIiAhPT0gdC5wb2ludGVyVHlwZSAmJiAidG91Y2giICE9PSB0LnBvaW50ZXJUeXBlID8gdGhpcy5fcG9pbnRlckV2ZW50IHx8ICh0aGlzLnRvdWNoU3RhcnRYID0gdC50b3VjaGVzWzBdLmNsaWVudFgpIDogdGhpcy50b3VjaFN0YXJ0WCA9IHQuY2xpZW50WCB9LCBpID0gdCA9PiB7IHRoaXMudG91Y2hEZWx0YVggPSB0LnRvdWNoZXMgJiYgdC50b3VjaGVzLmxlbmd0aCA+IDEgPyAwIDogdC50b3VjaGVzWzBdLmNsaWVudFggLSB0aGlzLnRvdWNoU3RhcnRYIH0sIG4gPSB0ID0+IHsgIXRoaXMuX3BvaW50ZXJFdmVudCB8fCAicGVuIiAhPT0gdC5wb2ludGVyVHlwZSAmJiAidG91Y2giICE9PSB0LnBvaW50ZXJUeXBlIHx8ICh0aGlzLnRvdWNoRGVsdGFYID0gdC5jbGllbnRYIC0gdGhpcy50b3VjaFN0YXJ0WCksIHRoaXMuX2hhbmRsZVN3aXBlKCksICJob3ZlciIgPT09IHRoaXMuX2NvbmZpZy5wYXVzZSAmJiAodGhpcy5wYXVzZSgpLCB0aGlzLnRvdWNoVGltZW91dCAmJiBjbGVhclRpbWVvdXQodGhpcy50b3VjaFRpbWVvdXQpLCB0aGlzLnRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQodCA9PiB0aGlzLmN5Y2xlKHQpLCA1MDAgKyB0aGlzLl9jb25maWcuaW50ZXJ2YWwpKSB9OyB0LmZpbmQoIi5jYXJvdXNlbC1pdGVtIGltZyIsIHRoaXMuX2VsZW1lbnQpLmZvckVhY2godCA9PiB7IFAub24odCwgImRyYWdzdGFydC5icy5jYXJvdXNlbCIsIHQgPT4gdC5wcmV2ZW50RGVmYXVsdCgpKSB9KSwgdGhpcy5fcG9pbnRlckV2ZW50ID8gKFAub24odGhpcy5fZWxlbWVudCwgInBvaW50ZXJkb3duLmJzLmNhcm91c2VsIiwgdCA9PiBlKHQpKSwgUC5vbih0aGlzLl9lbGVtZW50LCAicG9pbnRlcnVwLmJzLmNhcm91c2VsIiwgdCA9PiBuKHQpKSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKCJwb2ludGVyLWV2ZW50IikpIDogKFAub24odGhpcy5fZWxlbWVudCwgInRvdWNoc3RhcnQuYnMuY2Fyb3VzZWwiLCB0ID0+IGUodCkpLCBQLm9uKHRoaXMuX2VsZW1lbnQsICJ0b3VjaG1vdmUuYnMuY2Fyb3VzZWwiLCB0ID0+IGkodCkpLCBQLm9uKHRoaXMuX2VsZW1lbnQsICJ0b3VjaGVuZC5icy5jYXJvdXNlbCIsIHQgPT4gbih0KSkpIH0gX2tleWRvd24odCkgeyBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdCh0LnRhcmdldC50YWdOYW1lKSkgcmV0dXJuOyBjb25zdCBlID0gR1t0LmtleV07IGUgJiYgKHQucHJldmVudERlZmF1bHQoKSwgdGhpcy5fc2xpZGUoZSkpIH0gX2dldEl0ZW1JbmRleChlKSB7IHJldHVybiB0aGlzLl9pdGVtcyA9IGUgJiYgZS5wYXJlbnROb2RlID8gdC5maW5kKCIuY2Fyb3VzZWwtaXRlbSIsIGUucGFyZW50Tm9kZSkgOiBbXSwgdGhpcy5faXRlbXMuaW5kZXhPZihlKSB9IF9nZXRJdGVtQnlPcmRlcih0LCBlKSB7IGNvbnN0IGkgPSB0ID09PSBLOyByZXR1cm4geSh0aGlzLl9pdGVtcywgZSwgaSwgdGhpcy5fY29uZmlnLndyYXApIH0gX3RyaWdnZXJTbGlkZUV2ZW50KGUsIGkpIHsgY29uc3QgbiA9IHRoaXMuX2dldEl0ZW1JbmRleChlKSwgcyA9IHRoaXMuX2dldEl0ZW1JbmRleCh0LmZpbmRPbmUoIi5hY3RpdmUuY2Fyb3VzZWwtaXRlbSIsIHRoaXMuX2VsZW1lbnQpKTsgcmV0dXJuIFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCAic2xpZGUuYnMuY2Fyb3VzZWwiLCB7IHJlbGF0ZWRUYXJnZXQ6IGUsIGRpcmVjdGlvbjogaSwgZnJvbTogcywgdG86IG4gfSkgfSBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlKSB7IGlmICh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCkgeyBjb25zdCBpID0gdC5maW5kT25lKCIuYWN0aXZlIiwgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpOyBpLmNsYXNzTGlzdC5yZW1vdmUoImFjdGl2ZSIpLCBpLnJlbW92ZUF0dHJpYnV0ZSgiYXJpYS1jdXJyZW50Iik7IGNvbnN0IG4gPSB0LmZpbmQoIltkYXRhLWJzLXRhcmdldF0iLCB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCk7IGZvciAobGV0IHQgPSAwOyB0IDwgbi5sZW5ndGg7IHQrKylpZiAoTnVtYmVyLnBhcnNlSW50KG5bdF0uZ2V0QXR0cmlidXRlKCJkYXRhLWJzLXNsaWRlLXRvIiksIDEwKSA9PT0gdGhpcy5fZ2V0SXRlbUluZGV4KGUpKSB7IG5bdF0uY2xhc3NMaXN0LmFkZCgiYWN0aXZlIiksIG5bdF0uc2V0QXR0cmlidXRlKCJhcmlhLWN1cnJlbnQiLCAidHJ1ZSIpOyBicmVhayB9IH0gfSBfdXBkYXRlSW50ZXJ2YWwoKSB7IGNvbnN0IGUgPSB0aGlzLl9hY3RpdmVFbGVtZW50IHx8IHQuZmluZE9uZSgiLmFjdGl2ZS5jYXJvdXNlbC1pdGVtIiwgdGhpcy5fZWxlbWVudCk7IGlmICghZSkgcmV0dXJuOyBjb25zdCBpID0gTnVtYmVyLnBhcnNlSW50KGUuZ2V0QXR0cmlidXRlKCJkYXRhLWJzLWludGVydmFsIiksIDEwKTsgaSA/ICh0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWwsIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCA9IGkpIDogdGhpcy5fY29uZmlnLmludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWwgfSBfc2xpZGUoZSwgaSkgeyBjb25zdCBuID0gdGhpcy5fZGlyZWN0aW9uVG9PcmRlcihlKSwgcyA9IHQuZmluZE9uZSgiLmFjdGl2ZS5jYXJvdXNlbC1pdGVtIiwgdGhpcy5fZWxlbWVudCksIG8gPSB0aGlzLl9nZXRJdGVtSW5kZXgocyksIHIgPSBpIHx8IHRoaXMuX2dldEl0ZW1CeU9yZGVyKG4sIHMpLCBhID0gdGhpcy5fZ2V0SXRlbUluZGV4KHIpLCBsID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbCksIGMgPSBuID09PSBLLCBoID0gYyA/ICJjYXJvdXNlbC1pdGVtLXN0YXJ0IiA6ICJjYXJvdXNlbC1pdGVtLWVuZCIsIGQgPSBjID8gImNhcm91c2VsLWl0ZW0tbmV4dCIgOiAiY2Fyb3VzZWwtaXRlbS1wcmV2IiwgdSA9IHRoaXMuX29yZGVyVG9EaXJlY3Rpb24obik7IGlmIChyICYmIHIuY2xhc3NMaXN0LmNvbnRhaW5zKCJhY3RpdmUiKSkgcmV0dXJuIHZvaWQgKHRoaXMuX2lzU2xpZGluZyA9ICExKTsgaWYgKHRoaXMuX2lzU2xpZGluZykgcmV0dXJuOyBpZiAodGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQociwgdSkuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuOyBpZiAoIXMgfHwgIXIpIHJldHVybjsgdGhpcy5faXNTbGlkaW5nID0gITAsIGwgJiYgdGhpcy5wYXVzZSgpLCB0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KHIpLCB0aGlzLl9hY3RpdmVFbGVtZW50ID0gcjsgY29uc3QgcCA9ICgpID0+IHsgUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsICJzbGlkLmJzLmNhcm91c2VsIiwgeyByZWxhdGVkVGFyZ2V0OiByLCBkaXJlY3Rpb246IHUsIGZyb206IG8sIHRvOiBhIH0pIH07IGlmICh0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygic2xpZGUiKSkgeyByLmNsYXNzTGlzdC5hZGQoZCksIGYociksIHMuY2xhc3NMaXN0LmFkZChoKSwgci5jbGFzc0xpc3QuYWRkKGgpOyBjb25zdCB0ID0gKCkgPT4geyByLmNsYXNzTGlzdC5yZW1vdmUoaCwgZCksIHIuY2xhc3NMaXN0LmFkZCgiYWN0aXZlIiksIHMuY2xhc3NMaXN0LnJlbW92ZSgiYWN0aXZlIiwgZCwgaCksIHRoaXMuX2lzU2xpZGluZyA9ICExLCBzZXRUaW1lb3V0KHAsIDApIH07IHRoaXMuX3F1ZXVlQ2FsbGJhY2sodCwgcywgITApIH0gZWxzZSBzLmNsYXNzTGlzdC5yZW1vdmUoImFjdGl2ZSIpLCByLmNsYXNzTGlzdC5hZGQoImFjdGl2ZSIpLCB0aGlzLl9pc1NsaWRpbmcgPSAhMSwgcCgpOyBsICYmIHRoaXMuY3ljbGUoKSB9IF9kaXJlY3Rpb25Ub09yZGVyKHQpIHsgcmV0dXJuIFtRLCBZXS5pbmNsdWRlcyh0KSA/IGcoKSA/IHQgPT09IFkgPyBYIDogSyA6IHQgPT09IFkgPyBLIDogWCA6IHQgfSBfb3JkZXJUb0RpcmVjdGlvbih0KSB7IHJldHVybiBbSywgWF0uaW5jbHVkZXModCkgPyBnKCkgPyB0ID09PSBYID8gWSA6IFEgOiB0ID09PSBYID8gUSA6IFkgOiB0IH0gc3RhdGljIGNhcm91c2VsSW50ZXJmYWNlKHQsIGUpIHsgY29uc3QgaSA9IFouZ2V0T3JDcmVhdGVJbnN0YW5jZSh0LCBlKTsgbGV0IHsgX2NvbmZpZzogbiB9ID0gaTsgIm9iamVjdCIgPT0gdHlwZW9mIGUgJiYgKG4gPSB7IC4uLm4sIC4uLmUgfSk7IGNvbnN0IHMgPSAic3RyaW5nIiA9PSB0eXBlb2YgZSA/IGUgOiBuLnNsaWRlOyBpZiAoIm51bWJlciIgPT0gdHlwZW9mIGUpIGkudG8oZSk7IGVsc2UgaWYgKCJzdHJpbmciID09IHR5cGVvZiBzKSB7IGlmICh2b2lkIDAgPT09IGlbc10pIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCAiJHtzfSJgKTsgaVtzXSgpIH0gZWxzZSBuLmludGVydmFsICYmIG4ucmlkZSAmJiAoaS5wYXVzZSgpLCBpLmN5Y2xlKCkpIH0gc3RhdGljIGpRdWVyeUludGVyZmFjZSh0KSB7IHJldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uICgpIHsgWi5jYXJvdXNlbEludGVyZmFjZSh0aGlzLCB0KSB9KSkgfSBzdGF0aWMgZGF0YUFwaUNsaWNrSGFuZGxlcih0KSB7IGNvbnN0IGUgPSBzKHRoaXMpOyBpZiAoIWUgfHwgIWUuY2xhc3NMaXN0LmNvbnRhaW5zKCJjYXJvdXNlbCIpKSByZXR1cm47IGNvbnN0IGkgPSB7IC4uLlUuZ2V0RGF0YUF0dHJpYnV0ZXMoZSksIC4uLlUuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcykgfSwgbiA9IHRoaXMuZ2V0QXR0cmlidXRlKCJkYXRhLWJzLXNsaWRlLXRvIik7IG4gJiYgKGkuaW50ZXJ2YWwgPSAhMSksIFouY2Fyb3VzZWxJbnRlcmZhY2UoZSwgaSksIG4gJiYgWi5nZXRJbnN0YW5jZShlKS50byhuKSwgdC5wcmV2ZW50RGVmYXVsdCgpIH0gfSBQLm9uKGRvY3VtZW50LCAiY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGkiLCAiW2RhdGEtYnMtc2xpZGVdLCBbZGF0YS1icy1zbGlkZS10b10iLCBaLmRhdGFBcGlDbGlja0hhbmRsZXIpLCBQLm9uKHdpbmRvdywgImxvYWQuYnMuY2Fyb3VzZWwuZGF0YS1hcGkiLCAoKSA9PiB7IGNvbnN0IGUgPSB0LmZpbmQoJ1tkYXRhLWJzLXJpZGU9ImNhcm91c2VsIl0nKTsgZm9yIChsZXQgdCA9IDAsIGkgPSBlLmxlbmd0aDsgdCA8IGk7IHQrKylaLmNhcm91c2VsSW50ZXJmYWNlKGVbdF0sIFouZ2V0SW5zdGFuY2UoZVt0XSkpIH0pLCBfKFopOyBjb25zdCBKID0geyB0b2dnbGU6ICEwLCBwYXJlbnQ6ICIiIH0sIHR0ID0geyB0b2dnbGU6ICJib29sZWFuIiwgcGFyZW50OiAiKHN0cmluZ3xlbGVtZW50KSIgfTsgY2xhc3MgZXQgZXh0ZW5kcyBCIHsgY29uc3RydWN0b3IoZSwgaSkgeyBzdXBlcihlKSwgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gITEsIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhpKSwgdGhpcy5fdHJpZ2dlckFycmF5ID0gdC5maW5kKGBbZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIl1baHJlZj0iIyR7dGhpcy5fZWxlbWVudC5pZH0iXSxbZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIl1bZGF0YS1icy10YXJnZXQ9IiMke3RoaXMuX2VsZW1lbnQuaWR9Il1gKTsgY29uc3QgcyA9IHQuZmluZCgnW2RhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSJdJyk7IGZvciAobGV0IGUgPSAwLCBpID0gcy5sZW5ndGg7IGUgPCBpOyBlKyspIHsgY29uc3QgaSA9IHNbZV0sIG8gPSBuKGkpLCByID0gdC5maW5kKG8pLmZpbHRlcih0ID0+IHQgPT09IHRoaXMuX2VsZW1lbnQpOyBudWxsICE9PSBvICYmIHIubGVuZ3RoICYmICh0aGlzLl9zZWxlY3RvciA9IG8sIHRoaXMuX3RyaWdnZXJBcnJheS5wdXNoKGkpKSB9IHRoaXMuX3BhcmVudCA9IHRoaXMuX2NvbmZpZy5wYXJlbnQgPyB0aGlzLl9nZXRQYXJlbnQoKSA6IG51bGwsIHRoaXMuX2NvbmZpZy5wYXJlbnQgfHwgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSksIHRoaXMuX2NvbmZpZy50b2dnbGUgJiYgdGhpcy50b2dnbGUoKSB9IHN0YXRpYyBnZXQgRGVmYXVsdCgpIHsgcmV0dXJuIEogfSBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiAiY29sbGFwc2UiIH0gdG9nZ2xlKCkgeyB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygic2hvdyIpID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coKSB9IHNob3coKSB7IGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoInNob3ciKSkgcmV0dXJuOyBsZXQgZSwgaTsgdGhpcy5fcGFyZW50ICYmIChlID0gdC5maW5kKCIuc2hvdywgLmNvbGxhcHNpbmciLCB0aGlzLl9wYXJlbnQpLmZpbHRlcih0ID0+ICJzdHJpbmciID09IHR5cGVvZiB0aGlzLl9jb25maWcucGFyZW50ID8gdC5nZXRBdHRyaWJ1dGUoImRhdGEtYnMtcGFyZW50IikgPT09IHRoaXMuX2NvbmZpZy5wYXJlbnQgOiB0LmNsYXNzTGlzdC5jb250YWlucygiY29sbGFwc2UiKSksIDAgPT09IGUubGVuZ3RoICYmIChlID0gbnVsbCkpOyBjb25zdCBuID0gdC5maW5kT25lKHRoaXMuX3NlbGVjdG9yKTsgaWYgKGUpIHsgY29uc3QgdCA9IGUuZmluZCh0ID0+IG4gIT09IHQpOyBpZiAoaSA9IHQgPyBldC5nZXRJbnN0YW5jZSh0KSA6IG51bGwsIGkgJiYgaS5faXNUcmFuc2l0aW9uaW5nKSByZXR1cm4gfSBpZiAoUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsICJzaG93LmJzLmNvbGxhcHNlIikuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuOyBlICYmIGUuZm9yRWFjaCh0ID0+IHsgbiAhPT0gdCAmJiBldC5jb2xsYXBzZUludGVyZmFjZSh0LCAiaGlkZSIpLCBpIHx8IFIuc2V0KHQsICJicy5jb2xsYXBzZSIsIG51bGwpIH0pOyBjb25zdCBzID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7IHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgiY29sbGFwc2UiKSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKCJjb2xsYXBzaW5nIiksIHRoaXMuX2VsZW1lbnQuc3R5bGVbc10gPSAwLCB0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoICYmIHRoaXMuX3RyaWdnZXJBcnJheS5mb3JFYWNoKHQgPT4geyB0LmNsYXNzTGlzdC5yZW1vdmUoImNvbGxhcHNlZCIpLCB0LnNldEF0dHJpYnV0ZSgiYXJpYS1leHBhbmRlZCIsICEwKSB9KSwgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKCEwKTsgY29uc3QgbyA9ICJzY3JvbGwiICsgKHNbMF0udG9VcHBlckNhc2UoKSArIHMuc2xpY2UoMSkpOyB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHsgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCJjb2xsYXBzaW5nIiksIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZCgiY29sbGFwc2UiLCAic2hvdyIpLCB0aGlzLl9lbGVtZW50LnN0eWxlW3NdID0gIiIsIHRoaXMuc2V0VHJhbnNpdGlvbmluZyghMSksIFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCAic2hvd24uYnMuY29sbGFwc2UiKSB9LCB0aGlzLl9lbGVtZW50LCAhMCksIHRoaXMuX2VsZW1lbnQuc3R5bGVbc10gPSB0aGlzLl9lbGVtZW50W29dICsgInB4IiB9IGhpZGUoKSB7IGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCJzaG93IikpIHJldHVybjsgaWYgKFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCAiaGlkZS5icy5jb2xsYXBzZSIpLmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjsgY29uc3QgdCA9IHRoaXMuX2dldERpbWVuc2lvbigpOyB0aGlzLl9lbGVtZW50LnN0eWxlW3RdID0gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVt0XSArICJweCIsIGYodGhpcy5fZWxlbWVudCksIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZCgiY29sbGFwc2luZyIpLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoImNvbGxhcHNlIiwgInNob3ciKTsgY29uc3QgZSA9IHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGg7IGlmIChlID4gMCkgZm9yIChsZXQgdCA9IDA7IHQgPCBlOyB0KyspIHsgY29uc3QgZSA9IHRoaXMuX3RyaWdnZXJBcnJheVt0XSwgaSA9IHMoZSk7IGkgJiYgIWkuY2xhc3NMaXN0LmNvbnRhaW5zKCJzaG93IikgJiYgKGUuY2xhc3NMaXN0LmFkZCgiY29sbGFwc2VkIiksIGUuc2V0QXR0cmlidXRlKCJhcmlhLWV4cGFuZGVkIiwgITEpKSB9IHRoaXMuc2V0VHJhbnNpdGlvbmluZyghMCksIHRoaXMuX2VsZW1lbnQuc3R5bGVbdF0gPSAiIiwgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7IHRoaXMuc2V0VHJhbnNpdGlvbmluZyghMSksIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgiY29sbGFwc2luZyIpLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoImNvbGxhcHNlIiksIFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCAiaGlkZGVuLmJzLmNvbGxhcHNlIikgfSwgdGhpcy5fZWxlbWVudCwgITApIH0gc2V0VHJhbnNpdGlvbmluZyh0KSB7IHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHQgfSBfZ2V0Q29uZmlnKHQpIHsgcmV0dXJuICh0ID0geyAuLi5KLCAuLi50IH0pLnRvZ2dsZSA9IEJvb2xlYW4odC50b2dnbGUpLCBsKCJjb2xsYXBzZSIsIHQsIHR0KSwgdCB9IF9nZXREaW1lbnNpb24oKSB7IHJldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygid2lkdGgiKSA/ICJ3aWR0aCIgOiAiaGVpZ2h0IiB9IF9nZXRQYXJlbnQoKSB7IGxldCB7IHBhcmVudDogZSB9ID0gdGhpcy5fY29uZmlnOyBlID0gYShlKTsgY29uc3QgaSA9IGBbZGF0YS1icy10b2dnbGU9ImNvbGxhcHNlIl1bZGF0YS1icy1wYXJlbnQ9IiR7ZX0iXWA7IHJldHVybiB0LmZpbmQoaSwgZSkuZm9yRWFjaCh0ID0+IHsgY29uc3QgZSA9IHModCk7IHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhlLCBbdF0pIH0pLCBlIH0gX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0LCBlKSB7IGlmICghdCB8fCAhZS5sZW5ndGgpIHJldHVybjsgY29uc3QgaSA9IHQuY2xhc3NMaXN0LmNvbnRhaW5zKCJzaG93Iik7IGUuZm9yRWFjaCh0ID0+IHsgaSA/IHQuY2xhc3NMaXN0LnJlbW92ZSgiY29sbGFwc2VkIikgOiB0LmNsYXNzTGlzdC5hZGQoImNvbGxhcHNlZCIpLCB0LnNldEF0dHJpYnV0ZSgiYXJpYS1leHBhbmRlZCIsIGkpIH0pIH0gc3RhdGljIGNvbGxhcHNlSW50ZXJmYWNlKHQsIGUpIHsgbGV0IGkgPSBldC5nZXRJbnN0YW5jZSh0KTsgY29uc3QgbiA9IHsgLi4uSiwgLi4uVS5nZXREYXRhQXR0cmlidXRlcyh0KSwgLi4uIm9iamVjdCIgPT0gdHlwZW9mIGUgJiYgZSA/IGUgOiB7fSB9OyBpZiAoIWkgJiYgbi50b2dnbGUgJiYgInN0cmluZyIgPT0gdHlwZW9mIGUgJiYgL3Nob3d8aGlkZS8udGVzdChlKSAmJiAobi50b2dnbGUgPSAhMSksIGkgfHwgKGkgPSBuZXcgZXQodCwgbikpLCAic3RyaW5nIiA9PSB0eXBlb2YgZSkgeyBpZiAodm9pZCAwID09PSBpW2VdKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgIiR7ZX0iYCk7IGlbZV0oKSB9IH0gc3RhdGljIGpRdWVyeUludGVyZmFjZSh0KSB7IHJldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uICgpIHsgZXQuY29sbGFwc2VJbnRlcmZhY2UodGhpcywgdCkgfSkpIH0gfSBQLm9uKGRvY3VtZW50LCAiY2xpY2suYnMuY29sbGFwc2UuZGF0YS1hcGkiLCAnW2RhdGEtYnMtdG9nZ2xlPSJjb2xsYXBzZSJdJywgKGZ1bmN0aW9uIChlKSB7ICgiQSIgPT09IGUudGFyZ2V0LnRhZ05hbWUgfHwgZS5kZWxlZ2F0ZVRhcmdldCAmJiAiQSIgPT09IGUuZGVsZWdhdGVUYXJnZXQudGFnTmFtZSkgJiYgZS5wcmV2ZW50RGVmYXVsdCgpOyBjb25zdCBpID0gVS5nZXREYXRhQXR0cmlidXRlcyh0aGlzKSwgcyA9IG4odGhpcyk7IHQuZmluZChzKS5mb3JFYWNoKHQgPT4geyBjb25zdCBlID0gZXQuZ2V0SW5zdGFuY2UodCk7IGxldCBuOyBlID8gKG51bGwgPT09IGUuX3BhcmVudCAmJiAic3RyaW5nIiA9PSB0eXBlb2YgaS5wYXJlbnQgJiYgKGUuX2NvbmZpZy5wYXJlbnQgPSBpLnBhcmVudCwgZS5fcGFyZW50ID0gZS5fZ2V0UGFyZW50KCkpLCBuID0gInRvZ2dsZSIpIDogbiA9IGksIGV0LmNvbGxhcHNlSW50ZXJmYWNlKHQsIG4pIH0pIH0pKSwgXyhldCk7IHZhciBpdCA9ICJ0b3AiLCBudCA9ICJib3R0b20iLCBzdCA9ICJyaWdodCIsIG90ID0gImxlZnQiLCBydCA9IFtpdCwgbnQsIHN0LCBvdF0sIGF0ID0gcnQucmVkdWNlKChmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5jb25jYXQoW2UgKyAiLXN0YXJ0IiwgZSArICItZW5kIl0pIH0pLCBbXSksIGx0ID0gW10uY29uY2F0KHJ0LCBbImF1dG8iXSkucmVkdWNlKChmdW5jdGlvbiAodCwgZSkgeyByZXR1cm4gdC5jb25jYXQoW2UsIGUgKyAiLXN0YXJ0IiwgZSArICItZW5kIl0pIH0pLCBbXSksIGN0ID0gWyJiZWZvcmVSZWFkIiwgInJlYWQiLCAiYWZ0ZXJSZWFkIiwgImJlZm9yZU1haW4iLCAibWFpbiIsICJhZnRlck1haW4iLCAiYmVmb3JlV3JpdGUiLCAid3JpdGUiLCAiYWZ0ZXJXcml0ZSJdOyBmdW5jdGlvbiBodCh0KSB7IHJldHVybiB0ID8gKHQubm9kZU5hbWUgfHwgIiIpLnRvTG93ZXJDYXNlKCkgOiBudWxsIH0gZnVuY3Rpb24gZHQodCkgeyBpZiAobnVsbCA9PSB0KSByZXR1cm4gd2luZG93OyBpZiAoIltvYmplY3QgV2luZG93XSIgIT09IHQudG9TdHJpbmcoKSkgeyB2YXIgZSA9IHQub3duZXJEb2N1bWVudDsgcmV0dXJuIGUgJiYgZS5kZWZhdWx0VmlldyB8fCB3aW5kb3cgfSByZXR1cm4gdCB9IGZ1bmN0aW9uIHV0KHQpIHsgcmV0dXJuIHQgaW5zdGFuY2VvZiBkdCh0KS5FbGVtZW50IHx8IHQgaW5zdGFuY2VvZiBFbGVtZW50IH0gZnVuY3Rpb24gZnQodCkgeyByZXR1cm4gdCBpbnN0YW5jZW9mIGR0KHQpLkhUTUxFbGVtZW50IHx8IHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB9IGZ1bmN0aW9uIHB0KHQpIHsgcmV0dXJuICJ1bmRlZmluZWQiICE9IHR5cGVvZiBTaGFkb3dSb290ICYmICh0IGluc3RhbmNlb2YgZHQodCkuU2hhZG93Um9vdCB8fCB0IGluc3RhbmNlb2YgU2hhZG93Um9vdCkgfSB2YXIgbXQgPSB7IG5hbWU6ICJhcHBseVN0eWxlcyIsIGVuYWJsZWQ6ICEwLCBwaGFzZTogIndyaXRlIiwgZm46IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gdC5zdGF0ZTsgT2JqZWN0LmtleXMoZS5lbGVtZW50cykuZm9yRWFjaCgoZnVuY3Rpb24gKHQpIHsgdmFyIGkgPSBlLnN0eWxlc1t0XSB8fCB7fSwgbiA9IGUuYXR0cmlidXRlc1t0XSB8fCB7fSwgcyA9IGUuZWxlbWVudHNbdF07IGZ0KHMpICYmIGh0KHMpICYmIChPYmplY3QuYXNzaWduKHMuc3R5bGUsIGkpLCBPYmplY3Qua2V5cyhuKS5mb3JFYWNoKChmdW5jdGlvbiAodCkgeyB2YXIgZSA9IG5bdF07ICExID09PSBlID8gcy5yZW1vdmVBdHRyaWJ1dGUodCkgOiBzLnNldEF0dHJpYnV0ZSh0LCAhMCA9PT0gZSA/ICIiIDogZSkgfSkpKSB9KSkgfSwgZWZmZWN0OiBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHQuc3RhdGUsIGkgPSB7IHBvcHBlcjogeyBwb3NpdGlvbjogZS5vcHRpb25zLnN0cmF0ZWd5LCBsZWZ0OiAiMCIsIHRvcDogIjAiLCBtYXJnaW46ICIwIiB9LCBhcnJvdzogeyBwb3NpdGlvbjogImFic29sdXRlIiB9LCByZWZlcmVuY2U6IHt9IH07IHJldHVybiBPYmplY3QuYXNzaWduKGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpLnBvcHBlciksIGUuc3R5bGVzID0gaSwgZS5lbGVtZW50cy5hcnJvdyAmJiBPYmplY3QuYXNzaWduKGUuZWxlbWVudHMuYXJyb3cuc3R5bGUsIGkuYXJyb3cpLCBmdW5jdGlvbiAoKSB7IE9iamVjdC5rZXlzKGUuZWxlbWVudHMpLmZvckVhY2goKGZ1bmN0aW9uICh0KSB7IHZhciBuID0gZS5lbGVtZW50c1t0XSwgcyA9IGUuYXR0cmlidXRlc1t0XSB8fCB7fSwgbyA9IE9iamVjdC5rZXlzKGUuc3R5bGVzLmhhc093blByb3BlcnR5KHQpID8gZS5zdHlsZXNbdF0gOiBpW3RdKS5yZWR1Y2UoKGZ1bmN0aW9uICh0LCBlKSB7IHJldHVybiB0W2VdID0gIiIsIHQgfSksIHt9KTsgZnQobikgJiYgaHQobikgJiYgKE9iamVjdC5hc3NpZ24obi5zdHlsZSwgbyksIE9iamVjdC5rZXlzKHMpLmZvckVhY2goKGZ1bmN0aW9uICh0KSB7IG4ucmVtb3ZlQXR0cmlidXRlKHQpIH0pKSkgfSkpIH0gfSwgcmVxdWlyZXM6IFsiY29tcHV0ZVN0eWxlcyJdIH07IGZ1bmN0aW9uIGd0KHQpIHsgcmV0dXJuIHQuc3BsaXQoIi0iKVswXSB9IGZ1bmN0aW9uIF90KHQpIHsgdmFyIGUgPSB0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyByZXR1cm4geyB3aWR0aDogZS53aWR0aCwgaGVpZ2h0OiBlLmhlaWdodCwgdG9wOiBlLnRvcCwgcmlnaHQ6IGUucmlnaHQsIGJvdHRvbTogZS5ib3R0b20sIGxlZnQ6IGUubGVmdCwgeDogZS5sZWZ0LCB5OiBlLnRvcCB9IH0gZnVuY3Rpb24gYnQodCkgeyB2YXIgZSA9IF90KHQpLCBpID0gdC5vZmZzZXRXaWR0aCwgbiA9IHQub2Zmc2V0SGVpZ2h0OyByZXR1cm4gTWF0aC5hYnMoZS53aWR0aCAtIGkpIDw9IDEgJiYgKGkgPSBlLndpZHRoKSwgTWF0aC5hYnMoZS5oZWlnaHQgLSBuKSA8PSAxICYmIChuID0gZS5oZWlnaHQpLCB7IHg6IHQub2Zmc2V0TGVmdCwgeTogdC5vZmZzZXRUb3AsIHdpZHRoOiBpLCBoZWlnaHQ6IG4gfSB9IGZ1bmN0aW9uIHZ0KHQsIGUpIHsgdmFyIGkgPSBlLmdldFJvb3ROb2RlICYmIGUuZ2V0Um9vdE5vZGUoKTsgaWYgKHQuY29udGFpbnMoZSkpIHJldHVybiAhMDsgaWYgKGkgJiYgcHQoaSkpIHsgdmFyIG4gPSBlOyBkbyB7IGlmIChuICYmIHQuaXNTYW1lTm9kZShuKSkgcmV0dXJuICEwOyBuID0gbi5wYXJlbnROb2RlIHx8IG4uaG9zdCB9IHdoaWxlIChuKSB9IHJldHVybiAhMSB9IGZ1bmN0aW9uIHl0KHQpIHsgcmV0dXJuIGR0KHQpLmdldENvbXB1dGVkU3R5bGUodCkgfSBmdW5jdGlvbiB3dCh0KSB7IHJldHVybiBbInRhYmxlIiwgInRkIiwgInRoIl0uaW5kZXhPZihodCh0KSkgPj0gMCB9IGZ1bmN0aW9uIEV0KHQpIHsgcmV0dXJuICgodXQodCkgPyB0Lm93bmVyRG9jdW1lbnQgOiB0LmRvY3VtZW50KSB8fCB3aW5kb3cuZG9jdW1lbnQpLmRvY3VtZW50RWxlbWVudCB9IGZ1bmN0aW9uIEF0KHQpIHsgcmV0dXJuICJodG1sIiA9PT0gaHQodCkgPyB0IDogdC5hc3NpZ25lZFNsb3QgfHwgdC5wYXJlbnROb2RlIHx8IChwdCh0KSA/IHQuaG9zdCA6IG51bGwpIHx8IEV0KHQpIH0gZnVuY3Rpb24gVHQodCkgeyByZXR1cm4gZnQodCkgJiYgImZpeGVkIiAhPT0geXQodCkucG9zaXRpb24gPyB0Lm9mZnNldFBhcmVudCA6IG51bGwgfSBmdW5jdGlvbiBPdCh0KSB7IGZvciAodmFyIGUgPSBkdCh0KSwgaSA9IFR0KHQpOyBpICYmIHd0KGkpICYmICJzdGF0aWMiID09PSB5dChpKS5wb3NpdGlvbjspaSA9IFR0KGkpOyByZXR1cm4gaSAmJiAoImh0bWwiID09PSBodChpKSB8fCAiYm9keSIgPT09IGh0KGkpICYmICJzdGF0aWMiID09PSB5dChpKS5wb3NpdGlvbikgPyBlIDogaSB8fCBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IC0xICE9PSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZigiZmlyZWZveCIpOyBpZiAoLTEgIT09IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZigiVHJpZGVudCIpICYmIGZ0KHQpICYmICJmaXhlZCIgPT09IHl0KHQpLnBvc2l0aW9uKSByZXR1cm4gbnVsbDsgZm9yICh2YXIgaSA9IEF0KHQpOyBmdChpKSAmJiBbImh0bWwiLCAiYm9keSJdLmluZGV4T2YoaHQoaSkpIDwgMDspIHsgdmFyIG4gPSB5dChpKTsgaWYgKCJub25lIiAhPT0gbi50cmFuc2Zvcm0gfHwgIm5vbmUiICE9PSBuLnBlcnNwZWN0aXZlIHx8ICJwYWludCIgPT09IG4uY29udGFpbiB8fCAtMSAhPT0gWyJ0cmFuc2Zvcm0iLCAicGVyc3BlY3RpdmUiXS5pbmRleE9mKG4ud2lsbENoYW5nZSkgfHwgZSAmJiAiZmlsdGVyIiA9PT0gbi53aWxsQ2hhbmdlIHx8IGUgJiYgbi5maWx0ZXIgJiYgIm5vbmUiICE9PSBuLmZpbHRlcikgcmV0dXJuIGk7IGkgPSBpLnBhcmVudE5vZGUgfSByZXR1cm4gbnVsbCB9KHQpIHx8IGUgfSBmdW5jdGlvbiBDdCh0KSB7IHJldHVybiBbInRvcCIsICJib3R0b20iXS5pbmRleE9mKHQpID49IDAgPyAieCIgOiAieSIgfSB2YXIga3QgPSBNYXRoLm1heCwgTHQgPSBNYXRoLm1pbiwgeHQgPSBNYXRoLnJvdW5kOyBmdW5jdGlvbiBEdCh0LCBlLCBpKSB7IHJldHVybiBrdCh0LCBMdChlLCBpKSkgfSBmdW5jdGlvbiBTdCh0KSB7IHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB7IHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMCwgbGVmdDogMCB9LCB0KSB9IGZ1bmN0aW9uIEl0KHQsIGUpIHsgcmV0dXJuIGUucmVkdWNlKChmdW5jdGlvbiAoZSwgaSkgeyByZXR1cm4gZVtpXSA9IHQsIGUgfSksIHt9KSB9IHZhciBOdCA9IHsgbmFtZTogImFycm93IiwgZW5hYmxlZDogITAsIHBoYXNlOiAibWFpbiIsIGZuOiBmdW5jdGlvbiAodCkgeyB2YXIgZSwgaSA9IHQuc3RhdGUsIG4gPSB0Lm5hbWUsIHMgPSB0Lm9wdGlvbnMsIG8gPSBpLmVsZW1lbnRzLmFycm93LCByID0gaS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsIGEgPSBndChpLnBsYWNlbWVudCksIGwgPSBDdChhKSwgYyA9IFtvdCwgc3RdLmluZGV4T2YoYSkgPj0gMCA/ICJoZWlnaHQiIDogIndpZHRoIjsgaWYgKG8gJiYgcikgeyB2YXIgaCA9IGZ1bmN0aW9uICh0LCBlKSB7IHJldHVybiBTdCgibnVtYmVyIiAhPSB0eXBlb2YgKHQgPSAiZnVuY3Rpb24iID09IHR5cGVvZiB0ID8gdChPYmplY3QuYXNzaWduKHt9LCBlLnJlY3RzLCB7IHBsYWNlbWVudDogZS5wbGFjZW1lbnQgfSkpIDogdCkgPyB0IDogSXQodCwgcnQpKSB9KHMucGFkZGluZywgaSksIGQgPSBidChvKSwgdSA9ICJ5IiA9PT0gbCA/IGl0IDogb3QsIGYgPSAieSIgPT09IGwgPyBudCA6IHN0LCBwID0gaS5yZWN0cy5yZWZlcmVuY2VbY10gKyBpLnJlY3RzLnJlZmVyZW5jZVtsXSAtIHJbbF0gLSBpLnJlY3RzLnBvcHBlcltjXSwgbSA9IHJbbF0gLSBpLnJlY3RzLnJlZmVyZW5jZVtsXSwgZyA9IE90KG8pLCBfID0gZyA/ICJ5IiA9PT0gbCA/IGcuY2xpZW50SGVpZ2h0IHx8IDAgOiBnLmNsaWVudFdpZHRoIHx8IDAgOiAwLCBiID0gcCAvIDIgLSBtIC8gMiwgdiA9IGhbdV0sIHkgPSBfIC0gZFtjXSAtIGhbZl0sIHcgPSBfIC8gMiAtIGRbY10gLyAyICsgYiwgRSA9IER0KHYsIHcsIHkpLCBBID0gbDsgaS5tb2RpZmllcnNEYXRhW25dID0gKChlID0ge30pW0FdID0gRSwgZS5jZW50ZXJPZmZzZXQgPSBFIC0gdywgZSkgfSB9LCBlZmZlY3Q6IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gdC5zdGF0ZSwgaSA9IHQub3B0aW9ucy5lbGVtZW50LCBuID0gdm9pZCAwID09PSBpID8gIltkYXRhLXBvcHBlci1hcnJvd10iIDogaTsgbnVsbCAhPSBuICYmICgic3RyaW5nIiAhPSB0eXBlb2YgbiB8fCAobiA9IGUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IobikpKSAmJiB2dChlLmVsZW1lbnRzLnBvcHBlciwgbikgJiYgKGUuZWxlbWVudHMuYXJyb3cgPSBuKSB9LCByZXF1aXJlczogWyJwb3BwZXJPZmZzZXRzIl0sIHJlcXVpcmVzSWZFeGlzdHM6IFsicHJldmVudE92ZXJmbG93Il0gfSwganQgPSB7IHRvcDogImF1dG8iLCByaWdodDogImF1dG8iLCBib3R0b206ICJhdXRvIiwgbGVmdDogImF1dG8iIH07IGZ1bmN0aW9uIE10KHQpIHsgdmFyIGUsIGkgPSB0LnBvcHBlciwgbiA9IHQucG9wcGVyUmVjdCwgcyA9IHQucGxhY2VtZW50LCBvID0gdC5vZmZzZXRzLCByID0gdC5wb3NpdGlvbiwgYSA9IHQuZ3B1QWNjZWxlcmF0aW9uLCBsID0gdC5hZGFwdGl2ZSwgYyA9IHQucm91bmRPZmZzZXRzLCBoID0gITAgPT09IGMgPyBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHQueCwgaSA9IHQueSwgbiA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7IHJldHVybiB7IHg6IHh0KHh0KGUgKiBuKSAvIG4pIHx8IDAsIHk6IHh0KHh0KGkgKiBuKSAvIG4pIHx8IDAgfSB9KG8pIDogImZ1bmN0aW9uIiA9PSB0eXBlb2YgYyA/IGMobykgOiBvLCBkID0gaC54LCB1ID0gdm9pZCAwID09PSBkID8gMCA6IGQsIGYgPSBoLnksIHAgPSB2b2lkIDAgPT09IGYgPyAwIDogZiwgbSA9IG8uaGFzT3duUHJvcGVydHkoIngiKSwgZyA9IG8uaGFzT3duUHJvcGVydHkoInkiKSwgXyA9IG90LCBiID0gaXQsIHYgPSB3aW5kb3c7IGlmIChsKSB7IHZhciB5ID0gT3QoaSksIHcgPSAiY2xpZW50SGVpZ2h0IiwgRSA9ICJjbGllbnRXaWR0aCI7IHkgPT09IGR0KGkpICYmICJzdGF0aWMiICE9PSB5dCh5ID0gRXQoaSkpLnBvc2l0aW9uICYmICh3ID0gInNjcm9sbEhlaWdodCIsIEUgPSAic2Nyb2xsV2lkdGgiKSwgeSA9IHksIHMgPT09IGl0ICYmIChiID0gbnQsIHAgLT0geVt3XSAtIG4uaGVpZ2h0LCBwICo9IGEgPyAxIDogLTEpLCBzID09PSBvdCAmJiAoXyA9IHN0LCB1IC09IHlbRV0gLSBuLndpZHRoLCB1ICo9IGEgPyAxIDogLTEpIH0gdmFyIEEsIFQgPSBPYmplY3QuYXNzaWduKHsgcG9zaXRpb246IHIgfSwgbCAmJiBqdCk7IHJldHVybiBhID8gT2JqZWN0LmFzc2lnbih7fSwgVCwgKChBID0ge30pW2JdID0gZyA/ICIwIiA6ICIiLCBBW19dID0gbSA/ICIwIiA6ICIiLCBBLnRyYW5zZm9ybSA9ICh2LmRldmljZVBpeGVsUmF0aW8gfHwgMSkgPCAyID8gInRyYW5zbGF0ZSgiICsgdSArICJweCwgIiArIHAgKyAicHgpIiA6ICJ0cmFuc2xhdGUzZCgiICsgdSArICJweCwgIiArIHAgKyAicHgsIDApIiwgQSkpIDogT2JqZWN0LmFzc2lnbih7fSwgVCwgKChlID0ge30pW2JdID0gZyA/IHAgKyAicHgiIDogIiIsIGVbX10gPSBtID8gdSArICJweCIgOiAiIiwgZS50cmFuc2Zvcm0gPSAiIiwgZSkpIH0gdmFyIFB0ID0geyBuYW1lOiAiY29tcHV0ZVN0eWxlcyIsIGVuYWJsZWQ6ICEwLCBwaGFzZTogImJlZm9yZVdyaXRlIiwgZm46IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gdC5zdGF0ZSwgaSA9IHQub3B0aW9ucywgbiA9IGkuZ3B1QWNjZWxlcmF0aW9uLCBzID0gdm9pZCAwID09PSBuIHx8IG4sIG8gPSBpLmFkYXB0aXZlLCByID0gdm9pZCAwID09PSBvIHx8IG8sIGEgPSBpLnJvdW5kT2Zmc2V0cywgbCA9IHZvaWQgMCA9PT0gYSB8fCBhLCBjID0geyBwbGFjZW1lbnQ6IGd0KGUucGxhY2VtZW50KSwgcG9wcGVyOiBlLmVsZW1lbnRzLnBvcHBlciwgcG9wcGVyUmVjdDogZS5yZWN0cy5wb3BwZXIsIGdwdUFjY2VsZXJhdGlvbjogcyB9OyBudWxsICE9IGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICYmIChlLnN0eWxlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBlLnN0eWxlcy5wb3BwZXIsIE10KE9iamVjdC5hc3NpZ24oe30sIGMsIHsgb2Zmc2V0czogZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsIHBvc2l0aW9uOiBlLm9wdGlvbnMuc3RyYXRlZ3ksIGFkYXB0aXZlOiByLCByb3VuZE9mZnNldHM6IGwgfSkpKSksIG51bGwgIT0gZS5tb2RpZmllcnNEYXRhLmFycm93ICYmIChlLnN0eWxlcy5hcnJvdyA9IE9iamVjdC5hc3NpZ24oe30sIGUuc3R5bGVzLmFycm93LCBNdChPYmplY3QuYXNzaWduKHt9LCBjLCB7IG9mZnNldHM6IGUubW9kaWZpZXJzRGF0YS5hcnJvdywgcG9zaXRpb246ICJhYnNvbHV0ZSIsIGFkYXB0aXZlOiAhMSwgcm91bmRPZmZzZXRzOiBsIH0pKSkpLCBlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgZS5hdHRyaWJ1dGVzLnBvcHBlciwgeyAiZGF0YS1wb3BwZXItcGxhY2VtZW50IjogZS5wbGFjZW1lbnQgfSkgfSwgZGF0YToge30gfSwgSHQgPSB7IHBhc3NpdmU6ICEwIH0sIFJ0ID0geyBuYW1lOiAiZXZlbnRMaXN0ZW5lcnMiLCBlbmFibGVkOiAhMCwgcGhhc2U6ICJ3cml0ZSIsIGZuOiBmdW5jdGlvbiAoKSB7IH0sIGVmZmVjdDogZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0LnN0YXRlLCBpID0gdC5pbnN0YW5jZSwgbiA9IHQub3B0aW9ucywgcyA9IG4uc2Nyb2xsLCBvID0gdm9pZCAwID09PSBzIHx8IHMsIHIgPSBuLnJlc2l6ZSwgYSA9IHZvaWQgMCA9PT0gciB8fCByLCBsID0gZHQoZS5lbGVtZW50cy5wb3BwZXIpLCBjID0gW10uY29uY2F0KGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpOyByZXR1cm4gbyAmJiBjLmZvckVhY2goKGZ1bmN0aW9uICh0KSB7IHQuYWRkRXZlbnRMaXN0ZW5lcigic2Nyb2xsIiwgaS51cGRhdGUsIEh0KSB9KSksIGEgJiYgbC5hZGRFdmVudExpc3RlbmVyKCJyZXNpemUiLCBpLnVwZGF0ZSwgSHQpLCBmdW5jdGlvbiAoKSB7IG8gJiYgYy5mb3JFYWNoKChmdW5jdGlvbiAodCkgeyB0LnJlbW92ZUV2ZW50TGlzdGVuZXIoInNjcm9sbCIsIGkudXBkYXRlLCBIdCkgfSkpLCBhICYmIGwucmVtb3ZlRXZlbnRMaXN0ZW5lcigicmVzaXplIiwgaS51cGRhdGUsIEh0KSB9IH0sIGRhdGE6IHt9IH0sIEJ0ID0geyBsZWZ0OiAicmlnaHQiLCByaWdodDogImxlZnQiLCBib3R0b206ICJ0b3AiLCB0b3A6ICJib3R0b20iIH07IGZ1bmN0aW9uIFd0KHQpIHsgcmV0dXJuIHQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIChmdW5jdGlvbiAodCkgeyByZXR1cm4gQnRbdF0gfSkpIH0gdmFyIHF0ID0geyBzdGFydDogImVuZCIsIGVuZDogInN0YXJ0IiB9OyBmdW5jdGlvbiB6dCh0KSB7IHJldHVybiB0LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCAoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHF0W3RdIH0pKSB9IGZ1bmN0aW9uICR0KHQpIHsgdmFyIGUgPSBkdCh0KTsgcmV0dXJuIHsgc2Nyb2xsTGVmdDogZS5wYWdlWE9mZnNldCwgc2Nyb2xsVG9wOiBlLnBhZ2VZT2Zmc2V0IH0gfSBmdW5jdGlvbiBVdCh0KSB7IHJldHVybiBfdChFdCh0KSkubGVmdCArICR0KHQpLnNjcm9sbExlZnQgfSBmdW5jdGlvbiBGdCh0KSB7IHZhciBlID0geXQodCksIGkgPSBlLm92ZXJmbG93LCBuID0gZS5vdmVyZmxvd1gsIHMgPSBlLm92ZXJmbG93WTsgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChpICsgcyArIG4pIH0gZnVuY3Rpb24gVnQodCwgZSkgeyB2YXIgaTsgdm9pZCAwID09PSBlICYmIChlID0gW10pOyB2YXIgbiA9IGZ1bmN0aW9uIHQoZSkgeyByZXR1cm4gWyJodG1sIiwgImJvZHkiLCAiI2RvY3VtZW50Il0uaW5kZXhPZihodChlKSkgPj0gMCA/IGUub3duZXJEb2N1bWVudC5ib2R5IDogZnQoZSkgJiYgRnQoZSkgPyBlIDogdChBdChlKSkgfSh0KSwgcyA9IG4gPT09IChudWxsID09IChpID0gdC5vd25lckRvY3VtZW50KSA/IHZvaWQgMCA6IGkuYm9keSksIG8gPSBkdChuKSwgciA9IHMgPyBbb10uY29uY2F0KG8udmlzdWFsVmlld3BvcnQgfHwgW10sIEZ0KG4pID8gbiA6IFtdKSA6IG4sIGEgPSBlLmNvbmNhdChyKTsgcmV0dXJuIHMgPyBhIDogYS5jb25jYXQoVnQoQXQocikpKSB9IGZ1bmN0aW9uIEt0KHQpIHsgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHQsIHsgbGVmdDogdC54LCB0b3A6IHQueSwgcmlnaHQ6IHQueCArIHQud2lkdGgsIGJvdHRvbTogdC55ICsgdC5oZWlnaHQgfSkgfSBmdW5jdGlvbiBYdCh0LCBlKSB7IHJldHVybiAidmlld3BvcnQiID09PSBlID8gS3QoZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSBkdCh0KSwgaSA9IEV0KHQpLCBuID0gZS52aXN1YWxWaWV3cG9ydCwgcyA9IGkuY2xpZW50V2lkdGgsIG8gPSBpLmNsaWVudEhlaWdodCwgciA9IDAsIGEgPSAwOyByZXR1cm4gbiAmJiAocyA9IG4ud2lkdGgsIG8gPSBuLmhlaWdodCwgL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAociA9IG4ub2Zmc2V0TGVmdCwgYSA9IG4ub2Zmc2V0VG9wKSksIHsgd2lkdGg6IHMsIGhlaWdodDogbywgeDogciArIFV0KHQpLCB5OiBhIH0gfSh0KSkgOiBmdChlKSA/IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gX3QodCk7IHJldHVybiBlLnRvcCA9IGUudG9wICsgdC5jbGllbnRUb3AsIGUubGVmdCA9IGUubGVmdCArIHQuY2xpZW50TGVmdCwgZS5ib3R0b20gPSBlLnRvcCArIHQuY2xpZW50SGVpZ2h0LCBlLnJpZ2h0ID0gZS5sZWZ0ICsgdC5jbGllbnRXaWR0aCwgZS53aWR0aCA9IHQuY2xpZW50V2lkdGgsIGUuaGVpZ2h0ID0gdC5jbGllbnRIZWlnaHQsIGUueCA9IGUubGVmdCwgZS55ID0gZS50b3AsIGUgfShlKSA6IEt0KGZ1bmN0aW9uICh0KSB7IHZhciBlLCBpID0gRXQodCksIG4gPSAkdCh0KSwgcyA9IG51bGwgPT0gKGUgPSB0Lm93bmVyRG9jdW1lbnQpID8gdm9pZCAwIDogZS5ib2R5LCBvID0ga3QoaS5zY3JvbGxXaWR0aCwgaS5jbGllbnRXaWR0aCwgcyA/IHMuc2Nyb2xsV2lkdGggOiAwLCBzID8gcy5jbGllbnRXaWR0aCA6IDApLCByID0ga3QoaS5zY3JvbGxIZWlnaHQsIGkuY2xpZW50SGVpZ2h0LCBzID8gcy5zY3JvbGxIZWlnaHQgOiAwLCBzID8gcy5jbGllbnRIZWlnaHQgOiAwKSwgYSA9IC1uLnNjcm9sbExlZnQgKyBVdCh0KSwgbCA9IC1uLnNjcm9sbFRvcDsgcmV0dXJuICJydGwiID09PSB5dChzIHx8IGkpLmRpcmVjdGlvbiAmJiAoYSArPSBrdChpLmNsaWVudFdpZHRoLCBzID8gcy5jbGllbnRXaWR0aCA6IDApIC0gbyksIHsgd2lkdGg6IG8sIGhlaWdodDogciwgeDogYSwgeTogbCB9IH0oRXQodCkpKSB9IGZ1bmN0aW9uIFl0KHQpIHsgcmV0dXJuIHQuc3BsaXQoIi0iKVsxXSB9IGZ1bmN0aW9uIFF0KHQpIHsgdmFyIGUsIGkgPSB0LnJlZmVyZW5jZSwgbiA9IHQuZWxlbWVudCwgcyA9IHQucGxhY2VtZW50LCBvID0gcyA/IGd0KHMpIDogbnVsbCwgciA9IHMgPyBZdChzKSA6IG51bGwsIGEgPSBpLnggKyBpLndpZHRoIC8gMiAtIG4ud2lkdGggLyAyLCBsID0gaS55ICsgaS5oZWlnaHQgLyAyIC0gbi5oZWlnaHQgLyAyOyBzd2l0Y2ggKG8pIHsgY2FzZSBpdDogZSA9IHsgeDogYSwgeTogaS55IC0gbi5oZWlnaHQgfTsgYnJlYWs7IGNhc2UgbnQ6IGUgPSB7IHg6IGEsIHk6IGkueSArIGkuaGVpZ2h0IH07IGJyZWFrOyBjYXNlIHN0OiBlID0geyB4OiBpLnggKyBpLndpZHRoLCB5OiBsIH07IGJyZWFrOyBjYXNlIG90OiBlID0geyB4OiBpLnggLSBuLndpZHRoLCB5OiBsIH07IGJyZWFrOyBkZWZhdWx0OiBlID0geyB4OiBpLngsIHk6IGkueSB9IH12YXIgYyA9IG8gPyBDdChvKSA6IG51bGw7IGlmIChudWxsICE9IGMpIHsgdmFyIGggPSAieSIgPT09IGMgPyAiaGVpZ2h0IiA6ICJ3aWR0aCI7IHN3aXRjaCAocikgeyBjYXNlICJzdGFydCI6IGVbY10gPSBlW2NdIC0gKGlbaF0gLyAyIC0gbltoXSAvIDIpOyBicmVhazsgY2FzZSAiZW5kIjogZVtjXSA9IGVbY10gKyAoaVtoXSAvIDIgLSBuW2hdIC8gMikgfSB9IHJldHVybiBlIH0gZnVuY3Rpb24gR3QodCwgZSkgeyB2b2lkIDAgPT09IGUgJiYgKGUgPSB7fSk7IHZhciBpID0gZSwgbiA9IGkucGxhY2VtZW50LCBzID0gdm9pZCAwID09PSBuID8gdC5wbGFjZW1lbnQgOiBuLCBvID0gaS5ib3VuZGFyeSwgciA9IHZvaWQgMCA9PT0gbyA/ICJjbGlwcGluZ1BhcmVudHMiIDogbywgYSA9IGkucm9vdEJvdW5kYXJ5LCBsID0gdm9pZCAwID09PSBhID8gInZpZXdwb3J0IiA6IGEsIGMgPSBpLmVsZW1lbnRDb250ZXh0LCBoID0gdm9pZCAwID09PSBjID8gInBvcHBlciIgOiBjLCBkID0gaS5hbHRCb3VuZGFyeSwgdSA9IHZvaWQgMCAhPT0gZCAmJiBkLCBmID0gaS5wYWRkaW5nLCBwID0gdm9pZCAwID09PSBmID8gMCA6IGYsIG0gPSBTdCgibnVtYmVyIiAhPSB0eXBlb2YgcCA/IHAgOiBJdChwLCBydCkpLCBnID0gInBvcHBlciIgPT09IGggPyAicmVmZXJlbmNlIiA6ICJwb3BwZXIiLCBfID0gdC5lbGVtZW50cy5yZWZlcmVuY2UsIGIgPSB0LnJlY3RzLnBvcHBlciwgdiA9IHQuZWxlbWVudHNbdSA/IGcgOiBoXSwgeSA9IGZ1bmN0aW9uICh0LCBlLCBpKSB7IHZhciBuID0gImNsaXBwaW5nUGFyZW50cyIgPT09IGUgPyBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IFZ0KEF0KHQpKSwgaSA9IFsiYWJzb2x1dGUiLCAiZml4ZWQiXS5pbmRleE9mKHl0KHQpLnBvc2l0aW9uKSA+PSAwICYmIGZ0KHQpID8gT3QodCkgOiB0OyByZXR1cm4gdXQoaSkgPyBlLmZpbHRlcigoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHV0KHQpICYmIHZ0KHQsIGkpICYmICJib2R5IiAhPT0gaHQodCkgfSkpIDogW10gfSh0KSA6IFtdLmNvbmNhdChlKSwgcyA9IFtdLmNvbmNhdChuLCBbaV0pLCBvID0gc1swXSwgciA9IHMucmVkdWNlKChmdW5jdGlvbiAoZSwgaSkgeyB2YXIgbiA9IFh0KHQsIGkpOyByZXR1cm4gZS50b3AgPSBrdChuLnRvcCwgZS50b3ApLCBlLnJpZ2h0ID0gTHQobi5yaWdodCwgZS5yaWdodCksIGUuYm90dG9tID0gTHQobi5ib3R0b20sIGUuYm90dG9tKSwgZS5sZWZ0ID0ga3Qobi5sZWZ0LCBlLmxlZnQpLCBlIH0pLCBYdCh0LCBvKSk7IHJldHVybiByLndpZHRoID0gci5yaWdodCAtIHIubGVmdCwgci5oZWlnaHQgPSByLmJvdHRvbSAtIHIudG9wLCByLnggPSByLmxlZnQsIHIueSA9IHIudG9wLCByIH0odXQodikgPyB2IDogdi5jb250ZXh0RWxlbWVudCB8fCBFdCh0LmVsZW1lbnRzLnBvcHBlciksIHIsIGwpLCB3ID0gX3QoXyksIEUgPSBRdCh7IHJlZmVyZW5jZTogdywgZWxlbWVudDogYiwgc3RyYXRlZ3k6ICJhYnNvbHV0ZSIsIHBsYWNlbWVudDogcyB9KSwgQSA9IEt0KE9iamVjdC5hc3NpZ24oe30sIGIsIEUpKSwgVCA9ICJwb3BwZXIiID09PSBoID8gQSA6IHcsIE8gPSB7IHRvcDogeS50b3AgLSBULnRvcCArIG0udG9wLCBib3R0b206IFQuYm90dG9tIC0geS5ib3R0b20gKyBtLmJvdHRvbSwgbGVmdDogeS5sZWZ0IC0gVC5sZWZ0ICsgbS5sZWZ0LCByaWdodDogVC5yaWdodCAtIHkucmlnaHQgKyBtLnJpZ2h0IH0sIEMgPSB0Lm1vZGlmaWVyc0RhdGEub2Zmc2V0OyBpZiAoInBvcHBlciIgPT09IGggJiYgQykgeyB2YXIgayA9IENbc107IE9iamVjdC5rZXlzKE8pLmZvckVhY2goKGZ1bmN0aW9uICh0KSB7IHZhciBlID0gW3N0LCBudF0uaW5kZXhPZih0KSA+PSAwID8gMSA6IC0xLCBpID0gW2l0LCBudF0uaW5kZXhPZih0KSA+PSAwID8gInkiIDogIngiOyBPW3RdICs9IGtbaV0gKiBlIH0pKSB9IHJldHVybiBPIH0gZnVuY3Rpb24gWnQodCwgZSkgeyB2b2lkIDAgPT09IGUgJiYgKGUgPSB7fSk7IHZhciBpID0gZSwgbiA9IGkucGxhY2VtZW50LCBzID0gaS5ib3VuZGFyeSwgbyA9IGkucm9vdEJvdW5kYXJ5LCByID0gaS5wYWRkaW5nLCBhID0gaS5mbGlwVmFyaWF0aW9ucywgbCA9IGkuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLCBjID0gdm9pZCAwID09PSBsID8gbHQgOiBsLCBoID0gWXQobiksIGQgPSBoID8gYSA/IGF0IDogYXQuZmlsdGVyKChmdW5jdGlvbiAodCkgeyByZXR1cm4gWXQodCkgPT09IGggfSkpIDogcnQsIHUgPSBkLmZpbHRlcigoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIGMuaW5kZXhPZih0KSA+PSAwIH0pKTsgMCA9PT0gdS5sZW5ndGggJiYgKHUgPSBkKTsgdmFyIGYgPSB1LnJlZHVjZSgoZnVuY3Rpb24gKGUsIGkpIHsgcmV0dXJuIGVbaV0gPSBHdCh0LCB7IHBsYWNlbWVudDogaSwgYm91bmRhcnk6IHMsIHJvb3RCb3VuZGFyeTogbywgcGFkZGluZzogciB9KVtndChpKV0sIGUgfSksIHt9KTsgcmV0dXJuIE9iamVjdC5rZXlzKGYpLnNvcnQoKGZ1bmN0aW9uICh0LCBlKSB7IHJldHVybiBmW3RdIC0gZltlXSB9KSkgfSB2YXIgSnQgPSB7IG5hbWU6ICJmbGlwIiwgZW5hYmxlZDogITAsIHBoYXNlOiAibWFpbiIsIGZuOiBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHQuc3RhdGUsIGkgPSB0Lm9wdGlvbnMsIG4gPSB0Lm5hbWU7IGlmICghZS5tb2RpZmllcnNEYXRhW25dLl9za2lwKSB7IGZvciAodmFyIHMgPSBpLm1haW5BeGlzLCBvID0gdm9pZCAwID09PSBzIHx8IHMsIHIgPSBpLmFsdEF4aXMsIGEgPSB2b2lkIDAgPT09IHIgfHwgciwgbCA9IGkuZmFsbGJhY2tQbGFjZW1lbnRzLCBjID0gaS5wYWRkaW5nLCBoID0gaS5ib3VuZGFyeSwgZCA9IGkucm9vdEJvdW5kYXJ5LCB1ID0gaS5hbHRCb3VuZGFyeSwgZiA9IGkuZmxpcFZhcmlhdGlvbnMsIHAgPSB2b2lkIDAgPT09IGYgfHwgZiwgbSA9IGkuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLCBnID0gZS5vcHRpb25zLnBsYWNlbWVudCwgXyA9IGd0KGcpLCBiID0gbCB8fCAoXyAhPT0gZyAmJiBwID8gZnVuY3Rpb24gKHQpIHsgaWYgKCJhdXRvIiA9PT0gZ3QodCkpIHJldHVybiBbXTsgdmFyIGUgPSBXdCh0KTsgcmV0dXJuIFt6dCh0KSwgZSwgenQoZSldIH0oZykgOiBbV3QoZyldKSwgdiA9IFtnXS5jb25jYXQoYikucmVkdWNlKChmdW5jdGlvbiAodCwgaSkgeyByZXR1cm4gdC5jb25jYXQoImF1dG8iID09PSBndChpKSA/IFp0KGUsIHsgcGxhY2VtZW50OiBpLCBib3VuZGFyeTogaCwgcm9vdEJvdW5kYXJ5OiBkLCBwYWRkaW5nOiBjLCBmbGlwVmFyaWF0aW9uczogcCwgYWxsb3dlZEF1dG9QbGFjZW1lbnRzOiBtIH0pIDogaSkgfSksIFtdKSwgeSA9IGUucmVjdHMucmVmZXJlbmNlLCB3ID0gZS5yZWN0cy5wb3BwZXIsIEUgPSBuZXcgTWFwLCBBID0gITAsIFQgPSB2WzBdLCBPID0gMDsgTyA8IHYubGVuZ3RoOyBPKyspIHsgdmFyIEMgPSB2W09dLCBrID0gZ3QoQyksIEwgPSAic3RhcnQiID09PSBZdChDKSwgeCA9IFtpdCwgbnRdLmluZGV4T2YoaykgPj0gMCwgRCA9IHggPyAid2lkdGgiIDogImhlaWdodCIsIFMgPSBHdChlLCB7IHBsYWNlbWVudDogQywgYm91bmRhcnk6IGgsIHJvb3RCb3VuZGFyeTogZCwgYWx0Qm91bmRhcnk6IHUsIHBhZGRpbmc6IGMgfSksIEkgPSB4ID8gTCA/IHN0IDogb3QgOiBMID8gbnQgOiBpdDsgeVtEXSA+IHdbRF0gJiYgKEkgPSBXdChJKSk7IHZhciBOID0gV3QoSSksIGogPSBbXTsgaWYgKG8gJiYgai5wdXNoKFNba10gPD0gMCksIGEgJiYgai5wdXNoKFNbSV0gPD0gMCwgU1tOXSA8PSAwKSwgai5ldmVyeSgoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQgfSkpKSB7IFQgPSBDLCBBID0gITE7IGJyZWFrIH0gRS5zZXQoQywgaikgfSBpZiAoQSkgZm9yICh2YXIgTSA9IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gdi5maW5kKChmdW5jdGlvbiAoZSkgeyB2YXIgaSA9IEUuZ2V0KGUpOyBpZiAoaSkgcmV0dXJuIGkuc2xpY2UoMCwgdCkuZXZlcnkoKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0IH0pKSB9KSk7IGlmIChlKSByZXR1cm4gVCA9IGUsICJicmVhayIgfSwgUCA9IHAgPyAzIDogMTsgUCA+IDAgJiYgImJyZWFrIiAhPT0gTShQKTsgUC0tKTsgZS5wbGFjZW1lbnQgIT09IFQgJiYgKGUubW9kaWZpZXJzRGF0YVtuXS5fc2tpcCA9ICEwLCBlLnBsYWNlbWVudCA9IFQsIGUucmVzZXQgPSAhMCkgfSB9LCByZXF1aXJlc0lmRXhpc3RzOiBbIm9mZnNldCJdLCBkYXRhOiB7IF9za2lwOiAhMSB9IH07IGZ1bmN0aW9uIHRlKHQsIGUsIGkpIHsgcmV0dXJuIHZvaWQgMCA9PT0gaSAmJiAoaSA9IHsgeDogMCwgeTogMCB9KSwgeyB0b3A6IHQudG9wIC0gZS5oZWlnaHQgLSBpLnksIHJpZ2h0OiB0LnJpZ2h0IC0gZS53aWR0aCArIGkueCwgYm90dG9tOiB0LmJvdHRvbSAtIGUuaGVpZ2h0ICsgaS55LCBsZWZ0OiB0LmxlZnQgLSBlLndpZHRoIC0gaS54IH0gfSBmdW5jdGlvbiBlZSh0KSB7IHJldHVybiBbaXQsIHN0LCBudCwgb3RdLnNvbWUoKGZ1bmN0aW9uIChlKSB7IHJldHVybiB0W2VdID49IDAgfSkpIH0gdmFyIGllID0geyBuYW1lOiAiaGlkZSIsIGVuYWJsZWQ6ICEwLCBwaGFzZTogIm1haW4iLCByZXF1aXJlc0lmRXhpc3RzOiBbInByZXZlbnRPdmVyZmxvdyJdLCBmbjogZnVuY3Rpb24gKHQpIHsgdmFyIGUgPSB0LnN0YXRlLCBpID0gdC5uYW1lLCBuID0gZS5yZWN0cy5yZWZlcmVuY2UsIHMgPSBlLnJlY3RzLnBvcHBlciwgbyA9IGUubW9kaWZpZXJzRGF0YS5wcmV2ZW50T3ZlcmZsb3csIHIgPSBHdChlLCB7IGVsZW1lbnRDb250ZXh0OiAicmVmZXJlbmNlIiB9KSwgYSA9IEd0KGUsIHsgYWx0Qm91bmRhcnk6ICEwIH0pLCBsID0gdGUociwgbiksIGMgPSB0ZShhLCBzLCBvKSwgaCA9IGVlKGwpLCBkID0gZWUoYyk7IGUubW9kaWZpZXJzRGF0YVtpXSA9IHsgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzOiBsLCBwb3BwZXJFc2NhcGVPZmZzZXRzOiBjLCBpc1JlZmVyZW5jZUhpZGRlbjogaCwgaGFzUG9wcGVyRXNjYXBlZDogZCB9LCBlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgZS5hdHRyaWJ1dGVzLnBvcHBlciwgeyAiZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbiI6IGgsICJkYXRhLXBvcHBlci1lc2NhcGVkIjogZCB9KSB9IH0sIG5lID0geyBuYW1lOiAib2Zmc2V0IiwgZW5hYmxlZDogITAsIHBoYXNlOiAibWFpbiIsIHJlcXVpcmVzOiBbInBvcHBlck9mZnNldHMiXSwgZm46IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gdC5zdGF0ZSwgaSA9IHQub3B0aW9ucywgbiA9IHQubmFtZSwgcyA9IGkub2Zmc2V0LCBvID0gdm9pZCAwID09PSBzID8gWzAsIDBdIDogcywgciA9IGx0LnJlZHVjZSgoZnVuY3Rpb24gKHQsIGkpIHsgcmV0dXJuIHRbaV0gPSBmdW5jdGlvbiAodCwgZSwgaSkgeyB2YXIgbiA9IGd0KHQpLCBzID0gW290LCBpdF0uaW5kZXhPZihuKSA+PSAwID8gLTEgOiAxLCBvID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgaSA/IGkoT2JqZWN0LmFzc2lnbih7fSwgZSwgeyBwbGFjZW1lbnQ6IHQgfSkpIDogaSwgciA9IG9bMF0sIGEgPSBvWzFdOyByZXR1cm4gciA9IHIgfHwgMCwgYSA9IChhIHx8IDApICogcywgW290LCBzdF0uaW5kZXhPZihuKSA+PSAwID8geyB4OiBhLCB5OiByIH0gOiB7IHg6IHIsIHk6IGEgfSB9KGksIGUucmVjdHMsIG8pLCB0IH0pLCB7fSksIGEgPSByW2UucGxhY2VtZW50XSwgbCA9IGEueCwgYyA9IGEueTsgbnVsbCAhPSBlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAmJiAoZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueCArPSBsLCBlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy55ICs9IGMpLCBlLm1vZGlmaWVyc0RhdGFbbl0gPSByIH0gfSwgc2UgPSB7IG5hbWU6ICJwb3BwZXJPZmZzZXRzIiwgZW5hYmxlZDogITAsIHBoYXNlOiAicmVhZCIsIGZuOiBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHQuc3RhdGUsIGkgPSB0Lm5hbWU7IGUubW9kaWZpZXJzRGF0YVtpXSA9IFF0KHsgcmVmZXJlbmNlOiBlLnJlY3RzLnJlZmVyZW5jZSwgZWxlbWVudDogZS5yZWN0cy5wb3BwZXIsIHN0cmF0ZWd5OiAiYWJzb2x1dGUiLCBwbGFjZW1lbnQ6IGUucGxhY2VtZW50IH0pIH0sIGRhdGE6IHt9IH0sIG9lID0geyBuYW1lOiAicHJldmVudE92ZXJmbG93IiwgZW5hYmxlZDogITAsIHBoYXNlOiAibWFpbiIsIGZuOiBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHQuc3RhdGUsIGkgPSB0Lm9wdGlvbnMsIG4gPSB0Lm5hbWUsIHMgPSBpLm1haW5BeGlzLCBvID0gdm9pZCAwID09PSBzIHx8IHMsIHIgPSBpLmFsdEF4aXMsIGEgPSB2b2lkIDAgIT09IHIgJiYgciwgbCA9IGkuYm91bmRhcnksIGMgPSBpLnJvb3RCb3VuZGFyeSwgaCA9IGkuYWx0Qm91bmRhcnksIGQgPSBpLnBhZGRpbmcsIHUgPSBpLnRldGhlciwgZiA9IHZvaWQgMCA9PT0gdSB8fCB1LCBwID0gaS50ZXRoZXJPZmZzZXQsIG0gPSB2b2lkIDAgPT09IHAgPyAwIDogcCwgZyA9IEd0KGUsIHsgYm91bmRhcnk6IGwsIHJvb3RCb3VuZGFyeTogYywgcGFkZGluZzogZCwgYWx0Qm91bmRhcnk6IGggfSksIF8gPSBndChlLnBsYWNlbWVudCksIGIgPSBZdChlLnBsYWNlbWVudCksIHYgPSAhYiwgeSA9IEN0KF8pLCB3ID0gIngiID09PSB5ID8gInkiIDogIngiLCBFID0gZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsIEEgPSBlLnJlY3RzLnJlZmVyZW5jZSwgVCA9IGUucmVjdHMucG9wcGVyLCBPID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgbSA/IG0oT2JqZWN0LmFzc2lnbih7fSwgZS5yZWN0cywgeyBwbGFjZW1lbnQ6IGUucGxhY2VtZW50IH0pKSA6IG0sIEMgPSB7IHg6IDAsIHk6IDAgfTsgaWYgKEUpIHsgaWYgKG8gfHwgYSkgeyB2YXIgayA9ICJ5IiA9PT0geSA/IGl0IDogb3QsIEwgPSAieSIgPT09IHkgPyBudCA6IHN0LCB4ID0gInkiID09PSB5ID8gImhlaWdodCIgOiAid2lkdGgiLCBEID0gRVt5XSwgUyA9IEVbeV0gKyBnW2tdLCBJID0gRVt5XSAtIGdbTF0sIE4gPSBmID8gLVRbeF0gLyAyIDogMCwgaiA9ICJzdGFydCIgPT09IGIgPyBBW3hdIDogVFt4XSwgTSA9ICJzdGFydCIgPT09IGIgPyAtVFt4XSA6IC1BW3hdLCBQID0gZS5lbGVtZW50cy5hcnJvdywgSCA9IGYgJiYgUCA/IGJ0KFApIDogeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0sIFIgPSBlLm1vZGlmaWVyc0RhdGFbImFycm93I3BlcnNpc3RlbnQiXSA/IGUubW9kaWZpZXJzRGF0YVsiYXJyb3cjcGVyc2lzdGVudCJdLnBhZGRpbmcgOiB7IHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMCwgbGVmdDogMCB9LCBCID0gUltrXSwgVyA9IFJbTF0sIHEgPSBEdCgwLCBBW3hdLCBIW3hdKSwgeiA9IHYgPyBBW3hdIC8gMiAtIE4gLSBxIC0gQiAtIE8gOiBqIC0gcSAtIEIgLSBPLCAkID0gdiA/IC1BW3hdIC8gMiArIE4gKyBxICsgVyArIE8gOiBNICsgcSArIFcgKyBPLCBVID0gZS5lbGVtZW50cy5hcnJvdyAmJiBPdChlLmVsZW1lbnRzLmFycm93KSwgRiA9IFUgPyAieSIgPT09IHkgPyBVLmNsaWVudFRvcCB8fCAwIDogVS5jbGllbnRMZWZ0IHx8IDAgOiAwLCBWID0gZS5tb2RpZmllcnNEYXRhLm9mZnNldCA/IGUubW9kaWZpZXJzRGF0YS5vZmZzZXRbZS5wbGFjZW1lbnRdW3ldIDogMCwgSyA9IEVbeV0gKyB6IC0gViAtIEYsIFggPSBFW3ldICsgJCAtIFY7IGlmIChvKSB7IHZhciBZID0gRHQoZiA/IEx0KFMsIEspIDogUywgRCwgZiA/IGt0KEksIFgpIDogSSk7IEVbeV0gPSBZLCBDW3ldID0gWSAtIEQgfSBpZiAoYSkgeyB2YXIgUSA9ICJ4IiA9PT0geSA/IGl0IDogb3QsIEcgPSAieCIgPT09IHkgPyBudCA6IHN0LCBaID0gRVt3XSwgSiA9IFogKyBnW1FdLCB0dCA9IFogLSBnW0ddLCBldCA9IER0KGYgPyBMdChKLCBLKSA6IEosIFosIGYgPyBrdCh0dCwgWCkgOiB0dCk7IEVbd10gPSBldCwgQ1t3XSA9IGV0IC0gWiB9IH0gZS5tb2RpZmllcnNEYXRhW25dID0gQyB9IH0sIHJlcXVpcmVzSWZFeGlzdHM6IFsib2Zmc2V0Il0gfTsgZnVuY3Rpb24gcmUodCwgZSwgaSkgeyB2b2lkIDAgPT09IGkgJiYgKGkgPSAhMSk7IHZhciBuLCBzLCBvID0gRXQoZSksIHIgPSBfdCh0KSwgYSA9IGZ0KGUpLCBsID0geyBzY3JvbGxMZWZ0OiAwLCBzY3JvbGxUb3A6IDAgfSwgYyA9IHsgeDogMCwgeTogMCB9OyByZXR1cm4gKGEgfHwgIWEgJiYgIWkpICYmICgoImJvZHkiICE9PSBodChlKSB8fCBGdChvKSkgJiYgKGwgPSAobiA9IGUpICE9PSBkdChuKSAmJiBmdChuKSA/IHsgc2Nyb2xsTGVmdDogKHMgPSBuKS5zY3JvbGxMZWZ0LCBzY3JvbGxUb3A6IHMuc2Nyb2xsVG9wIH0gOiAkdChuKSksIGZ0KGUpID8gKChjID0gX3QoZSkpLnggKz0gZS5jbGllbnRMZWZ0LCBjLnkgKz0gZS5jbGllbnRUb3ApIDogbyAmJiAoYy54ID0gVXQobykpKSwgeyB4OiByLmxlZnQgKyBsLnNjcm9sbExlZnQgLSBjLngsIHk6IHIudG9wICsgbC5zY3JvbGxUb3AgLSBjLnksIHdpZHRoOiByLndpZHRoLCBoZWlnaHQ6IHIuaGVpZ2h0IH0gfSB2YXIgYWUgPSB7IHBsYWNlbWVudDogImJvdHRvbSIsIG1vZGlmaWVyczogW10sIHN0cmF0ZWd5OiAiYWJzb2x1dGUiIH07IGZ1bmN0aW9uIGxlKCkgeyBmb3IgKHZhciB0ID0gYXJndW1lbnRzLmxlbmd0aCwgZSA9IG5ldyBBcnJheSh0KSwgaSA9IDA7IGkgPCB0OyBpKyspZVtpXSA9IGFyZ3VtZW50c1tpXTsgcmV0dXJuICFlLnNvbWUoKGZ1bmN0aW9uICh0KSB7IHJldHVybiAhKHQgJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIH0pKSB9IGZ1bmN0aW9uIGNlKHQpIHsgdm9pZCAwID09PSB0ICYmICh0ID0ge30pOyB2YXIgZSA9IHQsIGkgPSBlLmRlZmF1bHRNb2RpZmllcnMsIG4gPSB2b2lkIDAgPT09IGkgPyBbXSA6IGksIHMgPSBlLmRlZmF1bHRPcHRpb25zLCBvID0gdm9pZCAwID09PSBzID8gYWUgOiBzOyByZXR1cm4gZnVuY3Rpb24gKHQsIGUsIGkpIHsgdm9pZCAwID09PSBpICYmIChpID0gbyk7IHZhciBzLCByLCBhID0geyBwbGFjZW1lbnQ6ICJib3R0b20iLCBvcmRlcmVkTW9kaWZpZXJzOiBbXSwgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgYWUsIG8pLCBtb2RpZmllcnNEYXRhOiB7fSwgZWxlbWVudHM6IHsgcmVmZXJlbmNlOiB0LCBwb3BwZXI6IGUgfSwgYXR0cmlidXRlczoge30sIHN0eWxlczoge30gfSwgbCA9IFtdLCBjID0gITEsIGggPSB7IHN0YXRlOiBhLCBzZXRPcHRpb25zOiBmdW5jdGlvbiAoaSkgeyBkKCksIGEub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG8sIGEub3B0aW9ucywgaSksIGEuc2Nyb2xsUGFyZW50cyA9IHsgcmVmZXJlbmNlOiB1dCh0KSA/IFZ0KHQpIDogdC5jb250ZXh0RWxlbWVudCA/IFZ0KHQuY29udGV4dEVsZW1lbnQpIDogW10sIHBvcHBlcjogVnQoZSkgfTsgdmFyIHMsIHIsIGMgPSBmdW5jdGlvbiAodCkgeyB2YXIgZSA9IGZ1bmN0aW9uICh0KSB7IHZhciBlID0gbmV3IE1hcCwgaSA9IG5ldyBTZXQsIG4gPSBbXTsgcmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24gKHQpIHsgZS5zZXQodC5uYW1lLCB0KSB9KSksIHQuZm9yRWFjaCgoZnVuY3Rpb24gKHQpIHsgaS5oYXModC5uYW1lKSB8fCBmdW5jdGlvbiB0KHMpIHsgaS5hZGQocy5uYW1lKSwgW10uY29uY2F0KHMucmVxdWlyZXMgfHwgW10sIHMucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSkuZm9yRWFjaCgoZnVuY3Rpb24gKG4pIHsgaWYgKCFpLmhhcyhuKSkgeyB2YXIgcyA9IGUuZ2V0KG4pOyBzICYmIHQocykgfSB9KSksIG4ucHVzaChzKSB9KHQpIH0pKSwgbiB9KHQpOyByZXR1cm4gY3QucmVkdWNlKChmdW5jdGlvbiAodCwgaSkgeyByZXR1cm4gdC5jb25jYXQoZS5maWx0ZXIoKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LnBoYXNlID09PSBpIH0pKSkgfSksIFtdKSB9KChzID0gW10uY29uY2F0KG4sIGEub3B0aW9ucy5tb2RpZmllcnMpLCByID0gcy5yZWR1Y2UoKGZ1bmN0aW9uICh0LCBlKSB7IHZhciBpID0gdFtlLm5hbWVdOyByZXR1cm4gdFtlLm5hbWVdID0gaSA/IE9iamVjdC5hc3NpZ24oe30sIGksIGUsIHsgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgaS5vcHRpb25zLCBlLm9wdGlvbnMpLCBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBpLmRhdGEsIGUuZGF0YSkgfSkgOiBlLCB0IH0pLCB7fSksIE9iamVjdC5rZXlzKHIpLm1hcCgoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHJbdF0gfSkpKSk7IHJldHVybiBhLm9yZGVyZWRNb2RpZmllcnMgPSBjLmZpbHRlcigoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuZW5hYmxlZCB9KSksIGEub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKChmdW5jdGlvbiAodCkgeyB2YXIgZSA9IHQubmFtZSwgaSA9IHQub3B0aW9ucywgbiA9IHZvaWQgMCA9PT0gaSA/IHt9IDogaSwgcyA9IHQuZWZmZWN0OyBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgcykgeyB2YXIgbyA9IHMoeyBzdGF0ZTogYSwgbmFtZTogZSwgaW5zdGFuY2U6IGgsIG9wdGlvbnM6IG4gfSk7IGwucHVzaChvIHx8IGZ1bmN0aW9uICgpIHsgfSkgfSB9KSksIGgudXBkYXRlKCkgfSwgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uICgpIHsgaWYgKCFjKSB7IHZhciB0ID0gYS5lbGVtZW50cywgZSA9IHQucmVmZXJlbmNlLCBpID0gdC5wb3BwZXI7IGlmIChsZShlLCBpKSkgeyBhLnJlY3RzID0geyByZWZlcmVuY2U6IHJlKGUsIE90KGkpLCAiZml4ZWQiID09PSBhLm9wdGlvbnMuc3RyYXRlZ3kpLCBwb3BwZXI6IGJ0KGkpIH0sIGEucmVzZXQgPSAhMSwgYS5wbGFjZW1lbnQgPSBhLm9wdGlvbnMucGxhY2VtZW50LCBhLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaCgoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIGEubW9kaWZpZXJzRGF0YVt0Lm5hbWVdID0gT2JqZWN0LmFzc2lnbih7fSwgdC5kYXRhKSB9KSk7IGZvciAodmFyIG4gPSAwOyBuIDwgYS5vcmRlcmVkTW9kaWZpZXJzLmxlbmd0aDsgbisrKWlmICghMCAhPT0gYS5yZXNldCkgeyB2YXIgcyA9IGEub3JkZXJlZE1vZGlmaWVyc1tuXSwgbyA9IHMuZm4sIHIgPSBzLm9wdGlvbnMsIGwgPSB2b2lkIDAgPT09IHIgPyB7fSA6IHIsIGQgPSBzLm5hbWU7ICJmdW5jdGlvbiIgPT0gdHlwZW9mIG8gJiYgKGEgPSBvKHsgc3RhdGU6IGEsIG9wdGlvbnM6IGwsIG5hbWU6IGQsIGluc3RhbmNlOiBoIH0pIHx8IGEpIH0gZWxzZSBhLnJlc2V0ID0gITEsIG4gPSAtMSB9IH0gfSwgdXBkYXRlOiAocyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbiAodCkgeyBoLmZvcmNlVXBkYXRlKCksIHQoYSkgfSkpIH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHIgfHwgKHIgPSBuZXcgUHJvbWlzZSgoZnVuY3Rpb24gKHQpIHsgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoZnVuY3Rpb24gKCkgeyByID0gdm9pZCAwLCB0KHMoKSkgfSkpIH0pKSksIHIgfSksIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHsgZCgpLCBjID0gITAgfSB9OyBpZiAoIWxlKHQsIGUpKSByZXR1cm4gaDsgZnVuY3Rpb24gZCgpIHsgbC5mb3JFYWNoKChmdW5jdGlvbiAodCkgeyByZXR1cm4gdCgpIH0pKSwgbCA9IFtdIH0gcmV0dXJuIGguc2V0T3B0aW9ucyhpKS50aGVuKChmdW5jdGlvbiAodCkgeyAhYyAmJiBpLm9uRmlyc3RVcGRhdGUgJiYgaS5vbkZpcnN0VXBkYXRlKHQpIH0pKSwgaCB9IH0gdmFyIGhlID0gY2UoKSwgZGUgPSBjZSh7IGRlZmF1bHRNb2RpZmllcnM6IFtSdCwgc2UsIFB0LCBtdF0gfSksIHVlID0gY2UoeyBkZWZhdWx0TW9kaWZpZXJzOiBbUnQsIHNlLCBQdCwgbXQsIG5lLCBKdCwgb2UsIE50LCBpZV0gfSksIGZlID0gT2JqZWN0LmZyZWV6ZSh7IF9fcHJvdG9fXzogbnVsbCwgcG9wcGVyR2VuZXJhdG9yOiBjZSwgZGV0ZWN0T3ZlcmZsb3c6IEd0LCBjcmVhdGVQb3BwZXJCYXNlOiBoZSwgY3JlYXRlUG9wcGVyOiB1ZSwgY3JlYXRlUG9wcGVyTGl0ZTogZGUsIHRvcDogaXQsIGJvdHRvbTogbnQsIHJpZ2h0OiBzdCwgbGVmdDogb3QsIGF1dG86ICJhdXRvIiwgYmFzZVBsYWNlbWVudHM6IHJ0LCBzdGFydDogInN0YXJ0IiwgZW5kOiAiZW5kIiwgY2xpcHBpbmdQYXJlbnRzOiAiY2xpcHBpbmdQYXJlbnRzIiwgdmlld3BvcnQ6ICJ2aWV3cG9ydCIsIHBvcHBlcjogInBvcHBlciIsIHJlZmVyZW5jZTogInJlZmVyZW5jZSIsIHZhcmlhdGlvblBsYWNlbWVudHM6IGF0LCBwbGFjZW1lbnRzOiBsdCwgYmVmb3JlUmVhZDogImJlZm9yZVJlYWQiLCByZWFkOiAicmVhZCIsIGFmdGVyUmVhZDogImFmdGVyUmVhZCIsIGJlZm9yZU1haW46ICJiZWZvcmVNYWluIiwgbWFpbjogIm1haW4iLCBhZnRlck1haW46ICJhZnRlck1haW4iLCBiZWZvcmVXcml0ZTogImJlZm9yZVdyaXRlIiwgd3JpdGU6ICJ3cml0ZSIsIGFmdGVyV3JpdGU6ICJhZnRlcldyaXRlIiwgbW9kaWZpZXJQaGFzZXM6IGN0LCBhcHBseVN0eWxlczogbXQsIGFycm93OiBOdCwgY29tcHV0ZVN0eWxlczogUHQsIGV2ZW50TGlzdGVuZXJzOiBSdCwgZmxpcDogSnQsIGhpZGU6IGllLCBvZmZzZXQ6IG5lLCBwb3BwZXJPZmZzZXRzOiBzZSwgcHJldmVudE92ZXJmbG93OiBvZSB9KTsgY29uc3QgcGUgPSBuZXcgUmVnRXhwKCJBcnJvd1VwfEFycm93RG93bnxFc2NhcGUiKSwgbWUgPSBnKCkgPyAidG9wLWVuZCIgOiAidG9wLXN0YXJ0IiwgZ2UgPSBnKCkgPyAidG9wLXN0YXJ0IiA6ICJ0b3AtZW5kIiwgX2UgPSBnKCkgPyAiYm90dG9tLWVuZCIgOiAiYm90dG9tLXN0YXJ0IiwgYmUgPSBnKCkgPyAiYm90dG9tLXN0YXJ0IiA6ICJib3R0b20tZW5kIiwgdmUgPSBnKCkgPyAibGVmdC1zdGFydCIgOiAicmlnaHQtc3RhcnQiLCB5ZSA9IGcoKSA/ICJyaWdodC1zdGFydCIgOiAibGVmdC1zdGFydCIsIHdlID0geyBvZmZzZXQ6IFswLCAyXSwgYm91bmRhcnk6ICJjbGlwcGluZ1BhcmVudHMiLCByZWZlcmVuY2U6ICJ0b2dnbGUiLCBkaXNwbGF5OiAiZHluYW1pYyIsIHBvcHBlckNvbmZpZzogbnVsbCwgYXV0b0Nsb3NlOiAhMCB9LCBFZSA9IHsgb2Zmc2V0OiAiKGFycmF5fHN0cmluZ3xmdW5jdGlvbikiLCBib3VuZGFyeTogIihzdHJpbmd8ZWxlbWVudCkiLCByZWZlcmVuY2U6ICIoc3RyaW5nfGVsZW1lbnR8b2JqZWN0KSIsIGRpc3BsYXk6ICJzdHJpbmciLCBwb3BwZXJDb25maWc6ICIobnVsbHxvYmplY3R8ZnVuY3Rpb24pIiwgYXV0b0Nsb3NlOiAiKGJvb2xlYW58c3RyaW5nKSIgfTsgY2xhc3MgQWUgZXh0ZW5kcyBCIHsgY29uc3RydWN0b3IodCwgZSkgeyBzdXBlcih0KSwgdGhpcy5fcG9wcGVyID0gbnVsbCwgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGUpLCB0aGlzLl9tZW51ID0gdGhpcy5fZ2V0TWVudUVsZW1lbnQoKSwgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKSwgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKSB9IHN0YXRpYyBnZXQgRGVmYXVsdCgpIHsgcmV0dXJuIHdlIH0gc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHsgcmV0dXJuIEVlIH0gc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gImRyb3Bkb3duIiB9IHRvZ2dsZSgpIHsgaCh0aGlzLl9lbGVtZW50KSB8fCAodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoInNob3ciKSA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KCkpIH0gc2hvdygpIHsgaWYgKGgodGhpcy5fZWxlbWVudCkgfHwgdGhpcy5fbWVudS5jbGFzc0xpc3QuY29udGFpbnMoInNob3ciKSkgcmV0dXJuOyBjb25zdCB0ID0gQWUuZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCksIGUgPSB7IHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnQgfTsgaWYgKCFQLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgInNob3cuYnMuZHJvcGRvd24iLCBlKS5kZWZhdWx0UHJldmVudGVkKSB7IGlmICh0aGlzLl9pbk5hdmJhcikgVS5zZXREYXRhQXR0cmlidXRlKHRoaXMuX21lbnUsICJwb3BwZXIiLCAibm9uZSIpOyBlbHNlIHsgaWYgKHZvaWQgMCA9PT0gZmUpIHRocm93IG5ldyBUeXBlRXJyb3IoIkJvb3RzdHJhcCdzIGRyb3Bkb3ducyByZXF1aXJlIFBvcHBlciAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKSIpOyBsZXQgZSA9IHRoaXMuX2VsZW1lbnQ7ICJwYXJlbnQiID09PSB0aGlzLl9jb25maWcucmVmZXJlbmNlID8gZSA9IHQgOiByKHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpID8gZSA9IGEodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkgOiAib2JqZWN0IiA9PSB0eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZSAmJiAoZSA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpOyBjb25zdCBpID0gdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCksIG4gPSBpLm1vZGlmaWVycy5maW5kKHQgPT4gImFwcGx5U3R5bGVzIiA9PT0gdC5uYW1lICYmICExID09PSB0LmVuYWJsZWQpOyB0aGlzLl9wb3BwZXIgPSB1ZShlLCB0aGlzLl9tZW51LCBpKSwgbiAmJiBVLnNldERhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSwgInBvcHBlciIsICJzdGF0aWMiKSB9ICJvbnRvdWNoc3RhcnQiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAhdC5jbG9zZXN0KCIubmF2YmFyLW5hdiIpICYmIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKS5mb3JFYWNoKHQgPT4gUC5vbih0LCAibW91c2VvdmVyIiwgdSkpLCB0aGlzLl9lbGVtZW50LmZvY3VzKCksIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCJhcmlhLWV4cGFuZGVkIiwgITApLCB0aGlzLl9tZW51LmNsYXNzTGlzdC50b2dnbGUoInNob3ciKSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCJzaG93IiksIFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCAic2hvd24uYnMuZHJvcGRvd24iLCBlKSB9IH0gaGlkZSgpIHsgaWYgKGgodGhpcy5fZWxlbWVudCkgfHwgIXRoaXMuX21lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKCJzaG93IikpIHJldHVybjsgY29uc3QgdCA9IHsgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudCB9OyB0aGlzLl9jb21wbGV0ZUhpZGUodCkgfSBkaXNwb3NlKCkgeyB0aGlzLl9wb3BwZXIgJiYgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKSwgc3VwZXIuZGlzcG9zZSgpIH0gdXBkYXRlKCkgeyB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpLCB0aGlzLl9wb3BwZXIgJiYgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpIH0gX2FkZEV2ZW50TGlzdGVuZXJzKCkgeyBQLm9uKHRoaXMuX2VsZW1lbnQsICJjbGljay5icy5kcm9wZG93biIsIHQgPT4geyB0LnByZXZlbnREZWZhdWx0KCksIHRoaXMudG9nZ2xlKCkgfSkgfSBfY29tcGxldGVIaWRlKHQpIHsgUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsICJoaWRlLmJzLmRyb3Bkb3duIiwgdCkuZGVmYXVsdFByZXZlbnRlZCB8fCAoIm9udG91Y2hzdGFydCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKS5mb3JFYWNoKHQgPT4gUC5vZmYodCwgIm1vdXNlb3ZlciIsIHUpKSwgdGhpcy5fcG9wcGVyICYmIHRoaXMuX3BvcHBlci5kZXN0cm95KCksIHRoaXMuX21lbnUuY2xhc3NMaXN0LnJlbW92ZSgic2hvdyIpLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoInNob3ciKSwgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoImFyaWEtZXhwYW5kZWQiLCAiZmFsc2UiKSwgVS5yZW1vdmVEYXRhQXR0cmlidXRlKHRoaXMuX21lbnUsICJwb3BwZXIiKSwgUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsICJoaWRkZW4uYnMuZHJvcGRvd24iLCB0KSkgfSBfZ2V0Q29uZmlnKHQpIHsgaWYgKHQgPSB7IC4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCwgLi4uVS5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSwgLi4udCB9LCBsKCJkcm9wZG93biIsIHQsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpLCAib2JqZWN0IiA9PSB0eXBlb2YgdC5yZWZlcmVuY2UgJiYgIXIodC5yZWZlcmVuY2UpICYmICJmdW5jdGlvbiIgIT0gdHlwZW9mIHQucmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkgdGhyb3cgbmV3IFR5cGVFcnJvcigiZHJvcGRvd24iLnRvVXBwZXJDYXNlKCkgKyAnOiBPcHRpb24gInJlZmVyZW5jZSIgcHJvdmlkZWQgdHlwZSAib2JqZWN0IiB3aXRob3V0IGEgcmVxdWlyZWQgImdldEJvdW5kaW5nQ2xpZW50UmVjdCIgbWV0aG9kLicpOyByZXR1cm4gdCB9IF9nZXRNZW51RWxlbWVudCgpIHsgcmV0dXJuIHQubmV4dCh0aGlzLl9lbGVtZW50LCAiLmRyb3Bkb3duLW1lbnUiKVswXSB9IF9nZXRQbGFjZW1lbnQoKSB7IGNvbnN0IHQgPSB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGU7IGlmICh0LmNsYXNzTGlzdC5jb250YWlucygiZHJvcGVuZCIpKSByZXR1cm4gdmU7IGlmICh0LmNsYXNzTGlzdC5jb250YWlucygiZHJvcHN0YXJ0IikpIHJldHVybiB5ZTsgY29uc3QgZSA9ICJlbmQiID09PSBnZXRDb21wdXRlZFN0eWxlKHRoaXMuX21lbnUpLmdldFByb3BlcnR5VmFsdWUoIi0tYnMtcG9zaXRpb24iKS50cmltKCk7IHJldHVybiB0LmNsYXNzTGlzdC5jb250YWlucygiZHJvcHVwIikgPyBlID8gZ2UgOiBtZSA6IGUgPyBiZSA6IF9lIH0gX2RldGVjdE5hdmJhcigpIHsgcmV0dXJuIG51bGwgIT09IHRoaXMuX2VsZW1lbnQuY2xvc2VzdCgiLm5hdmJhciIpIH0gX2dldE9mZnNldCgpIHsgY29uc3QgeyBvZmZzZXQ6IHQgfSA9IHRoaXMuX2NvbmZpZzsgcmV0dXJuICJzdHJpbmciID09IHR5cGVvZiB0ID8gdC5zcGxpdCgiLCIpLm1hcCh0ID0+IE51bWJlci5wYXJzZUludCh0LCAxMCkpIDogImZ1bmN0aW9uIiA9PSB0eXBlb2YgdCA/IGUgPT4gdChlLCB0aGlzLl9lbGVtZW50KSA6IHQgfSBfZ2V0UG9wcGVyQ29uZmlnKCkgeyBjb25zdCB0ID0geyBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLCBtb2RpZmllcnM6IFt7IG5hbWU6ICJwcmV2ZW50T3ZlcmZsb3ciLCBvcHRpb25zOiB7IGJvdW5kYXJ5OiB0aGlzLl9jb25maWcuYm91bmRhcnkgfSB9LCB7IG5hbWU6ICJvZmZzZXQiLCBvcHRpb25zOiB7IG9mZnNldDogdGhpcy5fZ2V0T2Zmc2V0KCkgfSB9XSB9OyByZXR1cm4gInN0YXRpYyIgPT09IHRoaXMuX2NvbmZpZy5kaXNwbGF5ICYmICh0Lm1vZGlmaWVycyA9IFt7IG5hbWU6ICJhcHBseVN0eWxlcyIsIGVuYWJsZWQ6ICExIH1dKSwgeyAuLi50LCAuLi4iZnVuY3Rpb24iID09IHR5cGVvZiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnID8gdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyh0KSA6IHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcgfSB9IF9zZWxlY3RNZW51SXRlbSh7IGtleTogZSwgdGFyZ2V0OiBpIH0pIHsgY29uc3QgbiA9IHQuZmluZCgiLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCkiLCB0aGlzLl9tZW51KS5maWx0ZXIoYyk7IG4ubGVuZ3RoICYmIHkobiwgaSwgIkFycm93RG93biIgPT09IGUsICFuLmluY2x1ZGVzKGkpKS5mb2N1cygpIH0gc3RhdGljIGRyb3Bkb3duSW50ZXJmYWNlKHQsIGUpIHsgY29uc3QgaSA9IEFlLmdldE9yQ3JlYXRlSW5zdGFuY2UodCwgZSk7IGlmICgic3RyaW5nIiA9PSB0eXBlb2YgZSkgeyBpZiAodm9pZCAwID09PSBpW2VdKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgIiR7ZX0iYCk7IGlbZV0oKSB9IH0gc3RhdGljIGpRdWVyeUludGVyZmFjZSh0KSB7IHJldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uICgpIHsgQWUuZHJvcGRvd25JbnRlcmZhY2UodGhpcywgdCkgfSkpIH0gc3RhdGljIGNsZWFyTWVudXMoZSkgeyBpZiAoZSAmJiAoMiA9PT0gZS5idXR0b24gfHwgImtleXVwIiA9PT0gZS50eXBlICYmICJUYWIiICE9PSBlLmtleSkpIHJldHVybjsgY29uc3QgaSA9IHQuZmluZCgnW2RhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biJdJyk7IGZvciAobGV0IHQgPSAwLCBuID0gaS5sZW5ndGg7IHQgPCBuOyB0KyspIHsgY29uc3QgbiA9IEFlLmdldEluc3RhbmNlKGlbdF0pOyBpZiAoIW4gfHwgITEgPT09IG4uX2NvbmZpZy5hdXRvQ2xvc2UpIGNvbnRpbnVlOyBpZiAoIW4uX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCJzaG93IikpIGNvbnRpbnVlOyBjb25zdCBzID0geyByZWxhdGVkVGFyZ2V0OiBuLl9lbGVtZW50IH07IGlmIChlKSB7IGNvbnN0IHQgPSBlLmNvbXBvc2VkUGF0aCgpLCBpID0gdC5pbmNsdWRlcyhuLl9tZW51KTsgaWYgKHQuaW5jbHVkZXMobi5fZWxlbWVudCkgfHwgImluc2lkZSIgPT09IG4uX2NvbmZpZy5hdXRvQ2xvc2UgJiYgIWkgfHwgIm91dHNpZGUiID09PSBuLl9jb25maWcuYXV0b0Nsb3NlICYmIGkpIGNvbnRpbnVlOyBpZiAobi5fbWVudS5jb250YWlucyhlLnRhcmdldCkgJiYgKCJrZXl1cCIgPT09IGUudHlwZSAmJiAiVGFiIiA9PT0gZS5rZXkgfHwgL2lucHV0fHNlbGVjdHxvcHRpb258dGV4dGFyZWF8Zm9ybS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkpKSBjb250aW51ZTsgImNsaWNrIiA9PT0gZS50eXBlICYmIChzLmNsaWNrRXZlbnQgPSBlKSB9IG4uX2NvbXBsZXRlSGlkZShzKSB9IH0gc3RhdGljIGdldFBhcmVudEZyb21FbGVtZW50KHQpIHsgcmV0dXJuIHModCkgfHwgdC5wYXJlbnROb2RlIH0gc3RhdGljIGRhdGFBcGlLZXlkb3duSGFuZGxlcihlKSB7IGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpID8gIlNwYWNlIiA9PT0gZS5rZXkgfHwgIkVzY2FwZSIgIT09IGUua2V5ICYmICgiQXJyb3dEb3duIiAhPT0gZS5rZXkgJiYgIkFycm93VXAiICE9PSBlLmtleSB8fCBlLnRhcmdldC5jbG9zZXN0KCIuZHJvcGRvd24tbWVudSIpKSA6ICFwZS50ZXN0KGUua2V5KSkgcmV0dXJuOyBjb25zdCBpID0gdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoInNob3ciKTsgaWYgKCFpICYmICJFc2NhcGUiID09PSBlLmtleSkgcmV0dXJuOyBpZiAoZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BQcm9wYWdhdGlvbigpLCBoKHRoaXMpKSByZXR1cm47IGNvbnN0IG4gPSAoKSA9PiB0aGlzLm1hdGNoZXMoJ1tkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iXScpID8gdGhpcyA6IHQucHJldih0aGlzLCAnW2RhdGEtYnMtdG9nZ2xlPSJkcm9wZG93biJdJylbMF07IHJldHVybiAiRXNjYXBlIiA9PT0gZS5rZXkgPyAobigpLmZvY3VzKCksIHZvaWQgQWUuY2xlYXJNZW51cygpKSA6ICJBcnJvd1VwIiA9PT0gZS5rZXkgfHwgIkFycm93RG93biIgPT09IGUua2V5ID8gKGkgfHwgbigpLmNsaWNrKCksIHZvaWQgQWUuZ2V0SW5zdGFuY2UobigpKS5fc2VsZWN0TWVudUl0ZW0oZSkpIDogdm9pZCAoaSAmJiAiU3BhY2UiICE9PSBlLmtleSB8fCBBZS5jbGVhck1lbnVzKCkpIH0gfSBQLm9uKGRvY3VtZW50LCAia2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaSIsICdbZGF0YS1icy10b2dnbGU9ImRyb3Bkb3duIl0nLCBBZS5kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLCBQLm9uKGRvY3VtZW50LCAia2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaSIsICIuZHJvcGRvd24tbWVudSIsIEFlLmRhdGFBcGlLZXlkb3duSGFuZGxlciksIFAub24oZG9jdW1lbnQsICJjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaSIsIEFlLmNsZWFyTWVudXMpLCBQLm9uKGRvY3VtZW50LCAia2V5dXAuYnMuZHJvcGRvd24uZGF0YS1hcGkiLCBBZS5jbGVhck1lbnVzKSwgUC5vbihkb2N1bWVudCwgImNsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpIiwgJ1tkYXRhLWJzLXRvZ2dsZT0iZHJvcGRvd24iXScsIChmdW5jdGlvbiAodCkgeyB0LnByZXZlbnREZWZhdWx0KCksIEFlLmRyb3Bkb3duSW50ZXJmYWNlKHRoaXMpIH0pKSwgXyhBZSk7IGNsYXNzIFRlIHsgY29uc3RydWN0b3IoKSB7IHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5ib2R5IH0gZ2V0V2lkdGgoKSB7IGNvbnN0IHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7IHJldHVybiBNYXRoLmFicyh3aW5kb3cuaW5uZXJXaWR0aCAtIHQpIH0gaGlkZSgpIHsgY29uc3QgdCA9IHRoaXMuZ2V0V2lkdGgoKTsgdGhpcy5fZGlzYWJsZU92ZXJGbG93KCksIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsICJwYWRkaW5nUmlnaHQiLCBlID0+IGUgKyB0KSwgdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXMoIi5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AiLCAicGFkZGluZ1JpZ2h0IiwgZSA9PiBlICsgdCksIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKCIuc3RpY2t5LXRvcCIsICJtYXJnaW5SaWdodCIsIGUgPT4gZSAtIHQpIH0gX2Rpc2FibGVPdmVyRmxvdygpIHsgdGhpcy5fc2F2ZUluaXRpYWxBdHRyaWJ1dGUodGhpcy5fZWxlbWVudCwgIm92ZXJmbG93IiksIHRoaXMuX2VsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSAiaGlkZGVuIiB9IF9zZXRFbGVtZW50QXR0cmlidXRlcyh0LCBlLCBpKSB7IGNvbnN0IG4gPSB0aGlzLmdldFdpZHRoKCk7IHRoaXMuX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2sodCwgdCA9PiB7IGlmICh0ICE9PSB0aGlzLl9lbGVtZW50ICYmIHdpbmRvdy5pbm5lcldpZHRoID4gdC5jbGllbnRXaWR0aCArIG4pIHJldHVybjsgdGhpcy5fc2F2ZUluaXRpYWxBdHRyaWJ1dGUodCwgZSk7IGNvbnN0IHMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0KVtlXTsgdC5zdHlsZVtlXSA9IGkoTnVtYmVyLnBhcnNlRmxvYXQocykpICsgInB4IiB9KSB9IHJlc2V0KCkgeyB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsICJvdmVyZmxvdyIpLCB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsICJwYWRkaW5nUmlnaHQiKSwgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcygiLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcCIsICJwYWRkaW5nUmlnaHQiKSwgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcygiLnN0aWNreS10b3AiLCAibWFyZ2luUmlnaHQiKSB9IF9zYXZlSW5pdGlhbEF0dHJpYnV0ZSh0LCBlKSB7IGNvbnN0IGkgPSB0LnN0eWxlW2VdOyBpICYmIFUuc2V0RGF0YUF0dHJpYnV0ZSh0LCBlLCBpKSB9IF9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHQsIGUpIHsgdGhpcy5fYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayh0LCB0ID0+IHsgY29uc3QgaSA9IFUuZ2V0RGF0YUF0dHJpYnV0ZSh0LCBlKTsgdm9pZCAwID09PSBpID8gdC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShlKSA6IChVLnJlbW92ZURhdGFBdHRyaWJ1dGUodCwgZSksIHQuc3R5bGVbZV0gPSBpKSB9KSB9IF9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKGUsIGkpIHsgcihlKSA/IGkoZSkgOiB0LmZpbmQoZSwgdGhpcy5fZWxlbWVudCkuZm9yRWFjaChpKSB9IGlzT3ZlcmZsb3dpbmcoKSB7IHJldHVybiB0aGlzLmdldFdpZHRoKCkgPiAwIH0gfSBjb25zdCBPZSA9IHsgaXNWaXNpYmxlOiAhMCwgaXNBbmltYXRlZDogITEsIHJvb3RFbGVtZW50OiAiYm9keSIsIGNsaWNrQ2FsbGJhY2s6IG51bGwgfSwgQ2UgPSB7IGlzVmlzaWJsZTogImJvb2xlYW4iLCBpc0FuaW1hdGVkOiAiYm9vbGVhbiIsIHJvb3RFbGVtZW50OiAiKGVsZW1lbnR8c3RyaW5nKSIsIGNsaWNrQ2FsbGJhY2s6ICIoZnVuY3Rpb258bnVsbCkiIH07IGNsYXNzIGtlIHsgY29uc3RydWN0b3IodCkgeyB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcodCksIHRoaXMuX2lzQXBwZW5kZWQgPSAhMSwgdGhpcy5fZWxlbWVudCA9IG51bGwgfSBzaG93KHQpIHsgdGhpcy5fY29uZmlnLmlzVmlzaWJsZSA/ICh0aGlzLl9hcHBlbmQoKSwgdGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQgJiYgZih0aGlzLl9nZXRFbGVtZW50KCkpLCB0aGlzLl9nZXRFbGVtZW50KCkuY2xhc3NMaXN0LmFkZCgic2hvdyIpLCB0aGlzLl9lbXVsYXRlQW5pbWF0aW9uKCgpID0+IHsgYih0KSB9KSkgOiBiKHQpIH0gaGlkZSh0KSB7IHRoaXMuX2NvbmZpZy5pc1Zpc2libGUgPyAodGhpcy5fZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5yZW1vdmUoInNob3ciKSwgdGhpcy5fZW11bGF0ZUFuaW1hdGlvbigoKSA9PiB7IHRoaXMuZGlzcG9zZSgpLCBiKHQpIH0pKSA6IGIodCkgfSBfZ2V0RWxlbWVudCgpIHsgaWYgKCF0aGlzLl9lbGVtZW50KSB7IGNvbnN0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsgdC5jbGFzc05hbWUgPSAibW9kYWwtYmFja2Ryb3AiLCB0aGlzLl9jb25maWcuaXNBbmltYXRlZCAmJiB0LmNsYXNzTGlzdC5hZGQoImZhZGUiKSwgdGhpcy5fZWxlbWVudCA9IHQgfSByZXR1cm4gdGhpcy5fZWxlbWVudCB9IF9nZXRDb25maWcodCkgeyByZXR1cm4gKHQgPSB7IC4uLk9lLCAuLi4ib2JqZWN0IiA9PSB0eXBlb2YgdCA/IHQgOiB7fSB9KS5yb290RWxlbWVudCA9IGEodC5yb290RWxlbWVudCksIGwoImJhY2tkcm9wIiwgdCwgQ2UpLCB0IH0gX2FwcGVuZCgpIHsgdGhpcy5faXNBcHBlbmRlZCB8fCAodGhpcy5fY29uZmlnLnJvb3RFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2dldEVsZW1lbnQoKSksIFAub24odGhpcy5fZ2V0RWxlbWVudCgpLCAibW91c2Vkb3duLmJzLmJhY2tkcm9wIiwgKCkgPT4geyBiKHRoaXMuX2NvbmZpZy5jbGlja0NhbGxiYWNrKSB9KSwgdGhpcy5faXNBcHBlbmRlZCA9ICEwKSB9IGRpc3Bvc2UoKSB7IHRoaXMuX2lzQXBwZW5kZWQgJiYgKFAub2ZmKHRoaXMuX2VsZW1lbnQsICJtb3VzZWRvd24uYnMuYmFja2Ryb3AiKSwgdGhpcy5fZWxlbWVudC5yZW1vdmUoKSwgdGhpcy5faXNBcHBlbmRlZCA9ICExKSB9IF9lbXVsYXRlQW5pbWF0aW9uKHQpIHsgdih0LCB0aGlzLl9nZXRFbGVtZW50KCksIHRoaXMuX2NvbmZpZy5pc0FuaW1hdGVkKSB9IH0gY29uc3QgTGUgPSB7IGJhY2tkcm9wOiAhMCwga2V5Ym9hcmQ6ICEwLCBmb2N1czogITAgfSwgeGUgPSB7IGJhY2tkcm9wOiAiKGJvb2xlYW58c3RyaW5nKSIsIGtleWJvYXJkOiAiYm9vbGVhbiIsIGZvY3VzOiAiYm9vbGVhbiIgfTsgY2xhc3MgRGUgZXh0ZW5kcyBCIHsgY29uc3RydWN0b3IoZSwgaSkgeyBzdXBlcihlKSwgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGkpLCB0aGlzLl9kaWFsb2cgPSB0LmZpbmRPbmUoIi5tb2RhbC1kaWFsb2ciLCB0aGlzLl9lbGVtZW50KSwgdGhpcy5fYmFja2Ryb3AgPSB0aGlzLl9pbml0aWFsaXplQmFja0Ryb3AoKSwgdGhpcy5faXNTaG93biA9ICExLCB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gITEsIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9ICExLCB0aGlzLl9zY3JvbGxCYXIgPSBuZXcgVGUgfSBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7IHJldHVybiBMZSB9IHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuICJtb2RhbCIgfSB0b2dnbGUodCkgeyByZXR1cm4gdGhpcy5faXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KHQpIH0gc2hvdyh0KSB7IHRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8IFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCAic2hvdy5icy5tb2RhbCIsIHsgcmVsYXRlZFRhcmdldDogdCB9KS5kZWZhdWx0UHJldmVudGVkIHx8ICh0aGlzLl9pc1Nob3duID0gITAsIHRoaXMuX2lzQW5pbWF0ZWQoKSAmJiAodGhpcy5faXNUcmFuc2l0aW9uaW5nID0gITApLCB0aGlzLl9zY3JvbGxCYXIuaGlkZSgpLCBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoIm1vZGFsLW9wZW4iKSwgdGhpcy5fYWRqdXN0RGlhbG9nKCksIHRoaXMuX3NldEVzY2FwZUV2ZW50KCksIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCksIFAub24odGhpcy5fZWxlbWVudCwgImNsaWNrLmRpc21pc3MuYnMubW9kYWwiLCAnW2RhdGEtYnMtZGlzbWlzcz0ibW9kYWwiXScsIHQgPT4gdGhpcy5oaWRlKHQpKSwgUC5vbih0aGlzLl9kaWFsb2csICJtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbCIsICgpID0+IHsgUC5vbmUodGhpcy5fZWxlbWVudCwgIm1vdXNldXAuZGlzbWlzcy5icy5tb2RhbCIsIHQgPT4geyB0LnRhcmdldCA9PT0gdGhpcy5fZWxlbWVudCAmJiAodGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9ICEwKSB9KSB9KSwgdGhpcy5fc2hvd0JhY2tkcm9wKCgpID0+IHRoaXMuX3Nob3dFbGVtZW50KHQpKSkgfSBoaWRlKHQpIHsgaWYgKHQgJiYgWyJBIiwgIkFSRUEiXS5pbmNsdWRlcyh0LnRhcmdldC50YWdOYW1lKSAmJiB0LnByZXZlbnREZWZhdWx0KCksICF0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykgcmV0dXJuOyBpZiAoUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsICJoaWRlLmJzLm1vZGFsIikuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuOyB0aGlzLl9pc1Nob3duID0gITE7IGNvbnN0IGUgPSB0aGlzLl9pc0FuaW1hdGVkKCk7IGUgJiYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9ICEwKSwgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKSwgdGhpcy5fc2V0UmVzaXplRXZlbnQoKSwgUC5vZmYoZG9jdW1lbnQsICJmb2N1c2luLmJzLm1vZGFsIiksIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgic2hvdyIpLCBQLm9mZih0aGlzLl9lbGVtZW50LCAiY2xpY2suZGlzbWlzcy5icy5tb2RhbCIpLCBQLm9mZih0aGlzLl9kaWFsb2csICJtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbCIpLCB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHRoaXMuX2hpZGVNb2RhbCgpLCB0aGlzLl9lbGVtZW50LCBlKSB9IGRpc3Bvc2UoKSB7IFt3aW5kb3csIHRoaXMuX2RpYWxvZ10uZm9yRWFjaCh0ID0+IFAub2ZmKHQsICIuYnMubW9kYWwiKSksIHRoaXMuX2JhY2tkcm9wLmRpc3Bvc2UoKSwgc3VwZXIuZGlzcG9zZSgpLCBQLm9mZihkb2N1bWVudCwgImZvY3VzaW4uYnMubW9kYWwiKSB9IGhhbmRsZVVwZGF0ZSgpIHsgdGhpcy5fYWRqdXN0RGlhbG9nKCkgfSBfaW5pdGlhbGl6ZUJhY2tEcm9wKCkgeyByZXR1cm4gbmV3IGtlKHsgaXNWaXNpYmxlOiBCb29sZWFuKHRoaXMuX2NvbmZpZy5iYWNrZHJvcCksIGlzQW5pbWF0ZWQ6IHRoaXMuX2lzQW5pbWF0ZWQoKSB9KSB9IF9nZXRDb25maWcodCkgeyByZXR1cm4gdCA9IHsgLi4uTGUsIC4uLlUuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksIC4uLiJvYmplY3QiID09IHR5cGVvZiB0ID8gdCA6IHt9IH0sIGwoIm1vZGFsIiwgdCwgeGUpLCB0IH0gX3Nob3dFbGVtZW50KGUpIHsgY29uc3QgaSA9IHRoaXMuX2lzQW5pbWF0ZWQoKSwgbiA9IHQuZmluZE9uZSgiLm1vZGFsLWJvZHkiLCB0aGlzLl9kaWFsb2cpOyB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgJiYgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSB8fCBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpLCB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siLCB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgiYXJpYS1oaWRkZW4iKSwgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoImFyaWEtbW9kYWwiLCAhMCksIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCJyb2xlIiwgImRpYWxvZyIpLCB0aGlzLl9lbGVtZW50LnNjcm9sbFRvcCA9IDAsIG4gJiYgKG4uc2Nyb2xsVG9wID0gMCksIGkgJiYgZih0aGlzLl9lbGVtZW50KSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKCJzaG93IiksIHRoaXMuX2NvbmZpZy5mb2N1cyAmJiB0aGlzLl9lbmZvcmNlRm9jdXMoKSwgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7IHRoaXMuX2NvbmZpZy5mb2N1cyAmJiB0aGlzLl9lbGVtZW50LmZvY3VzKCksIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9ICExLCBQLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgInNob3duLmJzLm1vZGFsIiwgeyByZWxhdGVkVGFyZ2V0OiBlIH0pIH0sIHRoaXMuX2RpYWxvZywgaSkgfSBfZW5mb3JjZUZvY3VzKCkgeyBQLm9mZihkb2N1bWVudCwgImZvY3VzaW4uYnMubW9kYWwiKSwgUC5vbihkb2N1bWVudCwgImZvY3VzaW4uYnMubW9kYWwiLCB0ID0+IHsgZG9jdW1lbnQgPT09IHQudGFyZ2V0IHx8IHRoaXMuX2VsZW1lbnQgPT09IHQudGFyZ2V0IHx8IHRoaXMuX2VsZW1lbnQuY29udGFpbnModC50YXJnZXQpIHx8IHRoaXMuX2VsZW1lbnQuZm9jdXMoKSB9KSB9IF9zZXRFc2NhcGVFdmVudCgpIHsgdGhpcy5faXNTaG93biA/IFAub24odGhpcy5fZWxlbWVudCwgImtleWRvd24uZGlzbWlzcy5icy5tb2RhbCIsIHQgPT4geyB0aGlzLl9jb25maWcua2V5Ym9hcmQgJiYgIkVzY2FwZSIgPT09IHQua2V5ID8gKHQucHJldmVudERlZmF1bHQoKSwgdGhpcy5oaWRlKCkpIDogdGhpcy5fY29uZmlnLmtleWJvYXJkIHx8ICJFc2NhcGUiICE9PSB0LmtleSB8fCB0aGlzLl90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCkgfSkgOiBQLm9mZih0aGlzLl9lbGVtZW50LCAia2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsIikgfSBfc2V0UmVzaXplRXZlbnQoKSB7IHRoaXMuX2lzU2hvd24gPyBQLm9uKHdpbmRvdywgInJlc2l6ZS5icy5tb2RhbCIsICgpID0+IHRoaXMuX2FkanVzdERpYWxvZygpKSA6IFAub2ZmKHdpbmRvdywgInJlc2l6ZS5icy5tb2RhbCIpIH0gX2hpZGVNb2RhbCgpIHsgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiLCB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgiYXJpYS1oaWRkZW4iLCAhMCksIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCJhcmlhLW1vZGFsIiksIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCJyb2xlIiksIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9ICExLCB0aGlzLl9iYWNrZHJvcC5oaWRlKCgpID0+IHsgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCJtb2RhbC1vcGVuIiksIHRoaXMuX3Jlc2V0QWRqdXN0bWVudHMoKSwgdGhpcy5fc2Nyb2xsQmFyLnJlc2V0KCksIFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCAiaGlkZGVuLmJzLm1vZGFsIikgfSkgfSBfc2hvd0JhY2tkcm9wKHQpIHsgUC5vbih0aGlzLl9lbGVtZW50LCAiY2xpY2suZGlzbWlzcy5icy5tb2RhbCIsIHQgPT4geyB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID8gdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9ICExIDogdC50YXJnZXQgPT09IHQuY3VycmVudFRhcmdldCAmJiAoITAgPT09IHRoaXMuX2NvbmZpZy5iYWNrZHJvcCA/IHRoaXMuaGlkZSgpIDogInN0YXRpYyIgPT09IHRoaXMuX2NvbmZpZy5iYWNrZHJvcCAmJiB0aGlzLl90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCkpIH0pLCB0aGlzLl9iYWNrZHJvcC5zaG93KHQpIH0gX2lzQW5pbWF0ZWQoKSB7IHJldHVybiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygiZmFkZSIpIH0gX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKSB7IGlmIChQLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgImhpZGVQcmV2ZW50ZWQuYnMubW9kYWwiKS5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47IGNvbnN0IHsgY2xhc3NMaXN0OiB0LCBzY3JvbGxIZWlnaHQ6IGUsIHN0eWxlOiBpIH0gPSB0aGlzLl9lbGVtZW50LCBuID0gZSA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7ICFuICYmICJoaWRkZW4iID09PSBpLm92ZXJmbG93WSB8fCB0LmNvbnRhaW5zKCJtb2RhbC1zdGF0aWMiKSB8fCAobiB8fCAoaS5vdmVyZmxvd1kgPSAiaGlkZGVuIiksIHQuYWRkKCJtb2RhbC1zdGF0aWMiKSwgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7IHQucmVtb3ZlKCJtb2RhbC1zdGF0aWMiKSwgbiB8fCB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHsgaS5vdmVyZmxvd1kgPSAiIiB9LCB0aGlzLl9kaWFsb2cpIH0sIHRoaXMuX2RpYWxvZyksIHRoaXMuX2VsZW1lbnQuZm9jdXMoKSkgfSBfYWRqdXN0RGlhbG9nKCkgeyBjb25zdCB0ID0gdGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCBlID0gdGhpcy5fc2Nyb2xsQmFyLmdldFdpZHRoKCksIGkgPSBlID4gMDsgKCFpICYmIHQgJiYgIWcoKSB8fCBpICYmICF0ICYmIGcoKSkgJiYgKHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSBlICsgInB4IiksIChpICYmICF0ICYmICFnKCkgfHwgIWkgJiYgdCAmJiBnKCkpICYmICh0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IGUgKyAicHgiKSB9IF9yZXNldEFkanVzdG1lbnRzKCkgeyB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gIiIsIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gIiIgfSBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQsIGUpIHsgcmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24gKCkgeyBjb25zdCBpID0gRGUuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCB0KTsgaWYgKCJzdHJpbmciID09IHR5cGVvZiB0KSB7IGlmICh2b2lkIDAgPT09IGlbdF0pIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCAiJHt0fSJgKTsgaVt0XShlKSB9IH0pKSB9IH0gUC5vbihkb2N1bWVudCwgImNsaWNrLmJzLm1vZGFsLmRhdGEtYXBpIiwgJ1tkYXRhLWJzLXRvZ2dsZT0ibW9kYWwiXScsIChmdW5jdGlvbiAodCkgeyBjb25zdCBlID0gcyh0aGlzKTtbIkEiLCAiQVJFQSJdLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkgJiYgdC5wcmV2ZW50RGVmYXVsdCgpLCBQLm9uZShlLCAic2hvdy5icy5tb2RhbCIsIHQgPT4geyB0LmRlZmF1bHRQcmV2ZW50ZWQgfHwgUC5vbmUoZSwgImhpZGRlbi5icy5tb2RhbCIsICgpID0+IHsgYyh0aGlzKSAmJiB0aGlzLmZvY3VzKCkgfSkgfSksIERlLmdldE9yQ3JlYXRlSW5zdGFuY2UoZSkudG9nZ2xlKHRoaXMpIH0pKSwgXyhEZSk7IGNvbnN0IFNlID0geyBiYWNrZHJvcDogITAsIGtleWJvYXJkOiAhMCwgc2Nyb2xsOiAhMSB9LCBJZSA9IHsgYmFja2Ryb3A6ICJib29sZWFuIiwga2V5Ym9hcmQ6ICJib29sZWFuIiwgc2Nyb2xsOiAiYm9vbGVhbiIgfTsgY2xhc3MgTmUgZXh0ZW5kcyBCIHsgY29uc3RydWN0b3IodCwgZSkgeyBzdXBlcih0KSwgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGUpLCB0aGlzLl9pc1Nob3duID0gITEsIHRoaXMuX2JhY2tkcm9wID0gdGhpcy5faW5pdGlhbGl6ZUJhY2tEcm9wKCksIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCkgfSBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiAib2ZmY2FudmFzIiB9IHN0YXRpYyBnZXQgRGVmYXVsdCgpIHsgcmV0dXJuIFNlIH0gdG9nZ2xlKHQpIHsgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyh0KSB9IHNob3codCkgeyB0aGlzLl9pc1Nob3duIHx8IFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCAic2hvdy5icy5vZmZjYW52YXMiLCB7IHJlbGF0ZWRUYXJnZXQ6IHQgfSkuZGVmYXVsdFByZXZlbnRlZCB8fCAodGhpcy5faXNTaG93biA9ICEwLCB0aGlzLl9lbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAidmlzaWJsZSIsIHRoaXMuX2JhY2tkcm9wLnNob3coKSwgdGhpcy5fY29uZmlnLnNjcm9sbCB8fCAoKG5ldyBUZSkuaGlkZSgpLCB0aGlzLl9lbmZvcmNlRm9jdXNPbkVsZW1lbnQodGhpcy5fZWxlbWVudCkpLCB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgiYXJpYS1oaWRkZW4iKSwgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoImFyaWEtbW9kYWwiLCAhMCksIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCJyb2xlIiwgImRpYWxvZyIpLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoInNob3ciKSwgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7IFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCAic2hvd24uYnMub2ZmY2FudmFzIiwgeyByZWxhdGVkVGFyZ2V0OiB0IH0pIH0sIHRoaXMuX2VsZW1lbnQsICEwKSkgfSBoaWRlKCkgeyB0aGlzLl9pc1Nob3duICYmIChQLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgImhpZGUuYnMub2ZmY2FudmFzIikuZGVmYXVsdFByZXZlbnRlZCB8fCAoUC5vZmYoZG9jdW1lbnQsICJmb2N1c2luLmJzLm9mZmNhbnZhcyIpLCB0aGlzLl9lbGVtZW50LmJsdXIoKSwgdGhpcy5faXNTaG93biA9ICExLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoInNob3ciKSwgdGhpcy5fYmFja2Ryb3AuaGlkZSgpLCB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHsgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoImFyaWEtaGlkZGVuIiwgITApLCB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgiYXJpYS1tb2RhbCIpLCB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgicm9sZSIpLCB0aGlzLl9lbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAiaGlkZGVuIiwgdGhpcy5fY29uZmlnLnNjcm9sbCB8fCAobmV3IFRlKS5yZXNldCgpLCBQLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgImhpZGRlbi5icy5vZmZjYW52YXMiKSB9LCB0aGlzLl9lbGVtZW50LCAhMCkpKSB9IGRpc3Bvc2UoKSB7IHRoaXMuX2JhY2tkcm9wLmRpc3Bvc2UoKSwgc3VwZXIuZGlzcG9zZSgpLCBQLm9mZihkb2N1bWVudCwgImZvY3VzaW4uYnMub2ZmY2FudmFzIikgfSBfZ2V0Q29uZmlnKHQpIHsgcmV0dXJuIHQgPSB7IC4uLlNlLCAuLi5VLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLCAuLi4ib2JqZWN0IiA9PSB0eXBlb2YgdCA/IHQgOiB7fSB9LCBsKCJvZmZjYW52YXMiLCB0LCBJZSksIHQgfSBfaW5pdGlhbGl6ZUJhY2tEcm9wKCkgeyByZXR1cm4gbmV3IGtlKHsgaXNWaXNpYmxlOiB0aGlzLl9jb25maWcuYmFja2Ryb3AsIGlzQW5pbWF0ZWQ6ICEwLCByb290RWxlbWVudDogdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLCBjbGlja0NhbGxiYWNrOiAoKSA9PiB0aGlzLmhpZGUoKSB9KSB9IF9lbmZvcmNlRm9jdXNPbkVsZW1lbnQodCkgeyBQLm9mZihkb2N1bWVudCwgImZvY3VzaW4uYnMub2ZmY2FudmFzIiksIFAub24oZG9jdW1lbnQsICJmb2N1c2luLmJzLm9mZmNhbnZhcyIsIGUgPT4geyBkb2N1bWVudCA9PT0gZS50YXJnZXQgfHwgdCA9PT0gZS50YXJnZXQgfHwgdC5jb250YWlucyhlLnRhcmdldCkgfHwgdC5mb2N1cygpIH0pLCB0LmZvY3VzKCkgfSBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7IFAub24odGhpcy5fZWxlbWVudCwgImNsaWNrLmRpc21pc3MuYnMub2ZmY2FudmFzIiwgJ1tkYXRhLWJzLWRpc21pc3M9Im9mZmNhbnZhcyJdJywgKCkgPT4gdGhpcy5oaWRlKCkpLCBQLm9uKHRoaXMuX2VsZW1lbnQsICJrZXlkb3duLmRpc21pc3MuYnMub2ZmY2FudmFzIiwgdCA9PiB7IHRoaXMuX2NvbmZpZy5rZXlib2FyZCAmJiAiRXNjYXBlIiA9PT0gdC5rZXkgJiYgdGhpcy5oaWRlKCkgfSkgfSBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpIHsgcmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24gKCkgeyBjb25zdCBlID0gTmUuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCB0KTsgaWYgKCJzdHJpbmciID09IHR5cGVvZiB0KSB7IGlmICh2b2lkIDAgPT09IGVbdF0gfHwgdC5zdGFydHNXaXRoKCJfIikgfHwgImNvbnN0cnVjdG9yIiA9PT0gdCkgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkICIke3R9ImApOyBlW3RdKHRoaXMpIH0gfSkpIH0gfSBQLm9uKGRvY3VtZW50LCAiY2xpY2suYnMub2ZmY2FudmFzLmRhdGEtYXBpIiwgJ1tkYXRhLWJzLXRvZ2dsZT0ib2ZmY2FudmFzIl0nLCAoZnVuY3Rpb24gKGUpIHsgY29uc3QgaSA9IHModGhpcyk7IGlmIChbIkEiLCAiQVJFQSJdLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkgJiYgZS5wcmV2ZW50RGVmYXVsdCgpLCBoKHRoaXMpKSByZXR1cm47IFAub25lKGksICJoaWRkZW4uYnMub2ZmY2FudmFzIiwgKCkgPT4geyBjKHRoaXMpICYmIHRoaXMuZm9jdXMoKSB9KTsgY29uc3QgbiA9IHQuZmluZE9uZSgiLm9mZmNhbnZhcy5zaG93Iik7IG4gJiYgbiAhPT0gaSAmJiBOZS5nZXRJbnN0YW5jZShuKS5oaWRlKCksIE5lLmdldE9yQ3JlYXRlSW5zdGFuY2UoaSkudG9nZ2xlKHRoaXMpIH0pKSwgUC5vbih3aW5kb3csICJsb2FkLmJzLm9mZmNhbnZhcy5kYXRhLWFwaSIsICgpID0+IHQuZmluZCgiLm9mZmNhbnZhcy5zaG93IikuZm9yRWFjaCh0ID0+IE5lLmdldE9yQ3JlYXRlSW5zdGFuY2UodCkuc2hvdygpKSksIF8oTmUpOyBjb25zdCBqZSA9IG5ldyBTZXQoWyJiYWNrZ3JvdW5kIiwgImNpdGUiLCAiaHJlZiIsICJpdGVtdHlwZSIsICJsb25nZGVzYyIsICJwb3N0ZXIiLCAic3JjIiwgInhsaW5rOmhyZWYiXSksIE1lID0gL14oPzooPzpodHRwcz98bWFpbHRvfGZ0cHx0ZWx8ZmlsZSk6fFteIyYvOj9dKig/OlsjLz9dfCQpKS9pLCBQZSA9IC9eZGF0YTooPzppbWFnZVwvKD86Ym1wfGdpZnxqcGVnfGpwZ3xwbmd8dGlmZnx3ZWJwKXx2aWRlb1wvKD86bXBlZ3xtcDR8b2dnfHdlYm0pfGF1ZGlvXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFtcZCsvYS16XSs9KiQvaSwgSGUgPSAodCwgZSkgPT4geyBjb25zdCBpID0gdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOyBpZiAoZS5pbmNsdWRlcyhpKSkgcmV0dXJuICFqZS5oYXMoaSkgfHwgQm9vbGVhbihNZS50ZXN0KHQubm9kZVZhbHVlKSB8fCBQZS50ZXN0KHQubm9kZVZhbHVlKSk7IGNvbnN0IG4gPSBlLmZpbHRlcih0ID0+IHQgaW5zdGFuY2VvZiBSZWdFeHApOyBmb3IgKGxldCB0ID0gMCwgZSA9IG4ubGVuZ3RoOyB0IDwgZTsgdCsrKWlmIChuW3RdLnRlc3QoaSkpIHJldHVybiAhMDsgcmV0dXJuICExIH07IGZ1bmN0aW9uIFJlKHQsIGUsIGkpIHsgaWYgKCF0Lmxlbmd0aCkgcmV0dXJuIHQ7IGlmIChpICYmICJmdW5jdGlvbiIgPT0gdHlwZW9mIGkpIHJldHVybiBpKHQpOyBjb25zdCBuID0gKG5ldyB3aW5kb3cuRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcodCwgInRleHQvaHRtbCIpLCBzID0gT2JqZWN0LmtleXMoZSksIG8gPSBbXS5jb25jYXQoLi4ubi5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoIioiKSk7IGZvciAobGV0IHQgPSAwLCBpID0gby5sZW5ndGg7IHQgPCBpOyB0KyspIHsgY29uc3QgaSA9IG9bdF0sIG4gPSBpLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7IGlmICghcy5pbmNsdWRlcyhuKSkgeyBpLnJlbW92ZSgpOyBjb250aW51ZSB9IGNvbnN0IHIgPSBbXS5jb25jYXQoLi4uaS5hdHRyaWJ1dGVzKSwgYSA9IFtdLmNvbmNhdChlWyIqIl0gfHwgW10sIGVbbl0gfHwgW10pOyByLmZvckVhY2godCA9PiB7IEhlKHQsIGEpIHx8IGkucmVtb3ZlQXR0cmlidXRlKHQubm9kZU5hbWUpIH0pIH0gcmV0dXJuIG4uYm9keS5pbm5lckhUTUwgfSBjb25zdCBCZSA9IG5ldyBSZWdFeHAoIihefFxccylicy10b29sdGlwXFxTKyIsICJnIiksIFdlID0gbmV3IFNldChbInNhbml0aXplIiwgImFsbG93TGlzdCIsICJzYW5pdGl6ZUZuIl0pLCBxZSA9IHsgYW5pbWF0aW9uOiAiYm9vbGVhbiIsIHRlbXBsYXRlOiAic3RyaW5nIiwgdGl0bGU6ICIoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pIiwgdHJpZ2dlcjogInN0cmluZyIsIGRlbGF5OiAiKG51bWJlcnxvYmplY3QpIiwgaHRtbDogImJvb2xlYW4iLCBzZWxlY3RvcjogIihzdHJpbmd8Ym9vbGVhbikiLCBwbGFjZW1lbnQ6ICIoc3RyaW5nfGZ1bmN0aW9uKSIsIG9mZnNldDogIihhcnJheXxzdHJpbmd8ZnVuY3Rpb24pIiwgY29udGFpbmVyOiAiKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pIiwgZmFsbGJhY2tQbGFjZW1lbnRzOiAiYXJyYXkiLCBib3VuZGFyeTogIihzdHJpbmd8ZWxlbWVudCkiLCBjdXN0b21DbGFzczogIihzdHJpbmd8ZnVuY3Rpb24pIiwgc2FuaXRpemU6ICJib29sZWFuIiwgc2FuaXRpemVGbjogIihudWxsfGZ1bmN0aW9uKSIsIGFsbG93TGlzdDogIm9iamVjdCIsIHBvcHBlckNvbmZpZzogIihudWxsfG9iamVjdHxmdW5jdGlvbikiIH0sIHplID0geyBBVVRPOiAiYXV0byIsIFRPUDogInRvcCIsIFJJR0hUOiBnKCkgPyAibGVmdCIgOiAicmlnaHQiLCBCT1RUT006ICJib3R0b20iLCBMRUZUOiBnKCkgPyAicmlnaHQiIDogImxlZnQiIH0sICRlID0geyBhbmltYXRpb246ICEwLCB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9InRvb2x0aXAiIHJvbGU9InRvb2x0aXAiPjxkaXYgY2xhc3M9InRvb2x0aXAtYXJyb3ciPjwvZGl2PjxkaXYgY2xhc3M9InRvb2x0aXAtaW5uZXIiPjwvZGl2PjwvZGl2PicsIHRyaWdnZXI6ICJob3ZlciBmb2N1cyIsIHRpdGxlOiAiIiwgZGVsYXk6IDAsIGh0bWw6ICExLCBzZWxlY3RvcjogITEsIHBsYWNlbWVudDogInRvcCIsIG9mZnNldDogWzAsIDBdLCBjb250YWluZXI6ICExLCBmYWxsYmFja1BsYWNlbWVudHM6IFsidG9wIiwgInJpZ2h0IiwgImJvdHRvbSIsICJsZWZ0Il0sIGJvdW5kYXJ5OiAiY2xpcHBpbmdQYXJlbnRzIiwgY3VzdG9tQ2xhc3M6ICIiLCBzYW5pdGl6ZTogITAsIHNhbml0aXplRm46IG51bGwsIGFsbG93TGlzdDogeyAiKiI6IFsiY2xhc3MiLCAiZGlyIiwgImlkIiwgImxhbmciLCAicm9sZSIsIC9eYXJpYS1bXHctXSokL2ldLCBhOiBbInRhcmdldCIsICJocmVmIiwgInRpdGxlIiwgInJlbCJdLCBhcmVhOiBbXSwgYjogW10sIGJyOiBbXSwgY29sOiBbXSwgY29kZTogW10sIGRpdjogW10sIGVtOiBbXSwgaHI6IFtdLCBoMTogW10sIGgyOiBbXSwgaDM6IFtdLCBoNDogW10sIGg1OiBbXSwgaDY6IFtdLCBpOiBbXSwgaW1nOiBbInNyYyIsICJzcmNzZXQiLCAiYWx0IiwgInRpdGxlIiwgIndpZHRoIiwgImhlaWdodCJdLCBsaTogW10sIG9sOiBbXSwgcDogW10sIHByZTogW10sIHM6IFtdLCBzbWFsbDogW10sIHNwYW46IFtdLCBzdWI6IFtdLCBzdXA6IFtdLCBzdHJvbmc6IFtdLCB1OiBbXSwgdWw6IFtdIH0sIHBvcHBlckNvbmZpZzogbnVsbCB9LCBVZSA9IHsgSElERTogImhpZGUuYnMudG9vbHRpcCIsIEhJRERFTjogImhpZGRlbi5icy50b29sdGlwIiwgU0hPVzogInNob3cuYnMudG9vbHRpcCIsIFNIT1dOOiAic2hvd24uYnMudG9vbHRpcCIsIElOU0VSVEVEOiAiaW5zZXJ0ZWQuYnMudG9vbHRpcCIsIENMSUNLOiAiY2xpY2suYnMudG9vbHRpcCIsIEZPQ1VTSU46ICJmb2N1c2luLmJzLnRvb2x0aXAiLCBGT0NVU09VVDogImZvY3Vzb3V0LmJzLnRvb2x0aXAiLCBNT1VTRUVOVEVSOiAibW91c2VlbnRlci5icy50b29sdGlwIiwgTU9VU0VMRUFWRTogIm1vdXNlbGVhdmUuYnMudG9vbHRpcCIgfTsgY2xhc3MgRmUgZXh0ZW5kcyBCIHsgY29uc3RydWN0b3IodCwgZSkgeyBpZiAodm9pZCAwID09PSBmZSkgdGhyb3cgbmV3IFR5cGVFcnJvcigiQm9vdHN0cmFwJ3MgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZykiKTsgc3VwZXIodCksIHRoaXMuX2lzRW5hYmxlZCA9ICEwLCB0aGlzLl90aW1lb3V0ID0gMCwgdGhpcy5faG92ZXJTdGF0ZSA9ICIiLCB0aGlzLl9hY3RpdmVUcmlnZ2VyID0ge30sIHRoaXMuX3BvcHBlciA9IG51bGwsIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhlKSwgdGhpcy50aXAgPSBudWxsLCB0aGlzLl9zZXRMaXN0ZW5lcnMoKSB9IHN0YXRpYyBnZXQgRGVmYXVsdCgpIHsgcmV0dXJuICRlIH0gc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gInRvb2x0aXAiIH0gc3RhdGljIGdldCBFdmVudCgpIHsgcmV0dXJuIFVlIH0gc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHsgcmV0dXJuIHFlIH0gZW5hYmxlKCkgeyB0aGlzLl9pc0VuYWJsZWQgPSAhMCB9IGRpc2FibGUoKSB7IHRoaXMuX2lzRW5hYmxlZCA9ICExIH0gdG9nZ2xlRW5hYmxlZCgpIHsgdGhpcy5faXNFbmFibGVkID0gIXRoaXMuX2lzRW5hYmxlZCB9IHRvZ2dsZSh0KSB7IGlmICh0aGlzLl9pc0VuYWJsZWQpIGlmICh0KSB7IGNvbnN0IGUgPSB0aGlzLl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQodCk7IGUuX2FjdGl2ZVRyaWdnZXIuY2xpY2sgPSAhZS5fYWN0aXZlVHJpZ2dlci5jbGljaywgZS5faXNXaXRoQWN0aXZlVHJpZ2dlcigpID8gZS5fZW50ZXIobnVsbCwgZSkgOiBlLl9sZWF2ZShudWxsLCBlKSB9IGVsc2UgeyBpZiAodGhpcy5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmNvbnRhaW5zKCJzaG93IikpIHJldHVybiB2b2lkIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpOyB0aGlzLl9lbnRlcihudWxsLCB0aGlzKSB9IH0gZGlzcG9zZSgpIHsgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpLCBQLm9mZih0aGlzLl9lbGVtZW50LmNsb3Nlc3QoIi5tb2RhbCIpLCAiaGlkZS5icy5tb2RhbCIsIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIpLCB0aGlzLnRpcCAmJiB0aGlzLnRpcC5yZW1vdmUoKSwgdGhpcy5fcG9wcGVyICYmIHRoaXMuX3BvcHBlci5kZXN0cm95KCksIHN1cGVyLmRpc3Bvc2UoKSB9IHNob3coKSB7IGlmICgibm9uZSIgPT09IHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSkgdGhyb3cgbmV3IEVycm9yKCJQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50cyIpOyBpZiAoIXRoaXMuaXNXaXRoQ29udGVudCgpIHx8ICF0aGlzLl9pc0VuYWJsZWQpIHJldHVybjsgY29uc3QgdCA9IFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1cpLCBpID0gZCh0aGlzLl9lbGVtZW50KSwgbiA9IG51bGwgPT09IGkgPyB0aGlzLl9lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKHRoaXMuX2VsZW1lbnQpIDogaS5jb250YWlucyh0aGlzLl9lbGVtZW50KTsgaWYgKHQuZGVmYXVsdFByZXZlbnRlZCB8fCAhbikgcmV0dXJuOyBjb25zdCBzID0gdGhpcy5nZXRUaXBFbGVtZW50KCksIG8gPSBlKHRoaXMuY29uc3RydWN0b3IuTkFNRSk7IHMuc2V0QXR0cmlidXRlKCJpZCIsIG8pLCB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgiYXJpYS1kZXNjcmliZWRieSIsIG8pLCB0aGlzLnNldENvbnRlbnQoKSwgdGhpcy5fY29uZmlnLmFuaW1hdGlvbiAmJiBzLmNsYXNzTGlzdC5hZGQoImZhZGUiKTsgY29uc3QgciA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIHRoaXMuX2NvbmZpZy5wbGFjZW1lbnQgPyB0aGlzLl9jb25maWcucGxhY2VtZW50LmNhbGwodGhpcywgcywgdGhpcy5fZWxlbWVudCkgOiB0aGlzLl9jb25maWcucGxhY2VtZW50LCBhID0gdGhpcy5fZ2V0QXR0YWNobWVudChyKTsgdGhpcy5fYWRkQXR0YWNobWVudENsYXNzKGEpOyBjb25zdCB7IGNvbnRhaW5lcjogbCB9ID0gdGhpcy5fY29uZmlnOyBSLnNldChzLCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKSwgdGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLnRpcCkgfHwgKGwuYXBwZW5kQ2hpbGQocyksIFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LklOU0VSVEVEKSksIHRoaXMuX3BvcHBlciA/IHRoaXMuX3BvcHBlci51cGRhdGUoKSA6IHRoaXMuX3BvcHBlciA9IHVlKHRoaXMuX2VsZW1lbnQsIHMsIHRoaXMuX2dldFBvcHBlckNvbmZpZyhhKSksIHMuY2xhc3NMaXN0LmFkZCgic2hvdyIpOyBjb25zdCBjID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgdGhpcy5fY29uZmlnLmN1c3RvbUNsYXNzID8gdGhpcy5fY29uZmlnLmN1c3RvbUNsYXNzKCkgOiB0aGlzLl9jb25maWcuY3VzdG9tQ2xhc3M7IGMgJiYgcy5jbGFzc0xpc3QuYWRkKC4uLmMuc3BsaXQoIiAiKSksICJvbnRvdWNoc3RhcnQiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBbXS5jb25jYXQoLi4uZG9jdW1lbnQuYm9keS5jaGlsZHJlbikuZm9yRWFjaCh0ID0+IHsgUC5vbih0LCAibW91c2VvdmVyIiwgdSkgfSk7IGNvbnN0IGggPSB0aGlzLnRpcC5jbGFzc0xpc3QuY29udGFpbnMoImZhZGUiKTsgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7IGNvbnN0IHQgPSB0aGlzLl9ob3ZlclN0YXRlOyB0aGlzLl9ob3ZlclN0YXRlID0gbnVsbCwgUC50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pLCAib3V0IiA9PT0gdCAmJiB0aGlzLl9sZWF2ZShudWxsLCB0aGlzKSB9LCB0aGlzLnRpcCwgaCkgfSBoaWRlKCkgeyBpZiAoIXRoaXMuX3BvcHBlcikgcmV0dXJuOyBjb25zdCB0ID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7IGlmIChQLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKS5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47IHQuY2xhc3NMaXN0LnJlbW92ZSgic2hvdyIpLCAib250b3VjaHN0YXJ0IiBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgW10uY29uY2F0KC4uLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4pLmZvckVhY2godCA9PiBQLm9mZih0LCAibW91c2VvdmVyIiwgdSkpLCB0aGlzLl9hY3RpdmVUcmlnZ2VyLmNsaWNrID0gITEsIHRoaXMuX2FjdGl2ZVRyaWdnZXIuZm9jdXMgPSAhMSwgdGhpcy5fYWN0aXZlVHJpZ2dlci5ob3ZlciA9ICExOyBjb25zdCBlID0gdGhpcy50aXAuY2xhc3NMaXN0LmNvbnRhaW5zKCJmYWRlIik7IHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4geyB0aGlzLl9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkgfHwgKCJzaG93IiAhPT0gdGhpcy5faG92ZXJTdGF0ZSAmJiB0LnJlbW92ZSgpLCB0aGlzLl9jbGVhblRpcENsYXNzKCksIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCJhcmlhLWRlc2NyaWJlZGJ5IiksIFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJRERFTiksIHRoaXMuX3BvcHBlciAmJiAodGhpcy5fcG9wcGVyLmRlc3Ryb3koKSwgdGhpcy5fcG9wcGVyID0gbnVsbCkpIH0sIHRoaXMudGlwLCBlKSwgdGhpcy5faG92ZXJTdGF0ZSA9ICIiIH0gdXBkYXRlKCkgeyBudWxsICE9PSB0aGlzLl9wb3BwZXIgJiYgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpIH0gaXNXaXRoQ29udGVudCgpIHsgcmV0dXJuIEJvb2xlYW4odGhpcy5nZXRUaXRsZSgpKSB9IGdldFRpcEVsZW1lbnQoKSB7IGlmICh0aGlzLnRpcCkgcmV0dXJuIHRoaXMudGlwOyBjb25zdCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7IHJldHVybiB0LmlubmVySFRNTCA9IHRoaXMuX2NvbmZpZy50ZW1wbGF0ZSwgdGhpcy50aXAgPSB0LmNoaWxkcmVuWzBdLCB0aGlzLnRpcCB9IHNldENvbnRlbnQoKSB7IGNvbnN0IGUgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTsgdGhpcy5zZXRFbGVtZW50Q29udGVudCh0LmZpbmRPbmUoIi50b29sdGlwLWlubmVyIiwgZSksIHRoaXMuZ2V0VGl0bGUoKSksIGUuY2xhc3NMaXN0LnJlbW92ZSgiZmFkZSIsICJzaG93IikgfSBzZXRFbGVtZW50Q29udGVudCh0LCBlKSB7IGlmIChudWxsICE9PSB0KSByZXR1cm4gcihlKSA/IChlID0gYShlKSwgdm9pZCAodGhpcy5fY29uZmlnLmh0bWwgPyBlLnBhcmVudE5vZGUgIT09IHQgJiYgKHQuaW5uZXJIVE1MID0gIiIsIHQuYXBwZW5kQ2hpbGQoZSkpIDogdC50ZXh0Q29udGVudCA9IGUudGV4dENvbnRlbnQpKSA6IHZvaWQgKHRoaXMuX2NvbmZpZy5odG1sID8gKHRoaXMuX2NvbmZpZy5zYW5pdGl6ZSAmJiAoZSA9IFJlKGUsIHRoaXMuX2NvbmZpZy5hbGxvd0xpc3QsIHRoaXMuX2NvbmZpZy5zYW5pdGl6ZUZuKSksIHQuaW5uZXJIVE1MID0gZSkgOiB0LnRleHRDb250ZW50ID0gZSkgfSBnZXRUaXRsZSgpIHsgbGV0IHQgPSB0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgiZGF0YS1icy1vcmlnaW5hbC10aXRsZSIpOyByZXR1cm4gdCB8fCAodCA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIHRoaXMuX2NvbmZpZy50aXRsZSA/IHRoaXMuX2NvbmZpZy50aXRsZS5jYWxsKHRoaXMuX2VsZW1lbnQpIDogdGhpcy5fY29uZmlnLnRpdGxlKSwgdCB9IHVwZGF0ZUF0dGFjaG1lbnQodCkgeyByZXR1cm4gInJpZ2h0IiA9PT0gdCA/ICJlbmQiIDogImxlZnQiID09PSB0ID8gInN0YXJ0IiA6IHQgfSBfaW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KHQsIGUpIHsgY29uc3QgaSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7IHJldHVybiAoZSA9IGUgfHwgUi5nZXQodC5kZWxlZ2F0ZVRhcmdldCwgaSkpIHx8IChlID0gbmV3IHRoaXMuY29uc3RydWN0b3IodC5kZWxlZ2F0ZVRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSksIFIuc2V0KHQuZGVsZWdhdGVUYXJnZXQsIGksIGUpKSwgZSB9IF9nZXRPZmZzZXQoKSB7IGNvbnN0IHsgb2Zmc2V0OiB0IH0gPSB0aGlzLl9jb25maWc7IHJldHVybiAic3RyaW5nIiA9PSB0eXBlb2YgdCA/IHQuc3BsaXQoIiwiKS5tYXAodCA9PiBOdW1iZXIucGFyc2VJbnQodCwgMTApKSA6ICJmdW5jdGlvbiIgPT0gdHlwZW9mIHQgPyBlID0+IHQoZSwgdGhpcy5fZWxlbWVudCkgOiB0IH0gX2dldFBvcHBlckNvbmZpZyh0KSB7IGNvbnN0IGUgPSB7IHBsYWNlbWVudDogdCwgbW9kaWZpZXJzOiBbeyBuYW1lOiAiZmxpcCIsIG9wdGlvbnM6IHsgZmFsbGJhY2tQbGFjZW1lbnRzOiB0aGlzLl9jb25maWcuZmFsbGJhY2tQbGFjZW1lbnRzIH0gfSwgeyBuYW1lOiAib2Zmc2V0Iiwgb3B0aW9uczogeyBvZmZzZXQ6IHRoaXMuX2dldE9mZnNldCgpIH0gfSwgeyBuYW1lOiAicHJldmVudE92ZXJmbG93Iiwgb3B0aW9uczogeyBib3VuZGFyeTogdGhpcy5fY29uZmlnLmJvdW5kYXJ5IH0gfSwgeyBuYW1lOiAiYXJyb3ciLCBvcHRpb25zOiB7IGVsZW1lbnQ6IGAuJHt0aGlzLmNvbnN0cnVjdG9yLk5BTUV9LWFycm93YCB9IH0sIHsgbmFtZTogIm9uQ2hhbmdlIiwgZW5hYmxlZDogITAsIHBoYXNlOiAiYWZ0ZXJXcml0ZSIsIGZuOiB0ID0+IHRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSh0KSB9XSwgb25GaXJzdFVwZGF0ZTogdCA9PiB7IHQub3B0aW9ucy5wbGFjZW1lbnQgIT09IHQucGxhY2VtZW50ICYmIHRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSh0KSB9IH07IHJldHVybiB7IC4uLmUsIC4uLiJmdW5jdGlvbiIgPT0gdHlwZW9mIHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcgPyB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKGUpIDogdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyB9IH0gX2FkZEF0dGFjaG1lbnRDbGFzcyh0KSB7IHRoaXMuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoImJzLXRvb2x0aXAtIiArIHRoaXMudXBkYXRlQXR0YWNobWVudCh0KSkgfSBfZ2V0QXR0YWNobWVudCh0KSB7IHJldHVybiB6ZVt0LnRvVXBwZXJDYXNlKCldIH0gX3NldExpc3RlbmVycygpIHsgdGhpcy5fY29uZmlnLnRyaWdnZXIuc3BsaXQoIiAiKS5mb3JFYWNoKHQgPT4geyBpZiAoImNsaWNrIiA9PT0gdCkgUC5vbih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkNMSUNLLCB0aGlzLl9jb25maWcuc2VsZWN0b3IsIHQgPT4gdGhpcy50b2dnbGUodCkpOyBlbHNlIGlmICgibWFudWFsIiAhPT0gdCkgeyBjb25zdCBlID0gImhvdmVyIiA9PT0gdCA/IHRoaXMuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VFTlRFUiA6IHRoaXMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNJTiwgaSA9ICJob3ZlciIgPT09IHQgPyB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkUgOiB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTT1VUOyBQLm9uKHRoaXMuX2VsZW1lbnQsIGUsIHRoaXMuX2NvbmZpZy5zZWxlY3RvciwgdCA9PiB0aGlzLl9lbnRlcih0KSksIFAub24odGhpcy5fZWxlbWVudCwgaSwgdGhpcy5fY29uZmlnLnNlbGVjdG9yLCB0ID0+IHRoaXMuX2xlYXZlKHQpKSB9IH0pLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyID0gKCkgPT4geyB0aGlzLl9lbGVtZW50ICYmIHRoaXMuaGlkZSgpIH0sIFAub24odGhpcy5fZWxlbWVudC5jbG9zZXN0KCIubW9kYWwiKSwgImhpZGUuYnMubW9kYWwiLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyKSwgdGhpcy5fY29uZmlnLnNlbGVjdG9yID8gdGhpcy5fY29uZmlnID0geyAuLi50aGlzLl9jb25maWcsIHRyaWdnZXI6ICJtYW51YWwiLCBzZWxlY3RvcjogIiIgfSA6IHRoaXMuX2ZpeFRpdGxlKCkgfSBfZml4VGl0bGUoKSB7IGNvbnN0IHQgPSB0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgidGl0bGUiKSwgZSA9IHR5cGVvZiB0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgiZGF0YS1icy1vcmlnaW5hbC10aXRsZSIpOyAodCB8fCAic3RyaW5nIiAhPT0gZSkgJiYgKHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCJkYXRhLWJzLW9yaWdpbmFsLXRpdGxlIiwgdCB8fCAiIiksICF0IHx8IHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCJhcmlhLWxhYmVsIikgfHwgdGhpcy5fZWxlbWVudC50ZXh0Q29udGVudCB8fCB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgiYXJpYS1sYWJlbCIsIHQpLCB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgidGl0bGUiLCAiIikpIH0gX2VudGVyKHQsIGUpIHsgZSA9IHRoaXMuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCh0LCBlKSwgdCAmJiAoZS5fYWN0aXZlVHJpZ2dlclsiZm9jdXNpbiIgPT09IHQudHlwZSA/ICJmb2N1cyIgOiAiaG92ZXIiXSA9ICEwKSwgZS5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmNvbnRhaW5zKCJzaG93IikgfHwgInNob3ciID09PSBlLl9ob3ZlclN0YXRlID8gZS5faG92ZXJTdGF0ZSA9ICJzaG93IiA6IChjbGVhclRpbWVvdXQoZS5fdGltZW91dCksIGUuX2hvdmVyU3RhdGUgPSAic2hvdyIsIGUuX2NvbmZpZy5kZWxheSAmJiBlLl9jb25maWcuZGVsYXkuc2hvdyA/IGUuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHsgInNob3ciID09PSBlLl9ob3ZlclN0YXRlICYmIGUuc2hvdygpIH0sIGUuX2NvbmZpZy5kZWxheS5zaG93KSA6IGUuc2hvdygpKSB9IF9sZWF2ZSh0LCBlKSB7IGUgPSB0aGlzLl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQodCwgZSksIHQgJiYgKGUuX2FjdGl2ZVRyaWdnZXJbImZvY3Vzb3V0IiA9PT0gdC50eXBlID8gImZvY3VzIiA6ICJob3ZlciJdID0gZS5fZWxlbWVudC5jb250YWlucyh0LnJlbGF0ZWRUYXJnZXQpKSwgZS5faXNXaXRoQWN0aXZlVHJpZ2dlcigpIHx8IChjbGVhclRpbWVvdXQoZS5fdGltZW91dCksIGUuX2hvdmVyU3RhdGUgPSAib3V0IiwgZS5fY29uZmlnLmRlbGF5ICYmIGUuX2NvbmZpZy5kZWxheS5oaWRlID8gZS5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4geyAib3V0IiA9PT0gZS5faG92ZXJTdGF0ZSAmJiBlLmhpZGUoKSB9LCBlLl9jb25maWcuZGVsYXkuaGlkZSkgOiBlLmhpZGUoKSkgfSBfaXNXaXRoQWN0aXZlVHJpZ2dlcigpIHsgZm9yIChjb25zdCB0IGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpIGlmICh0aGlzLl9hY3RpdmVUcmlnZ2VyW3RdKSByZXR1cm4gITA7IHJldHVybiAhMSB9IF9nZXRDb25maWcodCkgeyBjb25zdCBlID0gVS5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KTsgcmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2godCA9PiB7IFdlLmhhcyh0KSAmJiBkZWxldGUgZVt0XSB9KSwgKHQgPSB7IC4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCwgLi4uZSwgLi4uIm9iamVjdCIgPT0gdHlwZW9mIHQgJiYgdCA/IHQgOiB7fSB9KS5jb250YWluZXIgPSAhMSA9PT0gdC5jb250YWluZXIgPyBkb2N1bWVudC5ib2R5IDogYSh0LmNvbnRhaW5lciksICJudW1iZXIiID09IHR5cGVvZiB0LmRlbGF5ICYmICh0LmRlbGF5ID0geyBzaG93OiB0LmRlbGF5LCBoaWRlOiB0LmRlbGF5IH0pLCAibnVtYmVyIiA9PSB0eXBlb2YgdC50aXRsZSAmJiAodC50aXRsZSA9IHQudGl0bGUudG9TdHJpbmcoKSksICJudW1iZXIiID09IHR5cGVvZiB0LmNvbnRlbnQgJiYgKHQuY29udGVudCA9IHQuY29udGVudC50b1N0cmluZygpKSwgbCgidG9vbHRpcCIsIHQsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpLCB0LnNhbml0aXplICYmICh0LnRlbXBsYXRlID0gUmUodC50ZW1wbGF0ZSwgdC5hbGxvd0xpc3QsIHQuc2FuaXRpemVGbikpLCB0IH0gX2dldERlbGVnYXRlQ29uZmlnKCkgeyBjb25zdCB0ID0ge307IGlmICh0aGlzLl9jb25maWcpIGZvciAoY29uc3QgZSBpbiB0aGlzLl9jb25maWcpIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtlXSAhPT0gdGhpcy5fY29uZmlnW2VdICYmICh0W2VdID0gdGhpcy5fY29uZmlnW2VdKTsgcmV0dXJuIHQgfSBfY2xlYW5UaXBDbGFzcygpIHsgY29uc3QgdCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpLCBlID0gdC5nZXRBdHRyaWJ1dGUoImNsYXNzIikubWF0Y2goQmUpOyBudWxsICE9PSBlICYmIGUubGVuZ3RoID4gMCAmJiBlLm1hcCh0ID0+IHQudHJpbSgpKS5mb3JFYWNoKGUgPT4gdC5jbGFzc0xpc3QucmVtb3ZlKGUpKSB9IF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UodCkgeyBjb25zdCB7IHN0YXRlOiBlIH0gPSB0OyBlICYmICh0aGlzLnRpcCA9IGUuZWxlbWVudHMucG9wcGVyLCB0aGlzLl9jbGVhblRpcENsYXNzKCksIHRoaXMuX2FkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KGUucGxhY2VtZW50KSkpIH0gc3RhdGljIGpRdWVyeUludGVyZmFjZSh0KSB7IHJldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uICgpIHsgY29uc3QgZSA9IEZlLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgdCk7IGlmICgic3RyaW5nIiA9PSB0eXBlb2YgdCkgeyBpZiAodm9pZCAwID09PSBlW3RdKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgIiR7dH0iYCk7IGVbdF0oKSB9IH0pKSB9IH0gXyhGZSk7IGNvbnN0IFZlID0gbmV3IFJlZ0V4cCgiKF58XFxzKWJzLXBvcG92ZXJcXFMrIiwgImciKSwgS2UgPSB7IC4uLkZlLkRlZmF1bHQsIHBsYWNlbWVudDogInJpZ2h0Iiwgb2Zmc2V0OiBbMCwgOF0sIHRyaWdnZXI6ICJjbGljayIsIGNvbnRlbnQ6ICIiLCB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9InBvcG92ZXIiIHJvbGU9InRvb2x0aXAiPjxkaXYgY2xhc3M9InBvcG92ZXItYXJyb3ciPjwvZGl2PjxoMyBjbGFzcz0icG9wb3Zlci1oZWFkZXIiPjwvaDM+PGRpdiBjbGFzcz0icG9wb3Zlci1ib2R5Ij48L2Rpdj48L2Rpdj4nIH0sIFhlID0geyAuLi5GZS5EZWZhdWx0VHlwZSwgY29udGVudDogIihzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbikiIH0sIFllID0geyBISURFOiAiaGlkZS5icy5wb3BvdmVyIiwgSElEREVOOiAiaGlkZGVuLmJzLnBvcG92ZXIiLCBTSE9XOiAic2hvdy5icy5wb3BvdmVyIiwgU0hPV046ICJzaG93bi5icy5wb3BvdmVyIiwgSU5TRVJURUQ6ICJpbnNlcnRlZC5icy5wb3BvdmVyIiwgQ0xJQ0s6ICJjbGljay5icy5wb3BvdmVyIiwgRk9DVVNJTjogImZvY3VzaW4uYnMucG9wb3ZlciIsIEZPQ1VTT1VUOiAiZm9jdXNvdXQuYnMucG9wb3ZlciIsIE1PVVNFRU5URVI6ICJtb3VzZWVudGVyLmJzLnBvcG92ZXIiLCBNT1VTRUxFQVZFOiAibW91c2VsZWF2ZS5icy5wb3BvdmVyIiB9OyBjbGFzcyBRZSBleHRlbmRzIEZlIHsgc3RhdGljIGdldCBEZWZhdWx0KCkgeyByZXR1cm4gS2UgfSBzdGF0aWMgZ2V0IE5BTUUoKSB7IHJldHVybiAicG9wb3ZlciIgfSBzdGF0aWMgZ2V0IEV2ZW50KCkgeyByZXR1cm4gWWUgfSBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkgeyByZXR1cm4gWGUgfSBpc1dpdGhDb250ZW50KCkgeyByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuX2dldENvbnRlbnQoKSB9IGdldFRpcEVsZW1lbnQoKSB7IHJldHVybiB0aGlzLnRpcCB8fCAodGhpcy50aXAgPSBzdXBlci5nZXRUaXBFbGVtZW50KCksIHRoaXMuZ2V0VGl0bGUoKSB8fCB0LmZpbmRPbmUoIi5wb3BvdmVyLWhlYWRlciIsIHRoaXMudGlwKS5yZW1vdmUoKSwgdGhpcy5fZ2V0Q29udGVudCgpIHx8IHQuZmluZE9uZSgiLnBvcG92ZXItYm9keSIsIHRoaXMudGlwKS5yZW1vdmUoKSksIHRoaXMudGlwIH0gc2V0Q29udGVudCgpIHsgY29uc3QgZSA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpOyB0aGlzLnNldEVsZW1lbnRDb250ZW50KHQuZmluZE9uZSgiLnBvcG92ZXItaGVhZGVyIiwgZSksIHRoaXMuZ2V0VGl0bGUoKSk7IGxldCBpID0gdGhpcy5fZ2V0Q29udGVudCgpOyAiZnVuY3Rpb24iID09IHR5cGVvZiBpICYmIChpID0gaS5jYWxsKHRoaXMuX2VsZW1lbnQpKSwgdGhpcy5zZXRFbGVtZW50Q29udGVudCh0LmZpbmRPbmUoIi5wb3BvdmVyLWJvZHkiLCBlKSwgaSksIGUuY2xhc3NMaXN0LnJlbW92ZSgiZmFkZSIsICJzaG93IikgfSBfYWRkQXR0YWNobWVudENsYXNzKHQpIHsgdGhpcy5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmFkZCgiYnMtcG9wb3Zlci0iICsgdGhpcy51cGRhdGVBdHRhY2htZW50KHQpKSB9IF9nZXRDb250ZW50KCkgeyByZXR1cm4gdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoImRhdGEtYnMtY29udGVudCIpIHx8IHRoaXMuX2NvbmZpZy5jb250ZW50IH0gX2NsZWFuVGlwQ2xhc3MoKSB7IGNvbnN0IHQgPSB0aGlzLmdldFRpcEVsZW1lbnQoKSwgZSA9IHQuZ2V0QXR0cmlidXRlKCJjbGFzcyIpLm1hdGNoKFZlKTsgbnVsbCAhPT0gZSAmJiBlLmxlbmd0aCA+IDAgJiYgZS5tYXAodCA9PiB0LnRyaW0oKSkuZm9yRWFjaChlID0+IHQuY2xhc3NMaXN0LnJlbW92ZShlKSkgfSBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpIHsgcmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24gKCkgeyBjb25zdCBlID0gUWUuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCB0KTsgaWYgKCJzdHJpbmciID09IHR5cGVvZiB0KSB7IGlmICh2b2lkIDAgPT09IGVbdF0pIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCAiJHt0fSJgKTsgZVt0XSgpIH0gfSkpIH0gfSBfKFFlKTsgY29uc3QgR2UgPSB7IG9mZnNldDogMTAsIG1ldGhvZDogImF1dG8iLCB0YXJnZXQ6ICIiIH0sIFplID0geyBvZmZzZXQ6ICJudW1iZXIiLCBtZXRob2Q6ICJzdHJpbmciLCB0YXJnZXQ6ICIoc3RyaW5nfGVsZW1lbnQpIiB9OyBjbGFzcyBKZSBleHRlbmRzIEIgeyBjb25zdHJ1Y3Rvcih0LCBlKSB7IHN1cGVyKHQpLCB0aGlzLl9zY3JvbGxFbGVtZW50ID0gIkJPRFkiID09PSB0aGlzLl9lbGVtZW50LnRhZ05hbWUgPyB3aW5kb3cgOiB0aGlzLl9lbGVtZW50LCB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoZSksIHRoaXMuX3NlbGVjdG9yID0gYCR7dGhpcy5fY29uZmlnLnRhcmdldH0gLm5hdi1saW5rLCAke3RoaXMuX2NvbmZpZy50YXJnZXR9IC5saXN0LWdyb3VwLWl0ZW0sICR7dGhpcy5fY29uZmlnLnRhcmdldH0gLmRyb3Bkb3duLWl0ZW1gLCB0aGlzLl9vZmZzZXRzID0gW10sIHRoaXMuX3RhcmdldHMgPSBbXSwgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbCwgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gMCwgUC5vbih0aGlzLl9zY3JvbGxFbGVtZW50LCAic2Nyb2xsLmJzLnNjcm9sbHNweSIsICgpID0+IHRoaXMuX3Byb2Nlc3MoKSksIHRoaXMucmVmcmVzaCgpLCB0aGlzLl9wcm9jZXNzKCkgfSBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7IHJldHVybiBHZSB9IHN0YXRpYyBnZXQgTkFNRSgpIHsgcmV0dXJuICJzY3JvbGxzcHkiIH0gcmVmcmVzaCgpIHsgY29uc3QgZSA9IHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93ID8gIm9mZnNldCIgOiAicG9zaXRpb24iLCBpID0gImF1dG8iID09PSB0aGlzLl9jb25maWcubWV0aG9kID8gZSA6IHRoaXMuX2NvbmZpZy5tZXRob2QsIHMgPSAicG9zaXRpb24iID09PSBpID8gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgOiAwOyB0aGlzLl9vZmZzZXRzID0gW10sIHRoaXMuX3RhcmdldHMgPSBbXSwgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCksIHQuZmluZCh0aGlzLl9zZWxlY3RvcikubWFwKGUgPT4geyBjb25zdCBvID0gbihlKSwgciA9IG8gPyB0LmZpbmRPbmUobykgOiBudWxsOyBpZiAocikgeyBjb25zdCB0ID0gci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgaWYgKHQud2lkdGggfHwgdC5oZWlnaHQpIHJldHVybiBbVVtpXShyKS50b3AgKyBzLCBvXSB9IHJldHVybiBudWxsIH0pLmZpbHRlcih0ID0+IHQpLnNvcnQoKHQsIGUpID0+IHRbMF0gLSBlWzBdKS5mb3JFYWNoKHQgPT4geyB0aGlzLl9vZmZzZXRzLnB1c2godFswXSksIHRoaXMuX3RhcmdldHMucHVzaCh0WzFdKSB9KSB9IGRpc3Bvc2UoKSB7IFAub2ZmKHRoaXMuX3Njcm9sbEVsZW1lbnQsICIuYnMuc2Nyb2xsc3B5IiksIHN1cGVyLmRpc3Bvc2UoKSB9IF9nZXRDb25maWcodCkgeyBpZiAoInN0cmluZyIgIT0gdHlwZW9mICh0ID0geyAuLi5HZSwgLi4uVS5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSwgLi4uIm9iamVjdCIgPT0gdHlwZW9mIHQgJiYgdCA/IHQgOiB7fSB9KS50YXJnZXQgJiYgcih0LnRhcmdldCkpIHsgbGV0IHsgaWQ6IGkgfSA9IHQudGFyZ2V0OyBpIHx8IChpID0gZSgic2Nyb2xsc3B5IiksIHQudGFyZ2V0LmlkID0gaSksIHQudGFyZ2V0ID0gIiMiICsgaSB9IHJldHVybiBsKCJzY3JvbGxzcHkiLCB0LCBaZSksIHQgfSBfZ2V0U2Nyb2xsVG9wKCkgeyByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gdGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsVG9wIH0gX2dldFNjcm9sbEhlaWdodCgpIHsgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KSB9IF9nZXRPZmZzZXRIZWlnaHQoKSB7IHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB3aW5kb3cgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCB9IF9wcm9jZXNzKCkgeyBjb25zdCB0ID0gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgKyB0aGlzLl9jb25maWcub2Zmc2V0LCBlID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCksIGkgPSB0aGlzLl9jb25maWcub2Zmc2V0ICsgZSAtIHRoaXMuX2dldE9mZnNldEhlaWdodCgpOyBpZiAodGhpcy5fc2Nyb2xsSGVpZ2h0ICE9PSBlICYmIHRoaXMucmVmcmVzaCgpLCB0ID49IGkpIHsgY29uc3QgdCA9IHRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGggLSAxXTsgdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0ICYmIHRoaXMuX2FjdGl2YXRlKHQpIH0gZWxzZSB7IGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgdCA8IHRoaXMuX29mZnNldHNbMF0gJiYgdGhpcy5fb2Zmc2V0c1swXSA+IDApIHJldHVybiB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsLCB2b2lkIHRoaXMuX2NsZWFyKCk7IGZvciAobGV0IGUgPSB0aGlzLl9vZmZzZXRzLmxlbmd0aDsgZS0tOyl0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRoaXMuX3RhcmdldHNbZV0gJiYgdCA+PSB0aGlzLl9vZmZzZXRzW2VdICYmICh2b2lkIDAgPT09IHRoaXMuX29mZnNldHNbZSArIDFdIHx8IHQgPCB0aGlzLl9vZmZzZXRzW2UgKyAxXSkgJiYgdGhpcy5fYWN0aXZhdGUodGhpcy5fdGFyZ2V0c1tlXSkgfSB9IF9hY3RpdmF0ZShlKSB7IHRoaXMuX2FjdGl2ZVRhcmdldCA9IGUsIHRoaXMuX2NsZWFyKCk7IGNvbnN0IGkgPSB0aGlzLl9zZWxlY3Rvci5zcGxpdCgiLCIpLm1hcCh0ID0+IGAke3R9W2RhdGEtYnMtdGFyZ2V0PSIke2V9Il0sJHt0fVtocmVmPSIke2V9Il1gKSwgbiA9IHQuZmluZE9uZShpLmpvaW4oIiwiKSk7IG4uY2xhc3NMaXN0LmNvbnRhaW5zKCJkcm9wZG93bi1pdGVtIikgPyAodC5maW5kT25lKCIuZHJvcGRvd24tdG9nZ2xlIiwgbi5jbG9zZXN0KCIuZHJvcGRvd24iKSkuY2xhc3NMaXN0LmFkZCgiYWN0aXZlIiksIG4uY2xhc3NMaXN0LmFkZCgiYWN0aXZlIikpIDogKG4uY2xhc3NMaXN0LmFkZCgiYWN0aXZlIiksIHQucGFyZW50cyhuLCAiLm5hdiwgLmxpc3QtZ3JvdXAiKS5mb3JFYWNoKGUgPT4geyB0LnByZXYoZSwgIi5uYXYtbGluaywgLmxpc3QtZ3JvdXAtaXRlbSIpLmZvckVhY2godCA9PiB0LmNsYXNzTGlzdC5hZGQoImFjdGl2ZSIpKSwgdC5wcmV2KGUsICIubmF2LWl0ZW0iKS5mb3JFYWNoKGUgPT4geyB0LmNoaWxkcmVuKGUsICIubmF2LWxpbmsiKS5mb3JFYWNoKHQgPT4gdC5jbGFzc0xpc3QuYWRkKCJhY3RpdmUiKSkgfSkgfSkpLCBQLnRyaWdnZXIodGhpcy5fc2Nyb2xsRWxlbWVudCwgImFjdGl2YXRlLmJzLnNjcm9sbHNweSIsIHsgcmVsYXRlZFRhcmdldDogZSB9KSB9IF9jbGVhcigpIHsgdC5maW5kKHRoaXMuX3NlbGVjdG9yKS5maWx0ZXIodCA9PiB0LmNsYXNzTGlzdC5jb250YWlucygiYWN0aXZlIikpLmZvckVhY2godCA9PiB0LmNsYXNzTGlzdC5yZW1vdmUoImFjdGl2ZSIpKSB9IHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UodCkgeyByZXR1cm4gdGhpcy5lYWNoKChmdW5jdGlvbiAoKSB7IGNvbnN0IGUgPSBKZS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIHQpOyBpZiAoInN0cmluZyIgPT0gdHlwZW9mIHQpIHsgaWYgKHZvaWQgMCA9PT0gZVt0XSkgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkICIke3R9ImApOyBlW3RdKCkgfSB9KSkgfSB9IFAub24od2luZG93LCAibG9hZC5icy5zY3JvbGxzcHkuZGF0YS1hcGkiLCAoKSA9PiB7IHQuZmluZCgnW2RhdGEtYnMtc3B5PSJzY3JvbGwiXScpLmZvckVhY2godCA9PiBuZXcgSmUodCkpIH0pLCBfKEplKTsgY2xhc3MgdGkgZXh0ZW5kcyBCIHsgc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gInRhYiIgfSBzaG93KCkgeyBpZiAodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoImFjdGl2ZSIpKSByZXR1cm47IGxldCBlOyBjb25zdCBpID0gcyh0aGlzLl9lbGVtZW50KSwgbiA9IHRoaXMuX2VsZW1lbnQuY2xvc2VzdCgiLm5hdiwgLmxpc3QtZ3JvdXAiKTsgaWYgKG4pIHsgY29uc3QgaSA9ICJVTCIgPT09IG4ubm9kZU5hbWUgfHwgIk9MIiA9PT0gbi5ub2RlTmFtZSA/ICI6c2NvcGUgPiBsaSA+IC5hY3RpdmUiIDogIi5hY3RpdmUiOyBlID0gdC5maW5kKGksIG4pLCBlID0gZVtlLmxlbmd0aCAtIDFdIH0gY29uc3QgbyA9IGUgPyBQLnRyaWdnZXIoZSwgImhpZGUuYnMudGFiIiwgeyByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50IH0pIDogbnVsbDsgaWYgKFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCAic2hvdy5icy50YWIiLCB7IHJlbGF0ZWRUYXJnZXQ6IGUgfSkuZGVmYXVsdFByZXZlbnRlZCB8fCBudWxsICE9PSBvICYmIG8uZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuOyB0aGlzLl9hY3RpdmF0ZSh0aGlzLl9lbGVtZW50LCBuKTsgY29uc3QgciA9ICgpID0+IHsgUC50cmlnZ2VyKGUsICJoaWRkZW4uYnMudGFiIiwgeyByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50IH0pLCBQLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgInNob3duLmJzLnRhYiIsIHsgcmVsYXRlZFRhcmdldDogZSB9KSB9OyBpID8gdGhpcy5fYWN0aXZhdGUoaSwgaS5wYXJlbnROb2RlLCByKSA6IHIoKSB9IF9hY3RpdmF0ZShlLCBpLCBuKSB7IGNvbnN0IHMgPSAoIWkgfHwgIlVMIiAhPT0gaS5ub2RlTmFtZSAmJiAiT0wiICE9PSBpLm5vZGVOYW1lID8gdC5jaGlsZHJlbihpLCAiLmFjdGl2ZSIpIDogdC5maW5kKCI6c2NvcGUgPiBsaSA+IC5hY3RpdmUiLCBpKSlbMF0sIG8gPSBuICYmIHMgJiYgcy5jbGFzc0xpc3QuY29udGFpbnMoImZhZGUiKSwgciA9ICgpID0+IHRoaXMuX3RyYW5zaXRpb25Db21wbGV0ZShlLCBzLCBuKTsgcyAmJiBvID8gKHMuY2xhc3NMaXN0LnJlbW92ZSgic2hvdyIpLCB0aGlzLl9xdWV1ZUNhbGxiYWNrKHIsIGUsICEwKSkgOiByKCkgfSBfdHJhbnNpdGlvbkNvbXBsZXRlKGUsIGksIG4pIHsgaWYgKGkpIHsgaS5jbGFzc0xpc3QucmVtb3ZlKCJhY3RpdmUiKTsgY29uc3QgZSA9IHQuZmluZE9uZSgiOnNjb3BlID4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZSIsIGkucGFyZW50Tm9kZSk7IGUgJiYgZS5jbGFzc0xpc3QucmVtb3ZlKCJhY3RpdmUiKSwgInRhYiIgPT09IGkuZ2V0QXR0cmlidXRlKCJyb2xlIikgJiYgaS5zZXRBdHRyaWJ1dGUoImFyaWEtc2VsZWN0ZWQiLCAhMSkgfSBlLmNsYXNzTGlzdC5hZGQoImFjdGl2ZSIpLCAidGFiIiA9PT0gZS5nZXRBdHRyaWJ1dGUoInJvbGUiKSAmJiBlLnNldEF0dHJpYnV0ZSgiYXJpYS1zZWxlY3RlZCIsICEwKSwgZihlKSwgZS5jbGFzc0xpc3QuY29udGFpbnMoImZhZGUiKSAmJiBlLmNsYXNzTGlzdC5hZGQoInNob3ciKTsgbGV0IHMgPSBlLnBhcmVudE5vZGU7IGlmIChzICYmICJMSSIgPT09IHMubm9kZU5hbWUgJiYgKHMgPSBzLnBhcmVudE5vZGUpLCBzICYmIHMuY2xhc3NMaXN0LmNvbnRhaW5zKCJkcm9wZG93bi1tZW51IikpIHsgY29uc3QgaSA9IGUuY2xvc2VzdCgiLmRyb3Bkb3duIik7IGkgJiYgdC5maW5kKCIuZHJvcGRvd24tdG9nZ2xlIiwgaSkuZm9yRWFjaCh0ID0+IHQuY2xhc3NMaXN0LmFkZCgiYWN0aXZlIikpLCBlLnNldEF0dHJpYnV0ZSgiYXJpYS1leHBhbmRlZCIsICEwKSB9IG4gJiYgbigpIH0gc3RhdGljIGpRdWVyeUludGVyZmFjZSh0KSB7IHJldHVybiB0aGlzLmVhY2goKGZ1bmN0aW9uICgpIHsgY29uc3QgZSA9IHRpLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyk7IGlmICgic3RyaW5nIiA9PSB0eXBlb2YgdCkgeyBpZiAodm9pZCAwID09PSBlW3RdKSB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgIiR7dH0iYCk7IGVbdF0oKSB9IH0pKSB9IH0gUC5vbihkb2N1bWVudCwgImNsaWNrLmJzLnRhYi5kYXRhLWFwaSIsICdbZGF0YS1icy10b2dnbGU9InRhYiJdLCBbZGF0YS1icy10b2dnbGU9InBpbGwiXSwgW2RhdGEtYnMtdG9nZ2xlPSJsaXN0Il0nLCAoZnVuY3Rpb24gKHQpIHsgWyJBIiwgIkFSRUEiXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpICYmIHQucHJldmVudERlZmF1bHQoKSwgaCh0aGlzKSB8fCB0aS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpLnNob3coKSB9KSksIF8odGkpOyBjb25zdCBlaSA9IHsgYW5pbWF0aW9uOiAiYm9vbGVhbiIsIGF1dG9oaWRlOiAiYm9vbGVhbiIsIGRlbGF5OiAibnVtYmVyIiB9LCBpaSA9IHsgYW5pbWF0aW9uOiAhMCwgYXV0b2hpZGU6ICEwLCBkZWxheTogNWUzIH07IGNsYXNzIG5pIGV4dGVuZHMgQiB7IGNvbnN0cnVjdG9yKHQsIGUpIHsgc3VwZXIodCksIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhlKSwgdGhpcy5fdGltZW91dCA9IG51bGwsIHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb24gPSAhMSwgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbiA9ICExLCB0aGlzLl9zZXRMaXN0ZW5lcnMoKSB9IHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7IHJldHVybiBlaSB9IHN0YXRpYyBnZXQgRGVmYXVsdCgpIHsgcmV0dXJuIGlpIH0gc3RhdGljIGdldCBOQU1FKCkgeyByZXR1cm4gInRvYXN0IiB9IHNob3coKSB7IFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCAic2hvdy5icy50b2FzdCIpLmRlZmF1bHRQcmV2ZW50ZWQgfHwgKHRoaXMuX2NsZWFyVGltZW91dCgpLCB0aGlzLl9jb25maWcuYW5pbWF0aW9uICYmIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZCgiZmFkZSIpLCB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoImhpZGUiKSwgZih0aGlzLl9lbGVtZW50KSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKCJzaG93aW5nIiksIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4geyB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoInNob3dpbmciKSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKCJzaG93IiksIFAudHJpZ2dlcih0aGlzLl9lbGVtZW50LCAic2hvd24uYnMudG9hc3QiKSwgdGhpcy5fbWF5YmVTY2hlZHVsZUhpZGUoKSB9LCB0aGlzLl9lbGVtZW50LCB0aGlzLl9jb25maWcuYW5pbWF0aW9uKSkgfSBoaWRlKCkgeyB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygic2hvdyIpICYmIChQLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgImhpZGUuYnMudG9hc3QiKS5kZWZhdWx0UHJldmVudGVkIHx8ICh0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoInNob3ciKSwgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7IHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZCgiaGlkZSIpLCBQLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgImhpZGRlbi5icy50b2FzdCIpIH0sIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NvbmZpZy5hbmltYXRpb24pKSkgfSBkaXNwb3NlKCkgeyB0aGlzLl9jbGVhclRpbWVvdXQoKSwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoInNob3ciKSAmJiB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoInNob3ciKSwgc3VwZXIuZGlzcG9zZSgpIH0gX2dldENvbmZpZyh0KSB7IHJldHVybiB0ID0geyAuLi5paSwgLi4uVS5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSwgLi4uIm9iamVjdCIgPT0gdHlwZW9mIHQgJiYgdCA/IHQgOiB7fSB9LCBsKCJ0b2FzdCIsIHQsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpLCB0IH0gX21heWJlU2NoZWR1bGVIaWRlKCkgeyB0aGlzLl9jb25maWcuYXV0b2hpZGUgJiYgKHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb24gfHwgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbiB8fCAodGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4geyB0aGlzLmhpZGUoKSB9LCB0aGlzLl9jb25maWcuZGVsYXkpKSkgfSBfb25JbnRlcmFjdGlvbih0LCBlKSB7IHN3aXRjaCAodC50eXBlKSB7IGNhc2UgIm1vdXNlb3ZlciI6IGNhc2UgIm1vdXNlb3V0IjogdGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiA9IGU7IGJyZWFrOyBjYXNlICJmb2N1c2luIjogY2FzZSAiZm9jdXNvdXQiOiB0aGlzLl9oYXNLZXlib2FyZEludGVyYWN0aW9uID0gZSB9aWYgKGUpIHJldHVybiB2b2lkIHRoaXMuX2NsZWFyVGltZW91dCgpOyBjb25zdCBpID0gdC5yZWxhdGVkVGFyZ2V0OyB0aGlzLl9lbGVtZW50ID09PSBpIHx8IHRoaXMuX2VsZW1lbnQuY29udGFpbnMoaSkgfHwgdGhpcy5fbWF5YmVTY2hlZHVsZUhpZGUoKSB9IF9zZXRMaXN0ZW5lcnMoKSB7IFAub24odGhpcy5fZWxlbWVudCwgImNsaWNrLmRpc21pc3MuYnMudG9hc3QiLCAnW2RhdGEtYnMtZGlzbWlzcz0idG9hc3QiXScsICgpID0+IHRoaXMuaGlkZSgpKSwgUC5vbih0aGlzLl9lbGVtZW50LCAibW91c2VvdmVyLmJzLnRvYXN0IiwgdCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKHQsICEwKSksIFAub24odGhpcy5fZWxlbWVudCwgIm1vdXNlb3V0LmJzLnRvYXN0IiwgdCA9PiB0aGlzLl9vbkludGVyYWN0aW9uKHQsICExKSksIFAub24odGhpcy5fZWxlbWVudCwgImZvY3VzaW4uYnMudG9hc3QiLCB0ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24odCwgITApKSwgUC5vbih0aGlzLl9lbGVtZW50LCAiZm9jdXNvdXQuYnMudG9hc3QiLCB0ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24odCwgITEpKSB9IF9jbGVhclRpbWVvdXQoKSB7IGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KSwgdGhpcy5fdGltZW91dCA9IG51bGwgfSBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKHQpIHsgcmV0dXJuIHRoaXMuZWFjaCgoZnVuY3Rpb24gKCkgeyBjb25zdCBlID0gbmkuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCB0KTsgaWYgKCJzdHJpbmciID09IHR5cGVvZiB0KSB7IGlmICh2b2lkIDAgPT09IGVbdF0pIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCAiJHt0fSJgKTsgZVt0XSh0aGlzKSB9IH0pKSB9IH0gcmV0dXJuIF8obmkpLCB7IEFsZXJ0OiBXLCBCdXR0b246IHEsIENhcm91c2VsOiBaLCBDb2xsYXBzZTogZXQsIERyb3Bkb3duOiBBZSwgTW9kYWw6IERlLCBPZmZjYW52YXM6IE5lLCBQb3BvdmVyOiBRZSwgU2Nyb2xsU3B5OiBKZSwgVGFiOiB0aSwgVG9hc3Q6IG5pLCBUb29sdGlwOiBGZSB9IH0pKTsNCi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJvb3RzdHJhcC5idW5kbGUubWluLmpzLm1hcA0KLyoqCiAqIFN3aXBlciA4LjMuMgogKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9ucwogKiBodHRwczovL3N3aXBlcmpzLmNvbQogKgogKiBDb3B5cmlnaHQgMjAxNC0yMDIyIFZsYWRpbWlyIEtoYXJsYW1waWRpCiAqCiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZQogKgogKiBSZWxlYXNlZCBvbjogSnVseSAyNiwgMjAyMgogKi8KCihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7CiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6CiAgICAgICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDoKICAgICAgICAgICAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLlN3aXBlciA9IGZhY3RvcnkoKSk7Cn0pKHRoaXMsIChmdW5jdGlvbiAoKSB7DQogICAgJ3VzZSBzdHJpY3QnOwoKICAgIC8qKgogICAgICogU1NSIFdpbmRvdyA0LjAuMgogICAgICogQmV0dGVyIGhhbmRsaW5nIGZvciB3aW5kb3cgb2JqZWN0IGluIFNTUiBlbnZpcm9ubWVudAogICAgICogaHR0cHM6Ly9naXRodWIuY29tL25vbGltaXRzNHdlYi9zc3Itd2luZG93CiAgICAgKgogICAgICogQ29weXJpZ2h0IDIwMjEsIFZsYWRpbWlyIEtoYXJsYW1waWRpCiAgICAgKgogICAgICogTGljZW5zZWQgdW5kZXIgTUlUCiAgICAgKgogICAgICogUmVsZWFzZWQgb246IERlY2VtYmVyIDEzLCAyMDIxCiAgICAgKi8KCiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqLwogICAgZnVuY3Rpb24gaXNPYmplY3QkMShvYmopIHsKICAgICAgICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICdjb25zdHJ1Y3RvcicgaW4gb2JqICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0OwogICAgfQoKICAgIGZ1bmN0aW9uIGV4dGVuZCQxKHRhcmdldCwgc3JjKSB7CiAgICAgICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHRhcmdldCA9IHt9OwogICAgICAgIH0KCiAgICAgICAgaWYgKHNyYyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHNyYyA9IHt9OwogICAgICAgIH0KCiAgICAgICAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGtleSA9PiB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICd1bmRlZmluZWQnKSB0YXJnZXRba2V5XSA9IHNyY1trZXldOyBlbHNlIGlmIChpc09iamVjdCQxKHNyY1trZXldKSAmJiBpc09iamVjdCQxKHRhcmdldFtrZXldKSAmJiBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgZXh0ZW5kJDEodGFyZ2V0W2tleV0sIHNyY1trZXldKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIGNvbnN0IHNzckRvY3VtZW50ID0gewogICAgICAgIGJvZHk6IHt9LAoKICAgICAgICBhZGRFdmVudExpc3RlbmVyKCkgeyB9LAoKICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKCkgeyB9LAoKICAgICAgICBhY3RpdmVFbGVtZW50OiB7CiAgICAgICAgICAgIGJsdXIoKSB7IH0sCgogICAgICAgICAgICBub2RlTmFtZTogJycKICAgICAgICB9LAoKICAgICAgICBxdWVyeVNlbGVjdG9yKCkgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9LAoKICAgICAgICBxdWVyeVNlbGVjdG9yQWxsKCkgewogICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgfSwKCiAgICAgICAgZ2V0RWxlbWVudEJ5SWQoKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0sCgogICAgICAgIGNyZWF0ZUV2ZW50KCkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgaW5pdEV2ZW50KCkgeyB9CgogICAgICAgICAgICB9OwogICAgICAgIH0sCgogICAgICAgIGNyZWF0ZUVsZW1lbnQoKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW10sCiAgICAgICAgICAgICAgICBjaGlsZE5vZGVzOiBbXSwKICAgICAgICAgICAgICAgIHN0eWxlOiB7fSwKCiAgICAgICAgICAgICAgICBzZXRBdHRyaWJ1dGUoKSB7IH0sCgogICAgICAgICAgICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgfTsKICAgICAgICB9LAoKICAgICAgICBjcmVhdGVFbGVtZW50TlMoKSB7CiAgICAgICAgICAgIHJldHVybiB7fTsKICAgICAgICB9LAoKICAgICAgICBpbXBvcnROb2RlKCkgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9LAoKICAgICAgICBsb2NhdGlvbjogewogICAgICAgICAgICBoYXNoOiAnJywKICAgICAgICAgICAgaG9zdDogJycsCiAgICAgICAgICAgIGhvc3RuYW1lOiAnJywKICAgICAgICAgICAgaHJlZjogJycsCiAgICAgICAgICAgIG9yaWdpbjogJycsCiAgICAgICAgICAgIHBhdGhuYW1lOiAnJywKICAgICAgICAgICAgcHJvdG9jb2w6ICcnLAogICAgICAgICAgICBzZWFyY2g6ICcnCiAgICAgICAgfQogICAgfTsKCiAgICBmdW5jdGlvbiBnZXREb2N1bWVudCgpIHsKICAgICAgICBjb25zdCBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB7fTsKICAgICAgICBleHRlbmQkMShkb2MsIHNzckRvY3VtZW50KTsKICAgICAgICByZXR1cm4gZG9jOwogICAgfQoKICAgIGNvbnN0IHNzcldpbmRvdyA9IHsKICAgICAgICBkb2N1bWVudDogc3NyRG9jdW1lbnQsCiAgICAgICAgbmF2aWdhdG9yOiB7CiAgICAgICAgICAgIHVzZXJBZ2VudDogJycKICAgICAgICB9LAogICAgICAgIGxvY2F0aW9uOiB7CiAgICAgICAgICAgIGhhc2g6ICcnLAogICAgICAgICAgICBob3N0OiAnJywKICAgICAgICAgICAgaG9zdG5hbWU6ICcnLAogICAgICAgICAgICBocmVmOiAnJywKICAgICAgICAgICAgb3JpZ2luOiAnJywKICAgICAgICAgICAgcGF0aG5hbWU6ICcnLAogICAgICAgICAgICBwcm90b2NvbDogJycsCiAgICAgICAgICAgIHNlYXJjaDogJycKICAgICAgICB9LAogICAgICAgIGhpc3Rvcnk6IHsKICAgICAgICAgICAgcmVwbGFjZVN0YXRlKCkgeyB9LAoKICAgICAgICAgICAgcHVzaFN0YXRlKCkgeyB9LAoKICAgICAgICAgICAgZ28oKSB7IH0sCgogICAgICAgICAgICBiYWNrKCkgeyB9CgogICAgICAgIH0sCiAgICAgICAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkgewogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9LAoKICAgICAgICBhZGRFdmVudExpc3RlbmVyKCkgeyB9LAoKICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyKCkgeyB9LAoKICAgICAgICBnZXRDb21wdXRlZFN0eWxlKCkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZSgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9OwogICAgICAgIH0sCgogICAgICAgIEltYWdlKCkgeyB9LAoKICAgICAgICBEYXRlKCkgeyB9LAoKICAgICAgICBzY3JlZW46IHt9LAoKICAgICAgICBzZXRUaW1lb3V0KCkgeyB9LAoKICAgICAgICBjbGVhclRpbWVvdXQoKSB7IH0sCgogICAgICAgIG1hdGNoTWVkaWEoKSB7CiAgICAgICAgICAgIHJldHVybiB7fTsKICAgICAgICB9LAoKICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7CiAgICAgICAgfSwKCiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjbGVhclRpbWVvdXQoaWQpOwogICAgICAgIH0KCiAgICB9OwoKICAgIGZ1bmN0aW9uIGdldFdpbmRvdygpIHsKICAgICAgICBjb25zdCB3aW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9OwogICAgICAgIGV4dGVuZCQxKHdpbiwgc3NyV2luZG93KTsKICAgICAgICByZXR1cm4gd2luOwogICAgfQoKICAgIC8qKgogICAgICogRG9tNyA0LjAuNAogICAgICogTWluaW1hbGlzdGljIEphdmFTY3JpcHQgbGlicmFyeSBmb3IgRE9NIG1hbmlwdWxhdGlvbiwgd2l0aCBhIGpRdWVyeS1jb21wYXRpYmxlIEFQSQogICAgICogaHR0cHM6Ly9mcmFtZXdvcms3LmlvL2RvY3MvZG9tNy5odG1sCiAgICAgKgogICAgICogQ29weXJpZ2h0IDIwMjIsIFZsYWRpbWlyIEtoYXJsYW1waWRpCiAgICAgKgogICAgICogTGljZW5zZWQgdW5kZXIgTUlUCiAgICAgKgogICAgICogUmVsZWFzZWQgb246IEphbnVhcnkgMTEsIDIwMjIKICAgICAqLwogICAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi8KCiAgICBmdW5jdGlvbiBtYWtlUmVhY3RpdmUob2JqKSB7CiAgICAgICAgY29uc3QgcHJvdG8gPSBvYmouX19wcm90b19fOwogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICdfX3Byb3RvX18nLCB7CiAgICAgICAgICAgIGdldCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBwcm90bzsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIHNldCh2YWx1ZSkgewogICAgICAgICAgICAgICAgcHJvdG8uX19wcm90b19fID0gdmFsdWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgfSk7CiAgICB9CgogICAgY2xhc3MgRG9tNyBleHRlbmRzIEFycmF5IHsKICAgICAgICBjb25zdHJ1Y3RvcihpdGVtcykgewogICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW1zID09PSAnbnVtYmVyJykgewogICAgICAgICAgICAgICAgc3VwZXIoaXRlbXMpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc3VwZXIoLi4uKGl0ZW1zIHx8IFtdKSk7CiAgICAgICAgICAgICAgICBtYWtlUmVhY3RpdmUodGhpcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgfQoKICAgIGZ1bmN0aW9uIGFycmF5RmxhdChhcnIpIHsKICAgICAgICBpZiAoYXJyID09PSB2b2lkIDApIHsKICAgICAgICAgICAgYXJyID0gW107CiAgICAgICAgfQoKICAgICAgICBjb25zdCByZXMgPSBbXTsKICAgICAgICBhcnIuZm9yRWFjaChlbCA9PiB7CiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSkgewogICAgICAgICAgICAgICAgcmVzLnB1c2goLi4uYXJyYXlGbGF0KGVsKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXMucHVzaChlbCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcmVzOwogICAgfQoKICAgIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFyciwgY2FsbGJhY2spIHsKICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGFyciwgY2FsbGJhY2spOwogICAgfQoKICAgIGZ1bmN0aW9uIGFycmF5VW5pcXVlKGFycikgewogICAgICAgIGNvbnN0IHVuaXF1ZUFycmF5ID0gW107CgogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIGlmICh1bmlxdWVBcnJheS5pbmRleE9mKGFycltpXSkgPT09IC0xKSB1bmlxdWVBcnJheS5wdXNoKGFycltpXSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdW5pcXVlQXJyYXk7CiAgICB9CgoKICAgIGZ1bmN0aW9uIHFzYShzZWxlY3RvciwgY29udGV4dCkgewogICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIHJldHVybiBbc2VsZWN0b3JdOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgYSA9IFtdOwogICAgICAgIGNvbnN0IHJlcyA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7CgogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIGEucHVzaChyZXNbaV0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGE7CiAgICB9CgogICAgZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCkgewogICAgICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpOwogICAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTsKICAgICAgICBsZXQgYXJyID0gW107CgogICAgICAgIGlmICghY29udGV4dCAmJiBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHsKICAgICAgICAgICAgcmV0dXJuIHNlbGVjdG9yOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFzZWxlY3RvcikgewogICAgICAgICAgICByZXR1cm4gbmV3IERvbTcoYXJyKTsKICAgICAgICB9CgogICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSBzZWxlY3Rvci50cmltKCk7CgogICAgICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8JykgPj0gMCAmJiBodG1sLmluZGV4T2YoJz4nKSA+PSAwKSB7CiAgICAgICAgICAgICAgICBsZXQgdG9DcmVhdGUgPSAnZGl2JzsKICAgICAgICAgICAgICAgIGlmIChodG1sLmluZGV4T2YoJzxsaScpID09PSAwKSB0b0NyZWF0ZSA9ICd1bCc7CiAgICAgICAgICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dHInKSA9PT0gMCkgdG9DcmVhdGUgPSAndGJvZHknOwogICAgICAgICAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRkJykgPT09IDAgfHwgaHRtbC5pbmRleE9mKCc8dGgnKSA9PT0gMCkgdG9DcmVhdGUgPSAndHInOwogICAgICAgICAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRib2R5JykgPT09IDApIHRvQ3JlYXRlID0gJ3RhYmxlJzsKICAgICAgICAgICAgICAgIGlmIChodG1sLmluZGV4T2YoJzxvcHRpb24nKSA9PT0gMCkgdG9DcmVhdGUgPSAnc2VsZWN0JzsKICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBQYXJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRvQ3JlYXRlKTsKICAgICAgICAgICAgICAgIHRlbXBQYXJlbnQuaW5uZXJIVE1MID0gaHRtbDsKCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRlbXBQYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKHRlbXBQYXJlbnQuY2hpbGROb2Rlc1tpXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhcnIgPSBxc2Eoc2VsZWN0b3IudHJpbSgpLCBjb250ZXh0IHx8IGRvY3VtZW50KTsKICAgICAgICAgICAgfSAvLyBhcnIgPSBxc2Eoc2VsZWN0b3IsIGRvY3VtZW50KTsKCiAgICAgICAgfSBlbHNlIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciA9PT0gd2luZG93IHx8IHNlbGVjdG9yID09PSBkb2N1bWVudCkgewogICAgICAgICAgICBhcnIucHVzaChzZWxlY3Rvcik7CiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdG9yKSkgewogICAgICAgICAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSByZXR1cm4gc2VsZWN0b3I7CiAgICAgICAgICAgIGFyciA9IHNlbGVjdG9yOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG5ldyBEb203KGFycmF5VW5pcXVlKGFycikpOwogICAgfQoKICAgICQuZm4gPSBEb203LnByb3RvdHlwZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCgogICAgZnVuY3Rpb24gYWRkQ2xhc3MoKSB7CiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgICAgICAgIGNsYXNzZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgICAgICAgfQoKICAgICAgICBjb25zdCBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGMgPT4gYy5zcGxpdCgnICcpKSk7CiAgICAgICAgdGhpcy5mb3JFYWNoKGVsID0+IHsKICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc05hbWVzKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVDbGFzcygpIHsKICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHsKICAgICAgICAgICAgY2xhc3Nlc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChjID0+IGMuc3BsaXQoJyAnKSkpOwogICAgICAgIHRoaXMuZm9yRWFjaChlbCA9PiB7CiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3NOYW1lcyk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoKSB7CiAgICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7CiAgICAgICAgICAgIGNsYXNzZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoYyA9PiBjLnNwbGl0KCcgJykpKTsKICAgICAgICB0aGlzLmZvckVhY2goZWwgPT4gewogICAgICAgICAgICBjbGFzc05hbWVzLmZvckVhY2goY2xhc3NOYW1lID0+IHsKICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gaGFzQ2xhc3MoKSB7CiAgICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7CiAgICAgICAgICAgIGNsYXNzZXNbX2tleTRdID0gYXJndW1lbnRzW19rZXk0XTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoYyA9PiBjLnNwbGl0KCcgJykpKTsKICAgICAgICByZXR1cm4gYXJyYXlGaWx0ZXIodGhpcywgZWwgPT4gewogICAgICAgICAgICByZXR1cm4gY2xhc3NOYW1lcy5maWx0ZXIoY2xhc3NOYW1lID0+IGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKS5sZW5ndGggPiAwOwogICAgICAgIH0pLmxlbmd0aCA+IDA7CiAgICB9CgogICAgZnVuY3Rpb24gYXR0cihhdHRycywgdmFsdWUpIHsKICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXR0cnMgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIC8vIEdldCBhdHRyCiAgICAgICAgICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXS5nZXRBdHRyaWJ1dGUoYXR0cnMpOwogICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgIH0gLy8gU2V0IGF0dHJzCgoKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHsKICAgICAgICAgICAgICAgIC8vIFN0cmluZwogICAgICAgICAgICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0cnMsIHZhbHVlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIE9iamVjdAogICAgICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyTmFtZSBpbiBhdHRycykgewogICAgICAgICAgICAgICAgICAgIHRoaXNbaV1bYXR0ck5hbWVdID0gYXR0cnNbYXR0ck5hbWVdOwogICAgICAgICAgICAgICAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyc1thdHRyTmFtZV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVBdHRyKGF0dHIpIHsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgdGhpc1tpXS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIHRoaXNbaV0uc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNpdGlvbiQxKGR1cmF0aW9uKSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIHRoaXNbaV0uc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdHlwZW9mIGR1cmF0aW9uICE9PSAnc3RyaW5nJyA/IGAke2R1cmF0aW9ufW1zYCA6IGR1cmF0aW9uOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9CgogICAgZnVuY3Rpb24gb24oKSB7CiAgICAgICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7CiAgICAgICAgICAgIGFyZ3NbX2tleTVdID0gYXJndW1lbnRzW19rZXk1XTsKICAgICAgICB9CgogICAgICAgIGxldCBbZXZlbnRUeXBlLCB0YXJnZXRTZWxlY3RvciwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJnczsKCiAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIFtldmVudFR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7CiAgICAgICAgICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7CgogICAgICAgIGZ1bmN0aW9uIGhhbmRsZUxpdmVFdmVudChlKSB7CiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0OwogICAgICAgICAgICBpZiAoIXRhcmdldCkgcmV0dXJuOwogICAgICAgICAgICBjb25zdCBldmVudERhdGEgPSBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdOwoKICAgICAgICAgICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkgewogICAgICAgICAgICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkKHRhcmdldCkuaXModGFyZ2V0U2VsZWN0b3IpKSBsaXN0ZW5lci5hcHBseSh0YXJnZXQsIGV2ZW50RGF0YSk7IGVsc2UgewogICAgICAgICAgICAgICAgY29uc3QgcGFyZW50cyA9ICQodGFyZ2V0KS5wYXJlbnRzKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKCiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHBhcmVudHMubGVuZ3RoOyBrICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoJChwYXJlbnRzW2tdKS5pcyh0YXJnZXRTZWxlY3RvcikpIGxpc3RlbmVyLmFwcGx5KHBhcmVudHNba10sIGV2ZW50RGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGUpIHsKICAgICAgICAgICAgY29uc3QgZXZlbnREYXRhID0gZSAmJiBlLnRhcmdldCA/IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW10gOiBbXTsKCiAgICAgICAgICAgIGlmIChldmVudERhdGEuaW5kZXhPZihlKSA8IDApIHsKICAgICAgICAgICAgICAgIGV2ZW50RGF0YS51bnNoaWZ0KGUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBldmVudERhdGEpOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7CiAgICAgICAgbGV0IGo7CgogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICBjb25zdCBlbCA9IHRoaXNbaV07CgogICAgICAgICAgICBpZiAoIXRhcmdldFNlbGVjdG9yKSB7CiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgZXZlbnRzLmxlbmd0aDsgaiArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBldmVudHNbal07CiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzKSBlbC5kb203TGlzdGVuZXJzID0ge307CiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzW2V2ZW50XSkgZWwuZG9tN0xpc3RlbmVyc1tldmVudF0gPSBbXTsKICAgICAgICAgICAgICAgICAgICBlbC5kb203TGlzdGVuZXJzW2V2ZW50XS5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUV2ZW50CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlRXZlbnQsIGNhcHR1cmUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gTGl2ZSBldmVudHMKICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IGV2ZW50c1tqXTsKICAgICAgICAgICAgICAgICAgICBpZiAoIWVsLmRvbTdMaXZlTGlzdGVuZXJzKSBlbC5kb203TGl2ZUxpc3RlbmVycyA9IHt9OwogICAgICAgICAgICAgICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnRdKSBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF0gPSBbXTsKICAgICAgICAgICAgICAgICAgICBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF0ucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLAogICAgICAgICAgICAgICAgICAgICAgICBwcm94eUxpc3RlbmVyOiBoYW5kbGVMaXZlRXZlbnQKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVMaXZlRXZlbnQsIGNhcHR1cmUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBmdW5jdGlvbiBvZmYoKSB7CiAgICAgICAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7CiAgICAgICAgICAgIGFyZ3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTsKICAgICAgICB9CgogICAgICAgIGxldCBbZXZlbnRUeXBlLCB0YXJnZXRTZWxlY3RvciwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJnczsKCiAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIFtldmVudFR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7CiAgICAgICAgICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7CiAgICAgICAgY29uc3QgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7CgogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW2ldOwoKICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7CiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IHRoaXNbal07CiAgICAgICAgICAgICAgICBsZXQgaGFuZGxlcnM7CgogICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGlzdGVuZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2VsZWN0b3IgJiYgZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIHsKICAgICAgICAgICAgICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlcnMgJiYgaGFuZGxlcnMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IGhhbmRsZXJzLmxlbmd0aCAtIDE7IGsgPj0gMDsgayAtPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1trXTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyID09PSBsaXN0ZW5lcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ID09PSBsaXN0ZW5lcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghbGlzdGVuZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyaWdnZXIoKSB7CiAgICAgICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7CgogICAgICAgIGZvciAodmFyIF9sZW45ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuOSksIF9rZXk5ID0gMDsgX2tleTkgPCBfbGVuOTsgX2tleTkrKykgewogICAgICAgICAgICBhcmdzW19rZXk5XSA9IGFyZ3VtZW50c1tfa2V5OV07CiAgICAgICAgfQoKICAgICAgICBjb25zdCBldmVudHMgPSBhcmdzWzBdLnNwbGl0KCcgJyk7CiAgICAgICAgY29uc3QgZXZlbnREYXRhID0gYXJnc1sxXTsKCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBldmVudHNbaV07CgogICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpc1tqXTsKCiAgICAgICAgICAgICAgICBpZiAod2luZG93LkN1c3RvbUV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudChldmVudCwgewogICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGV2ZW50RGF0YSwKICAgICAgICAgICAgICAgICAgICAgICAgYnViYmxlczogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGVsLmRvbTdFdmVudERhdGEgPSBhcmdzLmZpbHRlcigoZGF0YSwgZGF0YUluZGV4KSA9PiBkYXRhSW5kZXggPiAwKTsKICAgICAgICAgICAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2dCk7CiAgICAgICAgICAgICAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IFtdOwogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlbC5kb203RXZlbnREYXRhOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kJDEoY2FsbGJhY2spIHsKICAgICAgICBjb25zdCBkb20gPSB0aGlzOwoKICAgICAgICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkgewogICAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjsKICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTsKICAgICAgICAgICAgZG9tLm9mZigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7CiAgICAgICAgfQoKICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgZG9tLm9uKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIGZ1bmN0aW9uIG91dGVyV2lkdGgoaW5jbHVkZU1hcmdpbnMpIHsKICAgICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGlmIChpbmNsdWRlTWFyZ2lucykgewogICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gdGhpcy5zdHlsZXMoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXJpZ2h0JykpICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgZnVuY3Rpb24gb3V0ZXJIZWlnaHQoaW5jbHVkZU1hcmdpbnMpIHsKICAgICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGlmIChpbmNsdWRlTWFyZ2lucykgewogICAgICAgICAgICAgICAgY29uc3Qgc3R5bGVzID0gdGhpcy5zdHlsZXMoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodCArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi10b3AnKSkgKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tYm90dG9tJykpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICBmdW5jdGlvbiBvZmZzZXQoKSB7CiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTsKICAgICAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpOwogICAgICAgICAgICBjb25zdCBlbCA9IHRoaXNbMF07CiAgICAgICAgICAgIGNvbnN0IGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOwogICAgICAgICAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTsKICAgICAgICAgICAgY29uc3QgY2xpZW50VG9wID0gZWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7CiAgICAgICAgICAgIGNvbnN0IGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwOwogICAgICAgICAgICBjb25zdCBzY3JvbGxUb3AgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFkgOiBlbC5zY3JvbGxUb3A7CiAgICAgICAgICAgIGNvbnN0IHNjcm9sbExlZnQgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFggOiBlbC5zY3JvbGxMZWZ0OwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgdG9wOiBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLAogICAgICAgICAgICAgICAgbGVmdDogYm94LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdAogICAgICAgICAgICB9OwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgZnVuY3Rpb24gc3R5bGVzKCkgewogICAgICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpOwogICAgICAgIGlmICh0aGlzWzBdKSByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgbnVsbCk7CiAgICAgICAgcmV0dXJuIHt9OwogICAgfQoKICAgIGZ1bmN0aW9uIGNzcyhwcm9wcywgdmFsdWUpIHsKICAgICAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTsKICAgICAgICBsZXQgaTsKCiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIC8vIC5jc3MoJ3dpZHRoJykKICAgICAgICAgICAgICAgIGlmICh0aGlzWzBdKSByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wcyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyAuY3NzKHsgd2lkdGg6ICcxMDBweCcgfSkKICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIHByb3BzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbaV0uc3R5bGVbcHJvcF0gPSBwcm9wc1twcm9wXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgLy8gLmNzcygnd2lkdGgnLCAnMTAwcHgnKQogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgdGhpc1tpXS5zdHlsZVtwcm9wc10gPSB2YWx1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBmdW5jdGlvbiBlYWNoKGNhbGxiYWNrKSB7CiAgICAgICAgaWYgKCFjYWxsYmFjaykgcmV0dXJuIHRoaXM7CiAgICAgICAgdGhpcy5mb3JFYWNoKChlbCwgaW5kZXgpID0+IHsKICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoZWwsIFtlbCwgaW5kZXhdKTsKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2spIHsKICAgICAgICBjb25zdCByZXN1bHQgPSBhcnJheUZpbHRlcih0aGlzLCBjYWxsYmFjayk7CiAgICAgICAgcmV0dXJuICQocmVzdWx0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBodG1sKGh0bWwpIHsKICAgICAgICBpZiAodHlwZW9mIGh0bWwgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5pbm5lckhUTUwgOiBudWxsOwogICAgICAgIH0KCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIHRoaXNbaV0uaW5uZXJIVE1MID0gaHRtbDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIGZ1bmN0aW9uIHRleHQodGV4dCkgewogICAgICAgIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLnRleHRDb250ZW50LnRyaW0oKSA6IG51bGw7CiAgICAgICAgfQoKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgdGhpc1tpXS50ZXh0Q29udGVudCA9IHRleHQ7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBmdW5jdGlvbiBpcyhzZWxlY3RvcikgewogICAgICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpOwogICAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTsKICAgICAgICBjb25zdCBlbCA9IHRoaXNbMF07CiAgICAgICAgbGV0IGNvbXBhcmVXaXRoOwogICAgICAgIGxldCBpOwogICAgICAgIGlmICghZWwgfHwgdHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlOwoKICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykgewogICAgICAgICAgICBpZiAoZWwubWF0Y2hlcykgcmV0dXJuIGVsLm1hdGNoZXMoc2VsZWN0b3IpOwogICAgICAgICAgICBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTsKICAgICAgICAgICAgaWYgKGVsLm1zTWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwubXNNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpOwogICAgICAgICAgICBjb21wYXJlV2l0aCA9ICQoc2VsZWN0b3IpOwoKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICBpZiAoY29tcGFyZVdpdGhbaV0gPT09IGVsKSByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgaWYgKHNlbGVjdG9yID09PSBkb2N1bWVudCkgewogICAgICAgICAgICByZXR1cm4gZWwgPT09IGRvY3VtZW50OwogICAgICAgIH0KCiAgICAgICAgaWYgKHNlbGVjdG9yID09PSB3aW5kb3cpIHsKICAgICAgICAgICAgcmV0dXJuIGVsID09PSB3aW5kb3c7CiAgICAgICAgfQoKICAgICAgICBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSB7CiAgICAgICAgICAgIGNvbXBhcmVXaXRoID0gc2VsZWN0b3Iubm9kZVR5cGUgPyBbc2VsZWN0b3JdIDogc2VsZWN0b3I7CgogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVdpdGgubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgIGlmIChjb21wYXJlV2l0aFtpXSA9PT0gZWwpIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgZnVuY3Rpb24gaW5kZXgoKSB7CiAgICAgICAgbGV0IGNoaWxkID0gdGhpc1swXTsKICAgICAgICBsZXQgaTsKCiAgICAgICAgaWYgKGNoaWxkKSB7CiAgICAgICAgICAgIGkgPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKCiAgICAgICAgICAgIHdoaWxlICgoY2hpbGQgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmcpICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGkgKz0gMTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQoKICAgIGZ1bmN0aW9uIGVxKGluZGV4KSB7CiAgICAgICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0aGlzOwogICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoOwoKICAgICAgICBpZiAoaW5kZXggPiBsZW5ndGggLSAxKSB7CiAgICAgICAgICAgIHJldHVybiAkKFtdKTsKICAgICAgICB9CgogICAgICAgIGlmIChpbmRleCA8IDApIHsKICAgICAgICAgICAgY29uc3QgcmV0dXJuSW5kZXggPSBsZW5ndGggKyBpbmRleDsKICAgICAgICAgICAgaWYgKHJldHVybkluZGV4IDwgMCkgcmV0dXJuICQoW10pOwogICAgICAgICAgICByZXR1cm4gJChbdGhpc1tyZXR1cm5JbmRleF1dKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkKFt0aGlzW2luZGV4XV0pOwogICAgfQoKICAgIGZ1bmN0aW9uIGFwcGVuZCgpIHsKICAgICAgICBsZXQgbmV3Q2hpbGQ7CiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpOwoKICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGFyZ3VtZW50cy5sZW5ndGg7IGsgKz0gMSkgewogICAgICAgICAgICBuZXdDaGlsZCA9IGsgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gayA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1trXTsKCiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDsKCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRlbXBEaXYuZmlyc3RDaGlsZCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKHRlbXBEaXYuZmlyc3RDaGlsZCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGRbal0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZChuZXdDaGlsZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIGZ1bmN0aW9uIHByZXBlbmQobmV3Q2hpbGQpIHsKICAgICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7CiAgICAgICAgbGV0IGk7CiAgICAgICAgbGV0IGo7CgogICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICB0ZW1wRGl2LmlubmVySFRNTCA9IG5ld0NoaWxkOwoKICAgICAgICAgICAgICAgIGZvciAoaiA9IHRlbXBEaXYuY2hpbGROb2Rlcy5sZW5ndGggLSAxOyBqID49IDA7IGogLT0gMSkgewogICAgICAgICAgICAgICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKHRlbXBEaXYuY2hpbGROb2Rlc1tqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHsKICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkgewogICAgICAgICAgICAgICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGQsIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzOwogICAgfQoKICAgIGZ1bmN0aW9uIG5leHQoc2VsZWN0b3IpIHsKICAgICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGlmIChzZWxlY3RvcikgewogICAgICAgICAgICAgICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nICYmICQodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiAkKFtdKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKSByZXR1cm4gJChbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTsKICAgICAgICAgICAgcmV0dXJuICQoW10pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICQoW10pOwogICAgfQoKICAgIGZ1bmN0aW9uIG5leHRBbGwoc2VsZWN0b3IpIHsKICAgICAgICBjb25zdCBuZXh0RWxzID0gW107CiAgICAgICAgbGV0IGVsID0gdGhpc1swXTsKICAgICAgICBpZiAoIWVsKSByZXR1cm4gJChbXSk7CgogICAgICAgIHdoaWxlIChlbC5uZXh0RWxlbWVudFNpYmxpbmcpIHsKICAgICAgICAgICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7CiAgICAgICAgICAgICAgICBpZiAoJChuZXh0KS5pcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChuZXh0KTsKICAgICAgICAgICAgfSBlbHNlIG5leHRFbHMucHVzaChuZXh0KTsKCiAgICAgICAgICAgIGVsID0gbmV4dDsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkKG5leHRFbHMpOwogICAgfQoKICAgIGZ1bmN0aW9uIHByZXYoc2VsZWN0b3IpIHsKICAgICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIGNvbnN0IGVsID0gdGhpc1swXTsKCiAgICAgICAgICAgIGlmIChzZWxlY3RvcikgewogICAgICAgICAgICAgICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgJChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiAkKFtdKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHJldHVybiAkKFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7CiAgICAgICAgICAgIHJldHVybiAkKFtdKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkKFtdKTsKICAgIH0KCiAgICBmdW5jdGlvbiBwcmV2QWxsKHNlbGVjdG9yKSB7CiAgICAgICAgY29uc3QgcHJldkVscyA9IFtdOwogICAgICAgIGxldCBlbCA9IHRoaXNbMF07CiAgICAgICAgaWYgKCFlbCkgcmV0dXJuICQoW10pOwoKICAgICAgICB3aGlsZSAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykgewogICAgICAgICAgICBjb25zdCBwcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7CiAgICAgICAgICAgICAgICBpZiAoJChwcmV2KS5pcyhzZWxlY3RvcikpIHByZXZFbHMucHVzaChwcmV2KTsKICAgICAgICAgICAgfSBlbHNlIHByZXZFbHMucHVzaChwcmV2KTsKCiAgICAgICAgICAgIGVsID0gcHJldjsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkKHByZXZFbHMpOwogICAgfQoKICAgIGZ1bmN0aW9uIHBhcmVudChzZWxlY3RvcikgewogICAgICAgIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCQodGhpc1tpXS5wYXJlbnROb2RlKS5pcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICQocGFyZW50cyk7CiAgICB9CgogICAgZnVuY3Rpb24gcGFyZW50cyhzZWxlY3RvcikgewogICAgICAgIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgbGV0IHBhcmVudCA9IHRoaXNbaV0ucGFyZW50Tm9kZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICAgICAgd2hpbGUgKHBhcmVudCkgewogICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCQocGFyZW50KS5pcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaChwYXJlbnQpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICQocGFyZW50cyk7CiAgICB9CgogICAgZnVuY3Rpb24gY2xvc2VzdChzZWxlY3RvcikgewogICAgICAgIGxldCBjbG9zZXN0ID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICByZXR1cm4gJChbXSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIWNsb3Nlc3QuaXMoc2VsZWN0b3IpKSB7CiAgICAgICAgICAgIGNsb3Nlc3QgPSBjbG9zZXN0LnBhcmVudHMoc2VsZWN0b3IpLmVxKDApOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGNsb3Nlc3Q7CiAgICB9CgogICAgZnVuY3Rpb24gZmluZChzZWxlY3RvcikgewogICAgICAgIGNvbnN0IGZvdW5kRWxlbWVudHMgPSBbXTsKCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIGNvbnN0IGZvdW5kID0gdGhpc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsKCiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZm91bmQubGVuZ3RoOyBqICs9IDEpIHsKICAgICAgICAgICAgICAgIGZvdW5kRWxlbWVudHMucHVzaChmb3VuZFtqXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiAkKGZvdW5kRWxlbWVudHMpOwogICAgfQoKICAgIGZ1bmN0aW9uIGNoaWxkcmVuKHNlbGVjdG9yKSB7CiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IHRoaXNbaV0uY2hpbGRyZW47CgogICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHsKICAgICAgICAgICAgICAgIGlmICghc2VsZWN0b3IgfHwgJChjaGlsZE5vZGVzW2pdKS5pcyhzZWxlY3RvcikpIHsKICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkTm9kZXNbal0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJChjaGlsZHJlbik7CiAgICB9CgogICAgZnVuY3Rpb24gcmVtb3ZlKCkgewogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlKSB0aGlzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpc1tpXSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KCiAgICBjb25zdCBNZXRob2RzID0gewogICAgICAgIGFkZENsYXNzLAogICAgICAgIHJlbW92ZUNsYXNzLAogICAgICAgIGhhc0NsYXNzLAogICAgICAgIHRvZ2dsZUNsYXNzLAogICAgICAgIGF0dHIsCiAgICAgICAgcmVtb3ZlQXR0ciwKICAgICAgICB0cmFuc2Zvcm0sCiAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbiQxLAogICAgICAgIG9uLAogICAgICAgIG9mZiwKICAgICAgICB0cmlnZ2VyLAogICAgICAgIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQkMSwKICAgICAgICBvdXRlcldpZHRoLAogICAgICAgIG91dGVySGVpZ2h0LAogICAgICAgIHN0eWxlcywKICAgICAgICBvZmZzZXQsCiAgICAgICAgY3NzLAogICAgICAgIGVhY2gsCiAgICAgICAgaHRtbCwKICAgICAgICB0ZXh0LAogICAgICAgIGlzLAogICAgICAgIGluZGV4LAogICAgICAgIGVxLAogICAgICAgIGFwcGVuZCwKICAgICAgICBwcmVwZW5kLAogICAgICAgIG5leHQsCiAgICAgICAgbmV4dEFsbCwKICAgICAgICBwcmV2LAogICAgICAgIHByZXZBbGwsCiAgICAgICAgcGFyZW50LAogICAgICAgIHBhcmVudHMsCiAgICAgICAgY2xvc2VzdCwKICAgICAgICBmaW5kLAogICAgICAgIGNoaWxkcmVuLAogICAgICAgIGZpbHRlciwKICAgICAgICByZW1vdmUKICAgIH07CiAgICBPYmplY3Qua2V5cyhNZXRob2RzKS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4gewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSgkLmZuLCBtZXRob2ROYW1lLCB7CiAgICAgICAgICAgIHZhbHVlOiBNZXRob2RzW21ldGhvZE5hbWVdLAogICAgICAgICAgICB3cml0YWJsZTogdHJ1ZQogICAgICAgIH0pOwogICAgfSk7CgogICAgZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqKSB7CiAgICAgICAgY29uc3Qgb2JqZWN0ID0gb2JqOwogICAgICAgIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChrZXkgPT4gewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBudWxsOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7Ly8gbm8gZ2V0dGVyIGZvciBvYmplY3QKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgey8vIHNvbWV0aGluZyBnb3Qgd3JvbmcKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIG5leHRUaWNrKGNhbGxiYWNrLCBkZWxheSkgewogICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIGRlbGF5ID0gMDsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7CiAgICB9CgogICAgZnVuY3Rpb24gbm93KCkgewogICAgICAgIHJldHVybiBEYXRlLm5vdygpOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUkMShlbCkgewogICAgICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpOwogICAgICAgIGxldCBzdHlsZTsKCiAgICAgICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7CiAgICAgICAgICAgIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFzdHlsZSAmJiBlbC5jdXJyZW50U3R5bGUpIHsKICAgICAgICAgICAgc3R5bGUgPSBlbC5jdXJyZW50U3R5bGU7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXN0eWxlKSB7CiAgICAgICAgICAgIHN0eWxlID0gZWwuc3R5bGU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc3R5bGU7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsLCBheGlzKSB7CiAgICAgICAgaWYgKGF4aXMgPT09IHZvaWQgMCkgewogICAgICAgICAgICBheGlzID0gJ3gnOwogICAgICAgIH0KCiAgICAgICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7CiAgICAgICAgbGV0IG1hdHJpeDsKICAgICAgICBsZXQgY3VyVHJhbnNmb3JtOwogICAgICAgIGxldCB0cmFuc2Zvcm1NYXRyaXg7CiAgICAgICAgY29uc3QgY3VyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlJDEoZWwpOwoKICAgICAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgewogICAgICAgICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtOwoKICAgICAgICAgICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHsKICAgICAgICAgICAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoYSA9PiBhLnJlcGxhY2UoJywnLCAnLicpKS5qb2luKCcsICcpOwogICAgICAgICAgICB9IC8vIFNvbWUgb2xkIHZlcnNpb25zIG9mIFdlYmtpdCBjaG9rZSB3aGVuICdub25lJyBpcyBwYXNzZWQ7IHBhc3MKICAgICAgICAgICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlCgoKICAgICAgICAgICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdHJhbnNmb3JtTWF0cml4ID0gY3VyU3R5bGUuTW96VHJhbnNmb3JtIHx8IGN1clN0eWxlLk9UcmFuc2Zvcm0gfHwgY3VyU3R5bGUuTXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUubXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoJ3RyYW5zbGF0ZSgnLCAnbWF0cml4KDEsIDAsIDAsIDEsJyk7CiAgICAgICAgICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7CiAgICAgICAgfQoKICAgICAgICBpZiAoYXhpcyA9PT0gJ3gnKSB7CiAgICAgICAgICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4CiAgICAgICAgICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQxOyAvLyBDcmF6eSBJRTEwIE1hdHJpeAogICAgICAgICAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTsgLy8gTm9ybWFsIEJyb3dzZXJzCiAgICAgICAgICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKGF4aXMgPT09ICd5JykgewogICAgICAgICAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeAogICAgICAgICAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjsgLy8gQ3JhenkgSUUxMCBNYXRyaXgKICAgICAgICAgICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7IC8vIE5vcm1hbCBCcm93c2VycwogICAgICAgICAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzVdKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBjdXJUcmFuc2Zvcm0gfHwgMDsKICAgIH0KCiAgICBmdW5jdGlvbiBpc09iamVjdChvKSB7CiAgICAgICAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCc7CiAgICB9CgogICAgZnVuY3Rpb24gaXNOb2RlKG5vZGUpIHsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5IVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDsKICAgICAgICB9CgogICAgICAgIHJldHVybiBub2RlICYmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDExKTsKICAgIH0KCiAgICBmdW5jdGlvbiBleHRlbmQoKSB7CiAgICAgICAgY29uc3QgdG8gPSBPYmplY3QoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTsKICAgICAgICBjb25zdCBub0V4dGVuZCA9IFsnX19wcm90b19fJywgJ2NvbnN0cnVjdG9yJywgJ3Byb3RvdHlwZSddOwoKICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICBjb25zdCBuZXh0U291cmNlID0gaSA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBpID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2ldOwoKICAgICAgICAgICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsICYmICFpc05vZGUobmV4dFNvdXJjZSkpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSkuZmlsdGVyKGtleSA9PiBub0V4dGVuZC5pbmRleE9mKGtleSkgPCAwKTsKCiAgICAgICAgICAgICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpOwoKICAgICAgICAgICAgICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvW25leHRLZXldID0ge307CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRvOwogICAgfQoKICAgIGZ1bmN0aW9uIHNldENTU1Byb3BlcnR5KGVsLCB2YXJOYW1lLCB2YXJWYWx1ZSkgewogICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KHZhck5hbWUsIHZhclZhbHVlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBhbmltYXRlQ1NTTW9kZVNjcm9sbChfcmVmKSB7CiAgICAgICAgbGV0IHsKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICB0YXJnZXRQb3NpdGlvbiwKICAgICAgICAgICAgc2lkZQogICAgICAgIH0gPSBfcmVmOwogICAgICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpOwogICAgICAgIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSAtc3dpcGVyLnRyYW5zbGF0ZTsKICAgICAgICBsZXQgc3RhcnRUaW1lID0gbnVsbDsKICAgICAgICBsZXQgdGltZTsKICAgICAgICBjb25zdCBkdXJhdGlvbiA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7CiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJzsKICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoc3dpcGVyLmNzc01vZGVGcmFtZUlEKTsKICAgICAgICBjb25zdCBkaXIgPSB0YXJnZXRQb3NpdGlvbiA+IHN0YXJ0UG9zaXRpb24gPyAnbmV4dCcgOiAncHJldic7CgogICAgICAgIGNvbnN0IGlzT3V0T2ZCb3VuZCA9IChjdXJyZW50LCB0YXJnZXQpID0+IHsKICAgICAgICAgICAgcmV0dXJuIGRpciA9PT0gJ25leHQnICYmIGN1cnJlbnQgPj0gdGFyZ2V0IHx8IGRpciA9PT0gJ3ByZXYnICYmIGN1cnJlbnQgPD0gdGFyZ2V0OwogICAgICAgIH07CgogICAgICAgIGNvbnN0IGFuaW1hdGUgPSAoKSA9PiB7CiAgICAgICAgICAgIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKCiAgICAgICAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHN0YXJ0VGltZSA9IHRpbWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTsKICAgICAgICAgICAgY29uc3QgZWFzZVByb2dyZXNzID0gMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7CiAgICAgICAgICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZWFzZVByb2dyZXNzICogKHRhcmdldFBvc2l0aW9uIC0gc3RhcnRQb3NpdGlvbik7CgogICAgICAgICAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50UG9zaXRpb24gPSB0YXJnZXRQb3NpdGlvbjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zY3JvbGxUbyh7CiAgICAgICAgICAgICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvbgogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChpc091dE9mQm91bmQoY3VycmVudFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikpIHsKICAgICAgICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJzsKICAgICAgICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnJzsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnJzsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHsKICAgICAgICAgICAgICAgICAgICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb24KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN3aXBlci5jc3NNb2RlRnJhbWVJRCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7CiAgICAgICAgfTsKCiAgICAgICAgYW5pbWF0ZSgpOwogICAgfQoKICAgIGxldCBzdXBwb3J0OwoKICAgIGZ1bmN0aW9uIGNhbGNTdXBwb3J0KCkgewogICAgICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpOwogICAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBzbW9vdGhTY3JvbGw6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAnc2Nyb2xsQmVoYXZpb3InIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSwKICAgICAgICAgICAgdG91Y2g6ICEhKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoKSwKICAgICAgICAgICAgcGFzc2l2ZUxpc3RlbmVyOiBmdW5jdGlvbiBjaGVja1Bhc3NpdmVMaXN0ZW5lcigpIHsKICAgICAgICAgICAgICAgIGxldCBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKICAgICAgICAgICAgICAgICAgICAgICAgZ2V0KCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVMaXN0ZW5lcicsIG51bGwsIG9wdHMpOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgey8vIE5vIHN1cHBvcnQKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlOwogICAgICAgICAgICB9KCksCiAgICAgICAgICAgIGdlc3R1cmVzOiBmdW5jdGlvbiBjaGVja0dlc3R1cmVzKCkgewogICAgICAgICAgICAgICAgcmV0dXJuICdvbmdlc3R1cmVzdGFydCcgaW4gd2luZG93OwogICAgICAgICAgICB9KCkKICAgICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7CiAgICAgICAgaWYgKCFzdXBwb3J0KSB7CiAgICAgICAgICAgIHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHN1cHBvcnQ7CiAgICB9CgogICAgbGV0IGRldmljZUNhY2hlZDsKCiAgICBmdW5jdGlvbiBjYWxjRGV2aWNlKF90ZW1wKSB7CiAgICAgICAgbGV0IHsKICAgICAgICAgICAgdXNlckFnZW50CiAgICAgICAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wOwogICAgICAgIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0KCk7CiAgICAgICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7CiAgICAgICAgY29uc3QgcGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtOwogICAgICAgIGNvbnN0IHVhID0gdXNlckFnZW50IHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50OwogICAgICAgIGNvbnN0IGRldmljZSA9IHsKICAgICAgICAgICAgaW9zOiBmYWxzZSwKICAgICAgICAgICAgYW5kcm9pZDogZmFsc2UKICAgICAgICB9OwogICAgICAgIGNvbnN0IHNjcmVlbldpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aDsKICAgICAgICBjb25zdCBzY3JlZW5IZWlnaHQgPSB3aW5kb3cuc2NyZWVuLmhlaWdodDsKICAgICAgICBjb25zdCBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xzXC9dKyhbXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCgogICAgICAgIGxldCBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NccyhbXGRfXSspLyk7CiAgICAgICAgY29uc3QgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xzKFtcZF9dKykpPy8pOwogICAgICAgIGNvbnN0IGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXHNPU3xpT1MpXHMoW1xkX10rKS8pOwogICAgICAgIGNvbnN0IHdpbmRvd3MgPSBwbGF0Zm9ybSA9PT0gJ1dpbjMyJzsKICAgICAgICBsZXQgbWFjb3MgPSBwbGF0Zm9ybSA9PT0gJ01hY0ludGVsJzsgLy8gaVBhZE9zIDEzIGZpeAoKICAgICAgICBjb25zdCBpUGFkU2NyZWVucyA9IFsnMTAyNHgxMzY2JywgJzEzNjZ4MTAyNCcsICc4MzR4MTE5NCcsICcxMTk0eDgzNCcsICc4MzR4MTExMicsICcxMTEyeDgzNCcsICc3Njh4MTAyNCcsICcxMDI0eDc2OCcsICc4MjB4MTE4MCcsICcxMTgweDgyMCcsICc4MTB4MTA4MCcsICcxMDgweDgxMCddOwoKICAgICAgICBpZiAoIWlwYWQgJiYgbWFjb3MgJiYgc3VwcG9ydC50b3VjaCAmJiBpUGFkU2NyZWVucy5pbmRleE9mKGAke3NjcmVlbldpZHRofXgke3NjcmVlbkhlaWdodH1gKSA+PSAwKSB7CiAgICAgICAgICAgIGlwYWQgPSB1YS5tYXRjaCgvKFZlcnNpb24pXC8oW1xkLl0rKS8pOwogICAgICAgICAgICBpZiAoIWlwYWQpIGlwYWQgPSBbMCwgMSwgJzEzXzBfMCddOwogICAgICAgICAgICBtYWNvcyA9IGZhbHNlOwogICAgICAgIH0gLy8gQW5kcm9pZAoKCiAgICAgICAgaWYgKGFuZHJvaWQgJiYgIXdpbmRvd3MpIHsKICAgICAgICAgICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnOwogICAgICAgICAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkgewogICAgICAgICAgICBkZXZpY2Uub3MgPSAnaW9zJzsKICAgICAgICAgICAgZGV2aWNlLmlvcyA9IHRydWU7CiAgICAgICAgfSAvLyBFeHBvcnQgb2JqZWN0CgoKICAgICAgICByZXR1cm4gZGV2aWNlOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldERldmljZShvdmVycmlkZXMpIHsKICAgICAgICBpZiAob3ZlcnJpZGVzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgb3ZlcnJpZGVzID0ge307CiAgICAgICAgfQoKICAgICAgICBpZiAoIWRldmljZUNhY2hlZCkgewogICAgICAgICAgICBkZXZpY2VDYWNoZWQgPSBjYWxjRGV2aWNlKG92ZXJyaWRlcyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gZGV2aWNlQ2FjaGVkOwogICAgfQoKICAgIGxldCBicm93c2VyOwoKICAgIGZ1bmN0aW9uIGNhbGNCcm93c2VyKCkgewogICAgICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpOwoKICAgICAgICBmdW5jdGlvbiBpc1NhZmFyaSgpIHsKICAgICAgICAgICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICByZXR1cm4gdWEuaW5kZXhPZignc2FmYXJpJykgPj0gMCAmJiB1YS5pbmRleE9mKCdjaHJvbWUnKSA8IDAgJiYgdWEuaW5kZXhPZignYW5kcm9pZCcpIDwgMDsKICAgICAgICB9CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGlzU2FmYXJpOiBpc1NhZmFyaSgpLAogICAgICAgICAgICBpc1dlYlZpZXc6IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkKICAgICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7CiAgICAgICAgaWYgKCFicm93c2VyKSB7CiAgICAgICAgICAgIGJyb3dzZXIgPSBjYWxjQnJvd3NlcigpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGJyb3dzZXI7CiAgICB9CgogICAgZnVuY3Rpb24gUmVzaXplKF9yZWYpIHsKICAgICAgICBsZXQgewogICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgIG9uLAogICAgICAgICAgICBlbWl0CiAgICAgICAgfSA9IF9yZWY7CiAgICAgICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7CiAgICAgICAgbGV0IG9ic2VydmVyID0gbnVsbDsKICAgICAgICBsZXQgYW5pbWF0aW9uRnJhbWUgPSBudWxsOwoKICAgICAgICBjb25zdCByZXNpemVIYW5kbGVyID0gKCkgPT4gewogICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjsKICAgICAgICAgICAgZW1pdCgnYmVmb3JlUmVzaXplJyk7CiAgICAgICAgICAgIGVtaXQoJ3Jlc2l6ZScpOwogICAgICAgIH07CgogICAgICAgIGNvbnN0IGNyZWF0ZU9ic2VydmVyID0gKCkgPT4gewogICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjsKICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7CiAgICAgICAgICAgICAgICBhbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodAogICAgICAgICAgICAgICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1dpZHRoID0gd2lkdGg7CiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld0hlaWdodCA9IGhlaWdodDsKICAgICAgICAgICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goX3JlZjIgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBsZXQgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEJveFNpemUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50UmVjdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldAogICAgICAgICAgICAgICAgICAgICAgICB9ID0gX3JlZjI7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBzd2lwZXIuZWwpIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgbmV3V2lkdGggPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LndpZHRoIDogKGNvbnRlbnRCb3hTaXplWzBdIHx8IGNvbnRlbnRCb3hTaXplKS5pbmxpbmVTaXplOwogICAgICAgICAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LmhlaWdodCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuYmxvY2tTaXplOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICBpZiAobmV3V2lkdGggIT09IHdpZHRoIHx8IG5ld0hlaWdodCAhPT0gaGVpZ2h0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2l6ZUhhbmRsZXIoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoc3dpcGVyLmVsKTsKICAgICAgICB9OwoKICAgICAgICBjb25zdCByZW1vdmVPYnNlcnZlciA9ICgpID0+IHsKICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAob2JzZXJ2ZXIgJiYgb2JzZXJ2ZXIudW5vYnNlcnZlICYmIHN3aXBlci5lbCkgewogICAgICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHN3aXBlci5lbCk7CiAgICAgICAgICAgICAgICBvYnNlcnZlciA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBjb25zdCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIgPSAoKSA9PiB7CiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuOwogICAgICAgICAgICBlbWl0KCdvcmllbnRhdGlvbmNoYW5nZScpOwogICAgICAgIH07CgogICAgICAgIG9uKCdpbml0JywgKCkgPT4gewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5yZXNpemVPYnNlcnZlciAmJiB0eXBlb2Ygd2luZG93LlJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgY3JlYXRlT2JzZXJ2ZXIoKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpOwogICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpOwogICAgICAgIH0pOwogICAgICAgIG9uKCdkZXN0cm95JywgKCkgPT4gewogICAgICAgICAgICByZW1vdmVPYnNlcnZlcigpOwogICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7CiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gT2JzZXJ2ZXIoX3JlZikgewogICAgICAgIGxldCB7CiAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgZXh0ZW5kUGFyYW1zLAogICAgICAgICAgICBvbiwKICAgICAgICAgICAgZW1pdAogICAgICAgIH0gPSBfcmVmOwogICAgICAgIGNvbnN0IG9ic2VydmVycyA9IFtdOwogICAgICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpOwoKICAgICAgICBjb25zdCBhdHRhY2ggPSBmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7CiAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgT2JzZXJ2ZXJGdW5jID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYmtpdE11dGF0aW9uT2JzZXJ2ZXI7CiAgICAgICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyRnVuYyhtdXRhdGlvbnMgPT4gewogICAgICAgICAgICAgICAgLy8gVGhlIG9ic2VydmVyVXBkYXRlIGV2ZW50IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZAogICAgICAgICAgICAgICAgLy8gb25jZSBkZXNwaXRlIHRoZSBudW1iZXIgb2YgbXV0YXRpb25zLiAgQWRkaXRpb25hbAogICAgICAgICAgICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5CiAgICAgICAgICAgICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgIGVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHsKICAgICAgICAgICAgICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShvYnNlcnZlclVwZGF0ZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KG9ic2VydmVyVXBkYXRlLCAwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7CiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsCiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsCiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGEKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIG9ic2VydmVycy5wdXNoKG9ic2VydmVyKTsKICAgICAgICB9OwoKICAgICAgICBjb25zdCBpbml0ID0gKCkgPT4gewogICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7CiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXJQYXJlbnRzID0gc3dpcGVyLiRlbC5wYXJlbnRzKCk7CgogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250YWluZXJQYXJlbnRzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgYXR0YWNoKGNvbnRhaW5lclBhcmVudHNbaV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IC8vIE9ic2VydmUgY29udGFpbmVyCgoKICAgICAgICAgICAgYXR0YWNoKHN3aXBlci4kZWxbMF0sIHsKICAgICAgICAgICAgICAgIGNoaWxkTGlzdDogc3dpcGVyLnBhcmFtcy5vYnNlcnZlU2xpZGVDaGlsZHJlbgogICAgICAgICAgICB9KTsgLy8gT2JzZXJ2ZSB3cmFwcGVyCgogICAgICAgICAgICBhdHRhY2goc3dpcGVyLiR3cmFwcGVyRWxbMF0sIHsKICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGZhbHNlCiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7CiAgICAgICAgICAgIG9ic2VydmVycy5mb3JFYWNoKG9ic2VydmVyID0+IHsKICAgICAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2UoMCwgb2JzZXJ2ZXJzLmxlbmd0aCk7CiAgICAgICAgfTsKCiAgICAgICAgZXh0ZW5kUGFyYW1zKHsKICAgICAgICAgICAgb2JzZXJ2ZXI6IGZhbHNlLAogICAgICAgICAgICBvYnNlcnZlUGFyZW50czogZmFsc2UsCiAgICAgICAgICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZQogICAgICAgIH0pOwogICAgICAgIG9uKCdpbml0JywgaW5pdCk7CiAgICAgICAgb24oJ2Rlc3Ryb3knLCBkZXN0cm95KTsKICAgIH0KCiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqLwogICAgdmFyIGV2ZW50c0VtaXR0ZXIgPSB7CiAgICAgICAgb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkgewogICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpczsKICAgICAgICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7CiAgICAgICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7CiAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnOwogICAgICAgICAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGV2ZW50ID0+IHsKICAgICAgICAgICAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTsKICAgICAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XVttZXRob2RdKGhhbmRsZXIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgfSwKCiAgICAgICAgb25jZShldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7CiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzOwogICAgICAgICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjsKICAgICAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjsKCiAgICAgICAgICAgIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKCkgewogICAgICAgICAgICAgICAgc2VsZi5vZmYoZXZlbnRzLCBvbmNlSGFuZGxlcik7CgogICAgICAgICAgICAgICAgaWYgKG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5KSB7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICAgICAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkgPSBoYW5kbGVyOwogICAgICAgICAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7CiAgICAgICAgfSwKCiAgICAgICAgb25BbnkoaGFuZGxlciwgcHJpb3JpdHkpIHsKICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7CiAgICAgICAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmOwogICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmOwogICAgICAgICAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJzsKCiAgICAgICAgICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpIDwgMCkgewogICAgICAgICAgICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnNbbWV0aG9kXShoYW5kbGVyKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgfSwKCiAgICAgICAgb2ZmQW55KGhhbmRsZXIpIHsKICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7CiAgICAgICAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmOwogICAgICAgICAgICBpZiAoIXNlbGYuZXZlbnRzQW55TGlzdGVuZXJzKSByZXR1cm4gc2VsZjsKICAgICAgICAgICAgY29uc3QgaW5kZXggPSBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpOwoKICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHsKICAgICAgICAgICAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIH0sCgogICAgICAgIG9mZihldmVudHMsIGhhbmRsZXIpIHsKICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7CiAgICAgICAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmOwogICAgICAgICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjsKICAgICAgICAgICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgewogICAgICAgICAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIsIGluZGV4KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudEhhbmRsZXIgPT09IGhhbmRsZXIgfHwgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ICYmIGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9PT0gaGFuZGxlcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBzZWxmOwogICAgICAgIH0sCgogICAgICAgIGVtaXQoKSB7CiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzOwogICAgICAgICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjsKICAgICAgICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7CiAgICAgICAgICAgIGxldCBldmVudHM7CiAgICAgICAgICAgIGxldCBkYXRhOwogICAgICAgICAgICBsZXQgY29udGV4dDsKCiAgICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykgewogICAgICAgICAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHsKICAgICAgICAgICAgICAgIGV2ZW50cyA9IGFyZ3NbMF07CiAgICAgICAgICAgICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7CiAgICAgICAgICAgICAgICBjb250ZXh0ID0gc2VsZjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGV2ZW50cyA9IGFyZ3NbMF0uZXZlbnRzOwogICAgICAgICAgICAgICAgZGF0YSA9IGFyZ3NbMF0uZGF0YTsKICAgICAgICAgICAgICAgIGNvbnRleHQgPSBhcmdzWzBdLmNvbnRleHQgfHwgc2VsZjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZGF0YS51bnNoaWZ0KGNvbnRleHQpOwogICAgICAgICAgICBjb25zdCBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpOwogICAgICAgICAgICBldmVudHNBcnJheS5mb3JFYWNoKGV2ZW50ID0+IHsKICAgICAgICAgICAgICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBbZXZlbnQsIC4uLmRhdGFdKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIHNlbGY7CiAgICAgICAgfQoKICAgIH07CgogICAgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGxldCB3aWR0aDsKICAgICAgICBsZXQgaGVpZ2h0OwogICAgICAgIGNvbnN0ICRlbCA9IHN3aXBlci4kZWw7CgogICAgICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gbnVsbCkgewogICAgICAgICAgICB3aWR0aCA9IHN3aXBlci5wYXJhbXMud2lkdGg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgd2lkdGggPSAkZWxbMF0uY2xpZW50V2lkdGg7CiAgICAgICAgfQoKICAgICAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gbnVsbCkgewogICAgICAgICAgICBoZWlnaHQgPSBzd2lwZXIucGFyYW1zLmhlaWdodDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBoZWlnaHQgPSAkZWxbMF0uY2xpZW50SGVpZ2h0OwogICAgICAgIH0KCiAgICAgICAgaWYgKHdpZHRoID09PSAwICYmIHN3aXBlci5pc0hvcml6b250YWwoKSB8fCBoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfSAvLyBTdWJ0cmFjdCBwYWRkaW5ncwoKCiAgICAgICAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctbGVmdCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7CiAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy10b3AnKSB8fCAwLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpIHx8IDAsIDEwKTsKICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwOwogICAgICAgIGlmIChOdW1iZXIuaXNOYU4oaGVpZ2h0KSkgaGVpZ2h0ID0gMDsKICAgICAgICBPYmplY3QuYXNzaWduKHN3aXBlciwgewogICAgICAgICAgICB3aWR0aCwKICAgICAgICAgICAgaGVpZ2h0LAogICAgICAgICAgICBzaXplOiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB3aWR0aCA6IGhlaWdodAogICAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwoKICAgICAgICBmdW5jdGlvbiBnZXREaXJlY3Rpb25MYWJlbChwcm9wZXJ0eSkgewogICAgICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHk7CiAgICAgICAgICAgIH0gLy8gcHJldHRpZXItaWdub3JlCgoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICd3aWR0aCc6ICdoZWlnaHQnLAogICAgICAgICAgICAgICAgJ21hcmdpbi10b3AnOiAnbWFyZ2luLWxlZnQnLAogICAgICAgICAgICAgICAgJ21hcmdpbi1ib3R0b20gJzogJ21hcmdpbi1yaWdodCcsCiAgICAgICAgICAgICAgICAnbWFyZ2luLWxlZnQnOiAnbWFyZ2luLXRvcCcsCiAgICAgICAgICAgICAgICAnbWFyZ2luLXJpZ2h0JzogJ21hcmdpbi1ib3R0b20nLAogICAgICAgICAgICAgICAgJ3BhZGRpbmctbGVmdCc6ICdwYWRkaW5nLXRvcCcsCiAgICAgICAgICAgICAgICAncGFkZGluZy1yaWdodCc6ICdwYWRkaW5nLWJvdHRvbScsCiAgICAgICAgICAgICAgICAnbWFyZ2luUmlnaHQnOiAnbWFyZ2luQm90dG9tJwogICAgICAgICAgICB9W3Byb3BlcnR5XTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUobm9kZSwgbGFiZWwpIHsKICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobm9kZS5nZXRQcm9wZXJ0eVZhbHVlKGdldERpcmVjdGlvbkxhYmVsKGxhYmVsKSkgfHwgMCk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgJHdyYXBwZXJFbCwKICAgICAgICAgICAgc2l6ZTogc3dpcGVyU2l6ZSwKICAgICAgICAgICAgcnRsVHJhbnNsYXRlOiBydGwsCiAgICAgICAgICAgIHdyb25nUlRMCiAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkOwogICAgICAgIGNvbnN0IHByZXZpb3VzU2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoOwogICAgICAgIGNvbnN0IHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKTsKICAgICAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc2xpZGVzLmxlbmd0aDsKICAgICAgICBsZXQgc25hcEdyaWQgPSBbXTsKICAgICAgICBjb25zdCBzbGlkZXNHcmlkID0gW107CiAgICAgICAgY29uc3Qgc2xpZGVzU2l6ZXNHcmlkID0gW107CiAgICAgICAgbGV0IG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7CgogICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0QmVmb3JlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUuY2FsbChzd2lwZXIpOwogICAgICAgIH0KCiAgICAgICAgbGV0IG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyOwoKICAgICAgICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyLmNhbGwoc3dpcGVyKTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHByZXZpb3VzU25hcEdyaWRMZW5ndGggPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoOwogICAgICAgIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aDsKICAgICAgICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjsKICAgICAgICBsZXQgc2xpZGVQb3NpdGlvbiA9IC1vZmZzZXRCZWZvcmU7CiAgICAgICAgbGV0IHByZXZTbGlkZVNpemUgPSAwOwogICAgICAgIGxldCBpbmRleCA9IDA7CgogICAgICAgIGlmICh0eXBlb2Ygc3dpcGVyU2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkgewogICAgICAgICAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlclNpemU7CiAgICAgICAgfQoKICAgICAgICBzd2lwZXIudmlydHVhbFNpemUgPSAtc3BhY2VCZXR3ZWVuOyAvLyByZXNldCBtYXJnaW5zCgogICAgICAgIGlmIChydGwpIHNsaWRlcy5jc3MoewogICAgICAgICAgICBtYXJnaW5MZWZ0OiAnJywKICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAnJywKICAgICAgICAgICAgbWFyZ2luVG9wOiAnJwogICAgICAgIH0pOyBlbHNlIHNsaWRlcy5jc3MoewogICAgICAgICAgICBtYXJnaW5SaWdodDogJycsCiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogJycsCiAgICAgICAgICAgIG1hcmdpblRvcDogJycKICAgICAgICB9KTsgLy8gcmVzZXQgY3NzTW9kZSBvZmZzZXRzCgogICAgICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUpIHsKICAgICAgICAgICAgc2V0Q1NTUHJvcGVydHkoc3dpcGVyLndyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmUnLCAnJyk7CiAgICAgICAgICAgIHNldENTU1Byb3BlcnR5KHN3aXBlci53cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXInLCAnJyk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBncmlkRW5hYmxlZCA9IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHN3aXBlci5ncmlkOwoKICAgICAgICBpZiAoZ3JpZEVuYWJsZWQpIHsKICAgICAgICAgICAgc3dpcGVyLmdyaWQuaW5pdFNsaWRlcyhzbGlkZXNMZW5ndGgpOwogICAgICAgIH0gLy8gQ2FsYyBzbGlkZXMKCgogICAgICAgIGxldCBzbGlkZVNpemU7CiAgICAgICAgY29uc3Qgc2hvdWxkUmVzZXRTbGlkZVNpemUgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5icmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhwYXJhbXMuYnJlYWtwb2ludHMpLmZpbHRlcihrZXkgPT4gewogICAgICAgICAgICByZXR1cm4gdHlwZW9mIHBhcmFtcy5icmVha3BvaW50c1trZXldLnNsaWRlc1BlclZpZXcgIT09ICd1bmRlZmluZWQnOwogICAgICAgIH0pLmxlbmd0aCA+IDA7CgogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgc2xpZGVTaXplID0gMDsKICAgICAgICAgICAgY29uc3Qgc2xpZGUgPSBzbGlkZXMuZXEoaSk7CgogICAgICAgICAgICBpZiAoZ3JpZEVuYWJsZWQpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5ncmlkLnVwZGF0ZVNsaWRlKGksIHNsaWRlLCBzbGlkZXNMZW5ndGgsIGdldERpcmVjdGlvbkxhYmVsKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHNsaWRlLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCgogICAgICAgICAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykgewogICAgICAgICAgICAgICAgaWYgKHNob3VsZFJlc2V0U2xpZGVTaXplKSB7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVzW2ldLnN0eWxlW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGBgOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlU3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZVswXSk7CiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtOwogICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFdlYktpdFRyYW5zZm9ybSA9IHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybTsKCiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkgewogICAgICAgICAgICAgICAgICAgIHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkgewogICAgICAgICAgICAgICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJzsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3RocykgewogICAgICAgICAgICAgICAgICAgIHNsaWRlU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlLm91dGVyV2lkdGgodHJ1ZSkgOiBzbGlkZS5vdXRlckhlaWdodCh0cnVlKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnd2lkdGgnKTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWRkaW5nTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLWxlZnQnKTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWRkaW5nUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1yaWdodCcpOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLWxlZnQnKTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJnaW5SaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tcmlnaHQnKTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7CgogICAgICAgICAgICAgICAgICAgIGlmIChib3hTaXppbmcgJiYgYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50V2lkdGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRXaWR0aAogICAgICAgICAgICAgICAgICAgICAgICB9ID0gc2xpZGVbMF07CiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgcGFkZGluZ0xlZnQgKyBwYWRkaW5nUmlnaHQgKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQgKyAob2Zmc2V0V2lkdGggLSBjbGllbnRXaWR0aCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtID0gY3VycmVudFRyYW5zZm9ybTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkgewogICAgICAgICAgICAgICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNsaWRlU2l6ZSA9IChzd2lwZXJTaXplIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3IC0gMSkgKiBzcGFjZUJldHdlZW4pIC8gcGFyYW1zLnNsaWRlc1BlclZpZXc7CiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpOwoKICAgICAgICAgICAgICAgIGlmIChzbGlkZXNbaV0pIHsKICAgICAgICAgICAgICAgICAgICBzbGlkZXNbaV0uc3R5bGVbZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c2xpZGVTaXplfXB4YDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHNsaWRlc1tpXSkgewogICAgICAgICAgICAgICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2xpZGVzU2l6ZXNHcmlkLnB1c2goc2xpZGVTaXplKTsKCiAgICAgICAgICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHsKICAgICAgICAgICAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplIC8gMiArIHByZXZTbGlkZVNpemUgLyAyICsgc3BhY2VCZXR3ZWVuOwogICAgICAgICAgICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjsKICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuOwogICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHNsaWRlUG9zaXRpb24pIDwgMSAvIDEwMDApIHNsaWRlUG9zaXRpb24gPSAwOwogICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pOwogICAgICAgICAgICAgICAgaWYgKGluZGV4ICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pOwogICAgICAgICAgICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pOwogICAgICAgICAgICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTsKICAgICAgICAgICAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTsKICAgICAgICAgICAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuOwogICAgICAgICAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplOwogICAgICAgICAgICBpbmRleCArPSAxOwogICAgICAgIH0KCiAgICAgICAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyOwoKICAgICAgICBpZiAocnRsICYmIHdyb25nUlRMICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkgewogICAgICAgICAgICAkd3JhcHBlckVsLmNzcyh7CiAgICAgICAgICAgICAgICB3aWR0aDogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGAKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7CiAgICAgICAgICAgICR3cmFwcGVyRWwuY3NzKHsKICAgICAgICAgICAgICAgIFtnZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV06IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKGdyaWRFbmFibGVkKSB7CiAgICAgICAgICAgIHN3aXBlci5ncmlkLnVwZGF0ZVdyYXBwZXJTaXplKHNsaWRlU2l6ZSwgc25hcEdyaWQsIGdldERpcmVjdGlvbkxhYmVsKTsKICAgICAgICB9IC8vIFJlbW92ZSBsYXN0IGdyaWQgZWxlbWVudHMgZGVwZW5kaW5nIG9uIHdpZHRoCgoKICAgICAgICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykgewogICAgICAgICAgICBjb25zdCBuZXdTbGlkZXNHcmlkID0gW107CgogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTsKICAgICAgICAgICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pOwoKICAgICAgICAgICAgICAgIGlmIChzbmFwR3JpZFtpXSA8PSBzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSB7CiAgICAgICAgICAgICAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkOwoKICAgICAgICAgICAgaWYgKE1hdGguZmxvb3Ioc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkgLSBNYXRoLmZsb29yKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdKSA+IDEpIHsKICAgICAgICAgICAgICAgIHNuYXBHcmlkLnB1c2goc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdOwoKICAgICAgICBpZiAocGFyYW1zLnNwYWNlQmV0d2VlbiAhPT0gMCkgewogICAgICAgICAgICBjb25zdCBrZXkgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgcnRsID8gJ21hcmdpbkxlZnQnIDogZ2V0RGlyZWN0aW9uTGFiZWwoJ21hcmdpblJpZ2h0Jyk7CiAgICAgICAgICAgIHNsaWRlcy5maWx0ZXIoKF8sIHNsaWRlSW5kZXgpID0+IHsKICAgICAgICAgICAgICAgIGlmICghcGFyYW1zLmNzc01vZGUpIHJldHVybiB0cnVlOwoKICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ID09PSBzbGlkZXMubGVuZ3RoIC0gMSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSkuY3NzKHsKICAgICAgICAgICAgICAgIFtrZXldOiBgJHtzcGFjZUJldHdlZW59cHhgCiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHsKICAgICAgICAgICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwOwogICAgICAgICAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChzbGlkZVNpemVWYWx1ZSA9PiB7CiAgICAgICAgICAgICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHBhcmFtcy5zcGFjZUJldHdlZW4gPyBwYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47CiAgICAgICAgICAgIGNvbnN0IG1heFNuYXAgPSBhbGxTbGlkZXNTaXplIC0gc3dpcGVyU2l6ZTsKICAgICAgICAgICAgc25hcEdyaWQgPSBzbmFwR3JpZC5tYXAoc25hcCA9PiB7CiAgICAgICAgICAgICAgICBpZiAoc25hcCA8IDApIHJldHVybiAtb2Zmc2V0QmVmb3JlOwogICAgICAgICAgICAgICAgaWYgKHNuYXAgPiBtYXhTbmFwKSByZXR1cm4gbWF4U25hcCArIG9mZnNldEFmdGVyOwogICAgICAgICAgICAgICAgcmV0dXJuIHNuYXA7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHsKICAgICAgICAgICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwOwogICAgICAgICAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChzbGlkZVNpemVWYWx1ZSA9PiB7CiAgICAgICAgICAgICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHBhcmFtcy5zcGFjZUJldHdlZW4gPyBwYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47CgogICAgICAgICAgICBpZiAoYWxsU2xpZGVzU2l6ZSA8IHN3aXBlclNpemUpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGFsbFNsaWRlc09mZnNldCA9IChzd2lwZXJTaXplIC0gYWxsU2xpZGVzU2l6ZSkgLyAyOwogICAgICAgICAgICAgICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgc25hcEdyaWRbc25hcEluZGV4XSA9IHNuYXAgLSBhbGxTbGlkZXNPZmZzZXQ7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHNsaWRlc0dyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBPYmplY3QuYXNzaWduKHN3aXBlciwgewogICAgICAgICAgICBzbGlkZXMsCiAgICAgICAgICAgIHNuYXBHcmlkLAogICAgICAgICAgICBzbGlkZXNHcmlkLAogICAgICAgICAgICBzbGlkZXNTaXplc0dyaWQKICAgICAgICB9KTsKCiAgICAgICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7CiAgICAgICAgICAgIHNldENTU1Byb3BlcnR5KHN3aXBlci53cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlJywgYCR7LXNuYXBHcmlkWzBdfXB4YCk7CiAgICAgICAgICAgIHNldENTU1Byb3BlcnR5KHN3aXBlci53cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXInLCBgJHtzd2lwZXIuc2l6ZSAvIDIgLSBzbGlkZXNTaXplc0dyaWRbc2xpZGVzU2l6ZXNHcmlkLmxlbmd0aCAtIDFdIC8gMn1weGApOwogICAgICAgICAgICBjb25zdCBhZGRUb1NuYXBHcmlkID0gLXN3aXBlci5zbmFwR3JpZFswXTsKICAgICAgICAgICAgY29uc3QgYWRkVG9TbGlkZXNHcmlkID0gLXN3aXBlci5zbGlkZXNHcmlkWzBdOwogICAgICAgICAgICBzd2lwZXIuc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQubWFwKHYgPT4gdiArIGFkZFRvU25hcEdyaWQpOwogICAgICAgICAgICBzd2lwZXIuc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkLm1hcCh2ID0+IHYgKyBhZGRUb1NsaWRlc0dyaWQpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHNsaWRlc0xlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNMZW5ndGgpIHsKICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0xlbmd0aENoYW5nZScpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHNuYXBHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbmFwR3JpZExlbmd0aCkgewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSBzd2lwZXIuY2hlY2tPdmVyZmxvdygpOwogICAgICAgICAgICBzd2lwZXIuZW1pdCgnc25hcEdyaWRMZW5ndGhDaGFuZ2UnKTsKICAgICAgICB9CgogICAgICAgIGlmIChzbGlkZXNHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoKSB7CiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7CiAgICAgICAgfQoKICAgICAgICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHsKICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFpc1ZpcnR1YWwgJiYgIXBhcmFtcy5jc3NNb2RlICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdmYWRlJykpIHsKICAgICAgICAgICAgY29uc3QgYmFja0ZhY2VIaWRkZW5DbGFzcyA9IGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWJhY2tmYWNlLWhpZGRlbmA7CiAgICAgICAgICAgIGNvbnN0IGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkID0gc3dpcGVyLiRlbC5oYXNDbGFzcyhiYWNrRmFjZUhpZGRlbkNsYXNzKTsKCiAgICAgICAgICAgIGlmIChzbGlkZXNMZW5ndGggPD0gcGFyYW1zLm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzKSB7CiAgICAgICAgICAgICAgICBpZiAoIWhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSBzd2lwZXIuJGVsLmFkZENsYXNzKGJhY2tGYWNlSGlkZGVuQ2xhc3MpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuJGVsLnJlbW92ZUNsYXNzKGJhY2tGYWNlSGlkZGVuQ2xhc3MpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZUF1dG9IZWlnaHQoc3BlZWQpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGNvbnN0IGFjdGl2ZVNsaWRlcyA9IFtdOwogICAgICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkOwogICAgICAgIGxldCBuZXdIZWlnaHQgPSAwOwogICAgICAgIGxldCBpOwoKICAgICAgICBpZiAodHlwZW9mIHNwZWVkID09PSAnbnVtYmVyJykgewogICAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7CiAgICAgICAgfSBlbHNlIGlmIChzcGVlZCA9PT0gdHJ1ZSkgewogICAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IGdldFNsaWRlQnlJbmRleCA9IGluZGV4ID0+IHsKICAgICAgICAgICAgaWYgKGlzVmlydHVhbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXMuZmlsdGVyKGVsID0+IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApID09PSBpbmRleClbMF07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBzd2lwZXIuc2xpZGVzLmVxKGluZGV4KVswXTsKICAgICAgICB9OyAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlldwoKCiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpIHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHsKICAgICAgICAgICAgICAgIChzd2lwZXIudmlzaWJsZVNsaWRlcyB8fCAkKFtdKSkuZWFjaChzbGlkZSA9PiB7CiAgICAgICAgICAgICAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc2xpZGUpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyk7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4ICsgaTsKICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAmJiAhaXNWaXJ0dWFsKSBicmVhazsKICAgICAgICAgICAgICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoaW5kZXgpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChzd2lwZXIuYWN0aXZlSW5kZXgpKTsKICAgICAgICB9IC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlldwoKCiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlc1tpXSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGFjdGl2ZVNsaWRlc1tpXS5vZmZzZXRIZWlnaHQ7CiAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7CiAgICAgICAgICAgIH0KICAgICAgICB9IC8vIFVwZGF0ZSBIZWlnaHQKCgogICAgICAgIGlmIChuZXdIZWlnaHQgfHwgbmV3SGVpZ2h0ID09PSAwKSBzd2lwZXIuJHdyYXBwZXJFbC5jc3MoJ2hlaWdodCcsIGAke25ld0hlaWdodH1weGApOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc09mZnNldCgpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGNvbnN0IHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7CgogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlc1tpXS5vZmZzZXRMZWZ0IDogc2xpZGVzW2ldLm9mZnNldFRvcDsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gdXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKSB7CiAgICAgICAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHRyYW5zbGF0ZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMDsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtczsKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHNsaWRlcywKICAgICAgICAgICAgcnRsVHJhbnNsYXRlOiBydGwsCiAgICAgICAgICAgIHNuYXBHcmlkCiAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuOwogICAgICAgIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpOwogICAgICAgIGxldCBvZmZzZXRDZW50ZXIgPSAtdHJhbnNsYXRlOwogICAgICAgIGlmIChydGwpIG9mZnNldENlbnRlciA9IHRyYW5zbGF0ZTsgLy8gVmlzaWJsZSBTbGlkZXMKCiAgICAgICAgc2xpZGVzLnJlbW92ZUNsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7CiAgICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107CiAgICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSBbXTsKCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgY29uc3Qgc2xpZGUgPSBzbGlkZXNbaV07CiAgICAgICAgICAgIGxldCBzbGlkZU9mZnNldCA9IHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0OwoKICAgICAgICAgICAgaWYgKHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgewogICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQgLT0gc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0OwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKTsKICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxTbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciAtIHNuYXBHcmlkWzBdICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pOwogICAgICAgICAgICBjb25zdCBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGVPZmZzZXQpOwogICAgICAgICAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldOwogICAgICAgICAgICBjb25zdCBpc1Zpc2libGUgPSBzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDwgc3dpcGVyLnNpemUgLSAxIHx8IHNsaWRlQWZ0ZXIgPiAxICYmIHNsaWRlQWZ0ZXIgPD0gc3dpcGVyLnNpemUgfHwgc2xpZGVCZWZvcmUgPD0gMCAmJiBzbGlkZUFmdGVyID49IHN3aXBlci5zaXplOwoKICAgICAgICAgICAgaWYgKGlzVmlzaWJsZSkgewogICAgICAgICAgICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMucHVzaChzbGlkZSk7CiAgICAgICAgICAgICAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMucHVzaChpKTsKICAgICAgICAgICAgICAgIHNsaWRlcy5lcShpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzbGlkZS5wcm9ncmVzcyA9IHJ0bCA/IC1zbGlkZVByb2dyZXNzIDogc2xpZGVQcm9ncmVzczsKICAgICAgICAgICAgc2xpZGUub3JpZ2luYWxQcm9ncmVzcyA9IHJ0bCA/IC1vcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgOiBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3M7CiAgICAgICAgfQoKICAgICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9ICQoc3dpcGVyLnZpc2libGVTbGlkZXMpOwogICAgfQoKICAgIGZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSkgewogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CgogICAgICAgIGlmICh0eXBlb2YgdHJhbnNsYXRlID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICBjb25zdCBtdWx0aXBsaWVyID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCgogICAgICAgICAgICB0cmFuc2xhdGUgPSBzd2lwZXIgJiYgc3dpcGVyLnRyYW5zbGF0ZSAmJiBzd2lwZXIudHJhbnNsYXRlICogbXVsdGlwbGllciB8fCAwOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtczsKICAgICAgICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTsKICAgICAgICBsZXQgewogICAgICAgICAgICBwcm9ncmVzcywKICAgICAgICAgICAgaXNCZWdpbm5pbmcsCiAgICAgICAgICAgIGlzRW5kCiAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICBjb25zdCB3YXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZzsKICAgICAgICBjb25zdCB3YXNFbmQgPSBpc0VuZDsKCiAgICAgICAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7CiAgICAgICAgICAgIHByb2dyZXNzID0gMDsKICAgICAgICAgICAgaXNCZWdpbm5pbmcgPSB0cnVlOwogICAgICAgICAgICBpc0VuZCA9IHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmOwogICAgICAgICAgICBpc0JlZ2lubmluZyA9IHByb2dyZXNzIDw9IDA7CiAgICAgICAgICAgIGlzRW5kID0gcHJvZ3Jlc3MgPj0gMTsKICAgICAgICB9CgogICAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7CiAgICAgICAgICAgIHByb2dyZXNzLAogICAgICAgICAgICBpc0JlZ2lubmluZywKICAgICAgICAgICAgaXNFbmQKICAgICAgICB9KTsKICAgICAgICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5hdXRvSGVpZ2h0KSBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTsKCiAgICAgICAgaWYgKGlzQmVnaW5uaW5nICYmICF3YXNCZWdpbm5pbmcpIHsKICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3JlYWNoQmVnaW5uaW5nIHRvRWRnZScpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGlzRW5kICYmICF3YXNFbmQpIHsKICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3JlYWNoRW5kIHRvRWRnZScpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHdhc0JlZ2lubmluZyAmJiAhaXNCZWdpbm5pbmcgfHwgd2FzRW5kICYmICFpc0VuZCkgewogICAgICAgICAgICBzd2lwZXIuZW1pdCgnZnJvbUVkZ2UnKTsKICAgICAgICB9CgogICAgICAgIHN3aXBlci5lbWl0KCdwcm9ncmVzcycsIHByb2dyZXNzKTsKICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzKCkgewogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgewogICAgICAgICAgICBzbGlkZXMsCiAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgJHdyYXBwZXJFbCwKICAgICAgICAgICAgYWN0aXZlSW5kZXgsCiAgICAgICAgICAgIHJlYWxJbmRleAogICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDsKICAgICAgICBzbGlkZXMucmVtb3ZlQ2xhc3MoYCR7cGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3N9ICR7cGFyYW1zLnNsaWRlTmV4dENsYXNzfSAke3BhcmFtcy5zbGlkZVByZXZDbGFzc30gJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzc30gJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3N9ICR7cGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzfWApOwogICAgICAgIGxldCBhY3RpdmVTbGlkZTsKCiAgICAgICAgaWYgKGlzVmlydHVhbCkgewogICAgICAgICAgICBhY3RpdmVTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmZpbmQoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD0iJHthY3RpdmVJbmRleH0iXWApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFjdGl2ZVNsaWRlID0gc2xpZGVzLmVxKGFjdGl2ZUluZGV4KTsKICAgICAgICB9IC8vIEFjdGl2ZSBjbGFzc2VzCgoKICAgICAgICBhY3RpdmVTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7CgogICAgICAgIGlmIChwYXJhbXMubG9vcCkgewogICAgICAgICAgICAvLyBEdXBsaWNhdGUgdG8gYWxsIGxvb3BlZCBzbGlkZXMKICAgICAgICAgICAgaWYgKGFjdGl2ZVNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkgewogICAgICAgICAgICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PSIke3JlYWxJbmRleH0iXWApLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD0iJHtyZWFsSW5kZXh9Il1gKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9IC8vIE5leHQgU2xpZGUKCgogICAgICAgIGxldCBuZXh0U2xpZGUgPSBhY3RpdmVTbGlkZS5uZXh0QWxsKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKS5lcSgwKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpOwoKICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgbmV4dFNsaWRlLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICBuZXh0U2xpZGUgPSBzbGlkZXMuZXEoMCk7CiAgICAgICAgICAgIG5leHRTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpOwogICAgICAgIH0gLy8gUHJldiBTbGlkZQoKCiAgICAgICAgbGV0IHByZXZTbGlkZSA9IGFjdGl2ZVNsaWRlLnByZXZBbGwoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApLmVxKDApLmFkZENsYXNzKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7CgogICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiBwcmV2U2xpZGUubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIHByZXZTbGlkZSA9IHNsaWRlcy5lcSgtMSk7CiAgICAgICAgICAgIHByZXZTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5sb29wKSB7CiAgICAgICAgICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlcwogICAgICAgICAgICBpZiAobmV4dFNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkgewogICAgICAgICAgICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PSIke25leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpfSJdYCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD0iJHtuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKX0iXWApLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChwcmV2U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7CiAgICAgICAgICAgICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc306bm90KC4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9IiR7cHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyl9Il1gKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PSIke3ByZXZTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpfSJdYCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgc3dpcGVyLmVtaXRTbGlkZXNDbGFzc2VzKCk7CiAgICB9CgogICAgZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7CiAgICAgICAgY29uc3QgewogICAgICAgICAgICBzbGlkZXNHcmlkLAogICAgICAgICAgICBzbmFwR3JpZCwKICAgICAgICAgICAgcGFyYW1zLAogICAgICAgICAgICBhY3RpdmVJbmRleDogcHJldmlvdXNJbmRleCwKICAgICAgICAgICAgcmVhbEluZGV4OiBwcmV2aW91c1JlYWxJbmRleCwKICAgICAgICAgICAgc25hcEluZGV4OiBwcmV2aW91c1NuYXBJbmRleAogICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7CiAgICAgICAgbGV0IHNuYXBJbmRleDsKCiAgICAgICAgaWYgKHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtIChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikgewogICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVJbmRleCA9IGk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkgewogICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHsKICAgICAgICAgICAgICAgICAgICBhY3RpdmVJbmRleCA9IGk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gLy8gTm9ybWFsaXplIHNsaWRlSW5kZXgKCgogICAgICAgICAgICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHsKICAgICAgICAgICAgICAgIGlmIChhY3RpdmVJbmRleCA8IDAgfHwgdHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykgYWN0aXZlSW5kZXggPSAwOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHsKICAgICAgICAgICAgc25hcEluZGV4ID0gc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnN0IHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7CiAgICAgICAgICAgIHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChhY3RpdmVJbmRleCAtIHNraXApIC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTsKICAgICAgICB9CgogICAgICAgIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxOwoKICAgICAgICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXgpIHsKICAgICAgICAgICAgaWYgKHNuYXBJbmRleCAhPT0gcHJldmlvdXNTbmFwSW5kZXgpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5zbmFwSW5kZXggPSBzbmFwSW5kZXg7CiAgICAgICAgICAgICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9IC8vIEdldCByZWFsIGluZGV4CgoKICAgICAgICBjb25zdCByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIHx8IGFjdGl2ZUluZGV4LCAxMCk7CiAgICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHsKICAgICAgICAgICAgc25hcEluZGV4LAogICAgICAgICAgICByZWFsSW5kZXgsCiAgICAgICAgICAgIHByZXZpb3VzSW5kZXgsCiAgICAgICAgICAgIGFjdGl2ZUluZGV4CiAgICAgICAgfSk7CiAgICAgICAgc3dpcGVyLmVtaXQoJ2FjdGl2ZUluZGV4Q2hhbmdlJyk7CiAgICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpOwoKICAgICAgICBpZiAocHJldmlvdXNSZWFsSW5kZXggIT09IHJlYWxJbmRleCkgewogICAgICAgICAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7CiAgICAgICAgfQoKICAgICAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7CiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUoZSkgewogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtczsKICAgICAgICBjb25zdCBzbGlkZSA9ICQoZSkuY2xvc2VzdChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YClbMF07CiAgICAgICAgbGV0IHNsaWRlRm91bmQgPSBmYWxzZTsKICAgICAgICBsZXQgc2xpZGVJbmRleDsKCiAgICAgICAgaWYgKHNsaWRlKSB7CiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaV0gPT09IHNsaWRlKSB7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVGb3VuZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChzbGlkZSAmJiBzbGlkZUZvdW5kKSB7CiAgICAgICAgICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSBzbGlkZTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgewogICAgICAgICAgICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHBhcnNlSW50KCQoc2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBzbGlkZUluZGV4OwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHsKICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG9DbGlja2VkU2xpZGUoKTsKICAgICAgICB9CiAgICB9CgogICAgdmFyIHVwZGF0ZSA9IHsKICAgICAgICB1cGRhdGVTaXplLAogICAgICAgIHVwZGF0ZVNsaWRlcywKICAgICAgICB1cGRhdGVBdXRvSGVpZ2h0LAogICAgICAgIHVwZGF0ZVNsaWRlc09mZnNldCwKICAgICAgICB1cGRhdGVTbGlkZXNQcm9ncmVzcywKICAgICAgICB1cGRhdGVQcm9ncmVzcywKICAgICAgICB1cGRhdGVTbGlkZXNDbGFzc2VzLAogICAgICAgIHVwZGF0ZUFjdGl2ZUluZGV4LAogICAgICAgIHVwZGF0ZUNsaWNrZWRTbGlkZQogICAgfTsKCiAgICBmdW5jdGlvbiBnZXRTd2lwZXJUcmFuc2xhdGUoYXhpcykgewogICAgICAgIGlmIChheGlzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgYXhpcyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAneCcgOiAneSc7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgcGFyYW1zLAogICAgICAgICAgICBydGxUcmFuc2xhdGU6IHJ0bCwKICAgICAgICAgICAgdHJhbnNsYXRlLAogICAgICAgICAgICAkd3JhcHBlckVsCiAgICAgICAgfSA9IHN3aXBlcjsKCiAgICAgICAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7CiAgICAgICAgICAgIHJldHVybiBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7CiAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGU7CiAgICAgICAgfQoKICAgICAgICBsZXQgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZSgkd3JhcHBlckVsWzBdLCBheGlzKTsKICAgICAgICBpZiAocnRsKSBjdXJyZW50VHJhbnNsYXRlID0gLWN1cnJlbnRUcmFuc2xhdGU7CiAgICAgICAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgcnRsVHJhbnNsYXRlOiBydGwsCiAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgJHdyYXBwZXJFbCwKICAgICAgICAgICAgd3JhcHBlckVsLAogICAgICAgICAgICBwcm9ncmVzcwogICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgbGV0IHggPSAwOwogICAgICAgIGxldCB5ID0gMDsKICAgICAgICBjb25zdCB6ID0gMDsKCiAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkgewogICAgICAgICAgICB4ID0gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB5ID0gdHJhbnNsYXRlOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHsKICAgICAgICAgICAgeCA9IE1hdGguZmxvb3IoeCk7CiAgICAgICAgICAgIHkgPSBNYXRoLmZsb29yKHkpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7CiAgICAgICAgICAgIHdyYXBwZXJFbFtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAteCA6IC15OwogICAgICAgIH0gZWxzZSBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7CiAgICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3h9cHgsICR7eX1weCwgJHt6fXB4KWApOwogICAgICAgIH0KCiAgICAgICAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTsKICAgICAgICBzd2lwZXIudHJhbnNsYXRlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8geCA6IHk7IC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzCgogICAgICAgIGxldCBuZXdQcm9ncmVzczsKICAgICAgICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTsKCiAgICAgICAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7CiAgICAgICAgICAgIG5ld1Byb2dyZXNzID0gMDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7CiAgICAgICAgfQoKICAgICAgICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7CiAgICAgICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpOwogICAgICAgIH0KCiAgICAgICAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7CiAgICB9CgogICAgZnVuY3Rpb24gbWluVHJhbnNsYXRlKCkgewogICAgICAgIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTsKICAgIH0KCiAgICBmdW5jdGlvbiBtYXhUcmFuc2xhdGUoKSB7CiAgICAgICAgcmV0dXJuIC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV07CiAgICB9CgogICAgZnVuY3Rpb24gdHJhbnNsYXRlVG8odHJhbnNsYXRlLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCB0cmFuc2xhdGVCb3VuZHMsIGludGVybmFsKSB7CiAgICAgICAgaWYgKHRyYW5zbGF0ZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHRyYW5zbGF0ZSA9IDA7CiAgICAgICAgfQoKICAgICAgICBpZiAoc3BlZWQgPT09IHZvaWQgMCkgewogICAgICAgICAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBpZiAodHJhbnNsYXRlQm91bmRzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgewogICAgICAgICAgICBwYXJhbXMsCiAgICAgICAgICAgIHdyYXBwZXJFbAogICAgICAgIH0gPSBzd2lwZXI7CgogICAgICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgbWluVHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpOwogICAgICAgIGNvbnN0IG1heFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTsKICAgICAgICBsZXQgbmV3VHJhbnNsYXRlOwogICAgICAgIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlID4gbWluVHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtaW5UcmFuc2xhdGU7IGVsc2UgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPCBtYXhUcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTsgZWxzZSBuZXdUcmFuc2xhdGUgPSB0cmFuc2xhdGU7IC8vIFVwZGF0ZSBwcm9ncmVzcwoKICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3VHJhbnNsYXRlKTsKCiAgICAgICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7CiAgICAgICAgICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTsKCiAgICAgICAgICAgIGlmIChzcGVlZCA9PT0gMCkgewogICAgICAgICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkgewogICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogLW5ld1RyYW5zbGF0ZSwKICAgICAgICAgICAgICAgICAgICAgICAgc2lkZTogaXNIID8gJ2xlZnQnIDogJ3RvcCcKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oewogICAgICAgICAgICAgICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IC1uZXdUcmFuc2xhdGUsCiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBpZiAoc3BlZWQgPT09IDApIHsKICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7CiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTsKCiAgICAgICAgICAgIGlmIChydW5DYWxsYmFja3MpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpOwogICAgICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTsKICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpOwoKICAgICAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykgewogICAgICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7CiAgICAgICAgICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykgewogICAgICAgICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7CgogICAgICAgICAgICAgICAgaWYgKCFzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpOwogICAgICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICB2YXIgdHJhbnNsYXRlID0gewogICAgICAgIGdldFRyYW5zbGF0ZTogZ2V0U3dpcGVyVHJhbnNsYXRlLAogICAgICAgIHNldFRyYW5zbGF0ZSwKICAgICAgICBtaW5UcmFuc2xhdGUsCiAgICAgICAgbWF4VHJhbnNsYXRlLAogICAgICAgIHRyYW5zbGF0ZVRvCiAgICB9OwoKICAgIGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikgewogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CgogICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7CiAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLnRyYW5zaXRpb24oZHVyYXRpb24pOwogICAgICAgIH0KCiAgICAgICAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zaXRpb24nLCBkdXJhdGlvbiwgYnlDb250cm9sbGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uRW1pdChfcmVmKSB7CiAgICAgICAgbGV0IHsKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICBydW5DYWxsYmFja3MsCiAgICAgICAgICAgIGRpcmVjdGlvbiwKICAgICAgICAgICAgc3RlcAogICAgICAgIH0gPSBfcmVmOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgYWN0aXZlSW5kZXgsCiAgICAgICAgICAgIHByZXZpb3VzSW5kZXgKICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgIGxldCBkaXIgPSBkaXJlY3Rpb247CgogICAgICAgIGlmICghZGlyKSB7CiAgICAgICAgICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JzsgZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7IGVsc2UgZGlyID0gJ3Jlc2V0JzsKICAgICAgICB9CgogICAgICAgIHN3aXBlci5lbWl0KGB0cmFuc2l0aW9uJHtzdGVwfWApOwoKICAgICAgICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7CiAgICAgICAgICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5lbWl0KGBzbGlkZVJlc2V0VHJhbnNpdGlvbiR7c3RlcH1gKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlQ2hhbmdlVHJhbnNpdGlvbiR7c3RlcH1gKTsKCiAgICAgICAgICAgIGlmIChkaXIgPT09ICduZXh0JykgewogICAgICAgICAgICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlTmV4dFRyYW5zaXRpb24ke3N0ZXB9YCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuZW1pdChgc2xpZGVQcmV2VHJhbnNpdGlvbiR7c3RlcH1gKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHsKICAgICAgICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgewogICAgICAgICAgICBwYXJhbXMKICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuOwoKICAgICAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHsKICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTsKICAgICAgICB9CgogICAgICAgIHRyYW5zaXRpb25FbWl0KHsKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICBydW5DYWxsYmFja3MsCiAgICAgICAgICAgIGRpcmVjdGlvbiwKICAgICAgICAgICAgc3RlcDogJ1N0YXJ0JwogICAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHsKICAgICAgICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgewogICAgICAgICAgICBwYXJhbXMKICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTsKICAgICAgICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjsKICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTsKICAgICAgICB0cmFuc2l0aW9uRW1pdCh7CiAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgcnVuQ2FsbGJhY2tzLAogICAgICAgICAgICBkaXJlY3Rpb24sCiAgICAgICAgICAgIHN0ZXA6ICdFbmQnCiAgICAgICAgfSk7CiAgICB9CgogICAgdmFyIHRyYW5zaXRpb24gPSB7CiAgICAgICAgc2V0VHJhbnNpdGlvbiwKICAgICAgICB0cmFuc2l0aW9uU3RhcnQsCiAgICAgICAgdHJhbnNpdGlvbkVuZAogICAgfTsKCiAgICBmdW5jdGlvbiBzbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCwgaW5pdGlhbCkgewogICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIGluZGV4ID0gMDsKICAgICAgICB9CgogICAgICAgIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7CiAgICAgICAgfQoKICAgICAgICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInICYmIHR5cGVvZiBpbmRleCAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgJ2luZGV4JyBhcmd1bWVudCBjYW5ub3QgaGF2ZSB0eXBlIG90aGVyIHRoYW4gJ251bWJlcicgb3IgJ3N0cmluZycuIFske3R5cGVvZiBpbmRleH1dIGdpdmVuLmApOwogICAgICAgIH0KCiAgICAgICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIFRoZSBgaW5kZXhgIGFyZ3VtZW50IGNvbnZlcnRlZCBmcm9tIGBzdHJpbmdgIHRvIGBudW1iZXJgLgogICAgICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgY29uc3QgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7CiAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGBpbmRleGAgYXJndW1lbnQgaXMgYSB2YWxpZCBgbnVtYmVyYAogICAgICAgICAgICAgKiBhZnRlciBiZWluZyBjb252ZXJ0ZWQgZnJvbSB0aGUgYHN0cmluZ2AgdHlwZS4KICAgICAgICAgICAgICogQHR5cGUge2Jvb2xlYW59CiAgICAgICAgICAgICAqLwoKICAgICAgICAgICAgY29uc3QgaXNWYWxpZE51bWJlciA9IGlzRmluaXRlKGluZGV4QXNOdW1iZXIpOwoKICAgICAgICAgICAgaWYgKCFpc1ZhbGlkTnVtYmVyKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBwYXNzZWQtaW4gJ2luZGV4JyAoc3RyaW5nKSBjb3VsZG4ndCBiZSBjb252ZXJ0ZWQgdG8gJ251bWJlcicuIFske2luZGV4fV0gZ2l2ZW4uYCk7CiAgICAgICAgICAgIH0gLy8gS25vd2luZyB0aGF0IHRoZSBjb252ZXJ0ZWQgYGluZGV4YCBpcyBhIHZhbGlkIG51bWJlciwKICAgICAgICAgICAgLy8gd2UgY2FuIHVwZGF0ZSB0aGUgb3JpZ2luYWwgYXJndW1lbnQncyB2YWx1ZS4KCgogICAgICAgICAgICBpbmRleCA9IGluZGV4QXNOdW1iZXI7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGxldCBzbGlkZUluZGV4ID0gaW5kZXg7CiAgICAgICAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gMDsKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgc25hcEdyaWQsCiAgICAgICAgICAgIHNsaWRlc0dyaWQsCiAgICAgICAgICAgIHByZXZpb3VzSW5kZXgsCiAgICAgICAgICAgIGFjdGl2ZUluZGV4LAogICAgICAgICAgICBydGxUcmFuc2xhdGU6IHJ0bCwKICAgICAgICAgICAgd3JhcHBlckVsLAogICAgICAgICAgICBlbmFibGVkCiAgICAgICAgfSA9IHN3aXBlcjsKCiAgICAgICAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiB8fCAhZW5hYmxlZCAmJiAhaW50ZXJuYWwgJiYgIWluaXRpYWwpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBzbGlkZUluZGV4KTsKICAgICAgICBsZXQgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApOwogICAgICAgIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxOwoKICAgICAgICBpZiAoKGFjdGl2ZUluZGV4IHx8IHBhcmFtcy5pbml0aWFsU2xpZGUgfHwgMCkgPT09IChwcmV2aW91c0luZGV4IHx8IDApICYmIHJ1bkNhbGxiYWNrcykgewogICAgICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlU2xpZGVDaGFuZ2VTdGFydCcpOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07IC8vIFVwZGF0ZSBwcm9ncmVzcwoKICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTsgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXgKCiAgICAgICAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7CiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCk7CiAgICAgICAgICAgICAgICBjb25zdCBub3JtYWxpemVkR3JpZCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpXSAqIDEwMCk7CiAgICAgICAgICAgICAgICBjb25zdCBub3JtYWxpemVkR3JpZE5leHQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaSArIDFdICogMTAwKTsKCiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQgLSAobm9ybWFsaXplZEdyaWROZXh0IC0gbm9ybWFsaXplZEdyaWQpIC8gMikgewogICAgICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaSArIDE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkKSB7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IC8vIERpcmVjdGlvbnMgbG9ja3MKCgogICAgICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgJiYgc2xpZGVJbmRleCAhPT0gYWN0aXZlSW5kZXgpIHsKICAgICAgICAgICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPCBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHsKICAgICAgICAgICAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgbGV0IGRpcmVjdGlvbjsKICAgICAgICBpZiAoc2xpZGVJbmRleCA+IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAnbmV4dCc7IGVsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnOyBlbHNlIGRpcmVjdGlvbiA9ICdyZXNldCc7IC8vIFVwZGF0ZSBJbmRleAoKICAgICAgICBpZiAocnRsICYmIC10cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUgfHwgIXJ0bCAmJiB0cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpIHsKICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpOyAvLyBVcGRhdGUgSGVpZ2h0CgogICAgICAgICAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHsKICAgICAgICAgICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7CgogICAgICAgICAgICBpZiAocGFyYW1zLmVmZmVjdCAhPT0gJ3NsaWRlJykgewogICAgICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZGlyZWN0aW9uICE9PSAncmVzZXQnKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTsKICAgICAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7CiAgICAgICAgICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTsKICAgICAgICAgICAgY29uc3QgdCA9IHJ0bCA/IHRyYW5zbGF0ZSA6IC10cmFuc2xhdGU7CgogICAgICAgICAgICBpZiAoc3BlZWQgPT09IDApIHsKICAgICAgICAgICAgICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkOwoKICAgICAgICAgICAgICAgIGlmIChpc1ZpcnR1YWwpIHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7CgogICAgICAgICAgICAgICAgaWYgKGlzVmlydHVhbCkgewogICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLl9zd2lwZXJJbW1lZGlhdGVWaXJ0dWFsID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkgewogICAgICAgICAgICAgICAgICAgIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogdCwKICAgICAgICAgICAgICAgICAgICAgICAgc2lkZTogaXNIID8gJ2xlZnQnIDogJ3RvcCcKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oewogICAgICAgICAgICAgICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IHQsCiAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7CiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpOwogICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTsKICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpOwogICAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpOwogICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pOwoKICAgICAgICBpZiAoc3BlZWQgPT09IDApIHsKICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pOwogICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHsKICAgICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7CgogICAgICAgICAgICBpZiAoIXN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkgewogICAgICAgICAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpOwogICAgICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpOwogICAgICAgICAgICAgICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CgogICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTsKICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBzbGlkZVRvTG9vcChpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHsKICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQgMCkgewogICAgICAgICAgICBpbmRleCA9IDA7CiAgICAgICAgfQoKICAgICAgICBpZiAoc3BlZWQgPT09IHZvaWQgMCkgewogICAgICAgICAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAvKioKICAgICAgICAgICAgICogVGhlIGBpbmRleGAgYXJndW1lbnQgY29udmVydGVkIGZyb20gYHN0cmluZ2AgdG8gYG51bWJlcmAuCiAgICAgICAgICAgICAqIEB0eXBlIHtudW1iZXJ9CiAgICAgICAgICAgICAqLwogICAgICAgICAgICBjb25zdCBpbmRleEFzTnVtYmVyID0gcGFyc2VJbnQoaW5kZXgsIDEwKTsKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgYGluZGV4YCBhcmd1bWVudCBpcyBhIHZhbGlkIGBudW1iZXJgCiAgICAgICAgICAgICAqIGFmdGVyIGJlaW5nIGNvbnZlcnRlZCBmcm9tIHRoZSBgc3RyaW5nYCB0eXBlLgogICAgICAgICAgICAgKiBAdHlwZSB7Ym9vbGVhbn0KICAgICAgICAgICAgICovCgogICAgICAgICAgICBjb25zdCBpc1ZhbGlkTnVtYmVyID0gaXNGaW5pdGUoaW5kZXhBc051bWJlcik7CgogICAgICAgICAgICBpZiAoIWlzVmFsaWROdW1iZXIpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHBhc3NlZC1pbiAnaW5kZXgnIChzdHJpbmcpIGNvdWxkbid0IGJlIGNvbnZlcnRlZCB0byAnbnVtYmVyJy4gWyR7aW5kZXh9XSBnaXZlbi5gKTsKICAgICAgICAgICAgfSAvLyBLbm93aW5nIHRoYXQgdGhlIGNvbnZlcnRlZCBgaW5kZXhgIGlzIGEgdmFsaWQgbnVtYmVyLAogICAgICAgICAgICAvLyB3ZSBjYW4gdXBkYXRlIHRoZSBvcmlnaW5hbCBhcmd1bWVudCdzIHZhbHVlLgoKCiAgICAgICAgICAgIGluZGV4ID0gaW5kZXhBc051bWJlcjsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgbGV0IG5ld0luZGV4ID0gaW5kZXg7CgogICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHsKICAgICAgICAgICAgbmV3SW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlczsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpOwogICAgfQoKICAgIC8qIGVzbGludCBuby11bnVzZWQtdmFyczogIm9mZiIgKi8KICAgIGZ1bmN0aW9uIHNsaWRlTmV4dChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkgewogICAgICAgIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7CiAgICAgICAgfQoKICAgICAgICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgewogICAgICAgICAgICBhbmltYXRpbmcsCiAgICAgICAgICAgIGVuYWJsZWQsCiAgICAgICAgICAgIHBhcmFtcwogICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyOwogICAgICAgIGxldCBwZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cDsKCiAgICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHsKICAgICAgICAgICAgcGVyR3JvdXAgPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ2N1cnJlbnQnLCB0cnVlKSwgMSk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBpbmNyZW1lbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBlckdyb3VwOwoKICAgICAgICBpZiAocGFyYW1zLmxvb3ApIHsKICAgICAgICAgICAgaWYgKGFuaW1hdGluZyAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGUpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCgogICAgICAgICAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0OwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kKSB7CiAgICAgICAgICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7CiAgICB9CgogICAgLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiAib2ZmIiAqLwogICAgZnVuY3Rpb24gc2xpZGVQcmV2KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7CiAgICAgICAgaWYgKHNwZWVkID09PSB2b2lkIDApIHsKICAgICAgICAgICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDsKICAgICAgICB9CgogICAgICAgIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkgewogICAgICAgICAgICBydW5DYWxsYmFja3MgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgYW5pbWF0aW5nLAogICAgICAgICAgICBzbmFwR3JpZCwKICAgICAgICAgICAgc2xpZGVzR3JpZCwKICAgICAgICAgICAgcnRsVHJhbnNsYXRlLAogICAgICAgICAgICBlbmFibGVkCiAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICBpZiAoIWVuYWJsZWQpIHJldHVybiBzd2lwZXI7CgogICAgICAgIGlmIChwYXJhbXMubG9vcCkgewogICAgICAgICAgICBpZiAoYW5pbWF0aW5nICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkZSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKCiAgICAgICAgICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7CiAgICAgICAgfQoKICAgICAgICBjb25zdCB0cmFuc2xhdGUgPSBydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7CgogICAgICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWwpIHsKICAgICAgICAgICAgaWYgKHZhbCA8IDApIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmFicyh2YWwpKTsKICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSBub3JtYWxpemUodHJhbnNsYXRlKTsKICAgICAgICBjb25zdCBub3JtYWxpemVkU25hcEdyaWQgPSBzbmFwR3JpZC5tYXAodmFsID0+IG5vcm1hbGl6ZSh2YWwpKTsKICAgICAgICBsZXQgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdOwoKICAgICAgICBpZiAodHlwZW9mIHByZXZTbmFwID09PSAndW5kZWZpbmVkJyAmJiBwYXJhbXMuY3NzTW9kZSkgewogICAgICAgICAgICBsZXQgcHJldlNuYXBJbmRleDsKICAgICAgICAgICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7CiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBzbmFwKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gcHJldlNuYXAgPSBzbmFwOwogICAgICAgICAgICAgICAgICAgIHByZXZTbmFwSW5kZXggPSBzbmFwSW5kZXg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaWYgKHR5cGVvZiBwcmV2U25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgcHJldlNuYXAgPSBzbmFwR3JpZFtwcmV2U25hcEluZGV4ID4gMCA/IHByZXZTbmFwSW5kZXggLSAxIDogcHJldlNuYXBJbmRleF07CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGxldCBwcmV2SW5kZXggPSAwOwoKICAgICAgICBpZiAodHlwZW9mIHByZXZTbmFwICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApOwogICAgICAgICAgICBpZiAocHJldkluZGV4IDwgMCkgcHJldkluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMTsKCiAgICAgICAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7CiAgICAgICAgICAgICAgICBwcmV2SW5kZXggPSBwcmV2SW5kZXggLSBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ3ByZXZpb3VzJywgdHJ1ZSkgKyAxOwogICAgICAgICAgICAgICAgcHJldkluZGV4ID0gTWF0aC5tYXgocHJldkluZGV4LCAwKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzQmVnaW5uaW5nKSB7CiAgICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxOwogICAgICAgICAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obGFzdEluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7CiAgICB9CgogICAgLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiAib2ZmIiAqLwogICAgZnVuY3Rpb24gc2xpZGVSZXNldChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkgewogICAgICAgIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7CiAgICAgICAgfQoKICAgICAgICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHsKICAgICAgICAgICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpOwogICAgfQoKICAgIC8qIGVzbGludCBuby11bnVzZWQtdmFyczogIm9mZiIgKi8KICAgIGZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCB0aHJlc2hvbGQpIHsKICAgICAgICBpZiAoc3BlZWQgPT09IHZvaWQgMCkgewogICAgICAgICAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBpZiAodGhyZXNob2xkID09PSB2b2lkIDApIHsKICAgICAgICAgICAgdGhyZXNob2xkID0gMC41OwogICAgICAgIH0KCiAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICBsZXQgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7CiAgICAgICAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7CiAgICAgICAgY29uc3Qgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTsKICAgICAgICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlOwoKICAgICAgICBpZiAodHJhbnNsYXRlID49IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdKSB7CiAgICAgICAgICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBvbiBvciBhZnRlciB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlCiAgICAgICAgICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuCiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07CiAgICAgICAgICAgIGNvbnN0IG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdOwoKICAgICAgICAgICAgaWYgKHRyYW5zbGF0ZSAtIGN1cnJlbnRTbmFwID4gKG5leHRTbmFwIC0gY3VycmVudFNuYXApICogdGhyZXNob2xkKSB7CiAgICAgICAgICAgICAgICBpbmRleCArPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIGJlZm9yZSB0aGUgY3VycmVudCBzbmFwIGluZGV4LCBzbyB0aGUgY2hvaWNlCiAgICAgICAgICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYmVmb3JlIGl0LgogICAgICAgICAgICBjb25zdCBwcmV2U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggLSAxXTsKICAgICAgICAgICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTsKCiAgICAgICAgICAgIGlmICh0cmFuc2xhdGUgLSBwcmV2U25hcCA8PSAoY3VycmVudFNuYXAgLSBwcmV2U25hcCkgKiB0aHJlc2hvbGQpIHsKICAgICAgICAgICAgICAgIGluZGV4IC09IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGluZGV4ID0gTWF0aC5tYXgoaW5kZXgsIDApOwogICAgICAgIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpOwogICAgICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNsaWRlVG9DbGlja2VkU2xpZGUoKSB7CiAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgJHdyYXBwZXJFbAogICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHBhcmFtcy5zbGlkZXNQZXJWaWV3OwogICAgICAgIGxldCBzbGlkZVRvSW5kZXggPSBzd2lwZXIuY2xpY2tlZEluZGV4OwogICAgICAgIGxldCByZWFsSW5kZXg7CgogICAgICAgIGlmIChwYXJhbXMubG9vcCkgewogICAgICAgICAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykgcmV0dXJuOwogICAgICAgICAgICByZWFsSW5kZXggPSBwYXJzZUludCgkKHN3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTsKCiAgICAgICAgICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHsKICAgICAgICAgICAgICAgIGlmIChzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gc2xpZGVzUGVyVmlldyAvIDIgfHwgc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICsgc2xpZGVzUGVyVmlldyAvIDIpIHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpOwogICAgICAgICAgICAgICAgICAgIHNsaWRlVG9JbmRleCA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD0iJHtyZWFsSW5kZXh9Il06bm90KC4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlgKS5lcSgwKS5pbmRleCgpOwogICAgICAgICAgICAgICAgICAgIG5leHRUaWNrKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7CiAgICAgICAgICAgICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9IiR7cmVhbEluZGV4fSJdOm5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYCkuZXEoMCkuaW5kZXgoKTsKICAgICAgICAgICAgICAgIG5leHRUaWNrKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTsKICAgICAgICB9CiAgICB9CgogICAgdmFyIHNsaWRlID0gewogICAgICAgIHNsaWRlVG8sCiAgICAgICAgc2xpZGVUb0xvb3AsCiAgICAgICAgc2xpZGVOZXh0LAogICAgICAgIHNsaWRlUHJldiwKICAgICAgICBzbGlkZVJlc2V0LAogICAgICAgIHNsaWRlVG9DbG9zZXN0LAogICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGUKICAgIH07CgogICAgZnVuY3Rpb24gbG9vcENyZWF0ZSgpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTsKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgJHdyYXBwZXJFbAogICAgICAgIH0gPSBzd2lwZXI7IC8vIFJlbW92ZSBkdXBsaWNhdGVkIHNsaWRlcwoKICAgICAgICBjb25zdCAkc2VsZWN0b3IgPSAkd3JhcHBlckVsLmNoaWxkcmVuKCkubGVuZ3RoID4gMCA/ICQoJHdyYXBwZXJFbC5jaGlsZHJlbigpWzBdLnBhcmVudE5vZGUpIDogJHdyYXBwZXJFbDsKICAgICAgICAkc2VsZWN0b3IuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfWApLnJlbW92ZSgpOwogICAgICAgIGxldCBzbGlkZXMgPSAkc2VsZWN0b3IuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApOwoKICAgICAgICBpZiAocGFyYW1zLmxvb3BGaWxsR3JvdXBXaXRoQmxhbmspIHsKICAgICAgICAgICAgY29uc3QgYmxhbmtTbGlkZXNOdW0gPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgLSBzbGlkZXMubGVuZ3RoICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwOwoKICAgICAgICAgICAgaWYgKGJsYW5rU2xpZGVzTnVtICE9PSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHsKICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxhbmtTbGlkZXNOdW07IGkgKz0gMSkgewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsYW5rTm9kZSA9ICQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLmFkZENsYXNzKGAke3BhcmFtcy5zbGlkZUNsYXNzfSAke3BhcmFtcy5zbGlkZUJsYW5rQ2xhc3N9YCk7CiAgICAgICAgICAgICAgICAgICAgJHNlbGVjdG9yLmFwcGVuZChibGFua05vZGUpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHNsaWRlcyA9ICRzZWxlY3Rvci5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmICFwYXJhbXMubG9vcGVkU2xpZGVzKSBwYXJhbXMubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDsKICAgICAgICBzd2lwZXIubG9vcGVkU2xpZGVzID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLmxvb3BlZFNsaWRlcyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTsKICAgICAgICBzd2lwZXIubG9vcGVkU2xpZGVzICs9IHBhcmFtcy5sb29wQWRkaXRpb25hbFNsaWRlczsKCiAgICAgICAgaWYgKHN3aXBlci5sb29wZWRTbGlkZXMgPiBzbGlkZXMubGVuZ3RoICYmIHN3aXBlci5wYXJhbXMubG9vcGVkU2xpZGVzTGltaXQpIHsKICAgICAgICAgICAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IHNsaWRlcy5sZW5ndGg7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBwcmVwZW5kU2xpZGVzID0gW107CiAgICAgICAgY29uc3QgYXBwZW5kU2xpZGVzID0gW107CiAgICAgICAgc2xpZGVzLmVhY2goKGVsLCBpbmRleCkgPT4gewogICAgICAgICAgICAkKGVsKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTsKICAgICAgICB9KTsKCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIubG9vcGVkU2xpZGVzOyBpICs9IDEpIHsKICAgICAgICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gc2xpZGVzLmxlbmd0aCkgKiBzbGlkZXMubGVuZ3RoOwogICAgICAgICAgICBhcHBlbmRTbGlkZXMucHVzaChzbGlkZXMuZXEoaW5kZXgpWzBdKTsKICAgICAgICAgICAgcHJlcGVuZFNsaWRlcy51bnNoaWZ0KHNsaWRlcy5lcShzbGlkZXMubGVuZ3RoIC0gaW5kZXggLSAxKVswXSk7CiAgICAgICAgfQoKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFwcGVuZFNsaWRlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAkc2VsZWN0b3IuYXBwZW5kKCQoYXBwZW5kU2xpZGVzW2ldLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTsKICAgICAgICB9CgogICAgICAgIGZvciAobGV0IGkgPSBwcmVwZW5kU2xpZGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7CiAgICAgICAgICAgICRzZWxlY3Rvci5wcmVwZW5kKCQocHJlcGVuZFNsaWRlc1tpXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGxvb3BGaXgoKSB7CiAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgYWN0aXZlSW5kZXgsCiAgICAgICAgICAgIHNsaWRlcywKICAgICAgICAgICAgbG9vcGVkU2xpZGVzLAogICAgICAgICAgICBhbGxvd1NsaWRlUHJldiwKICAgICAgICAgICAgYWxsb3dTbGlkZU5leHQsCiAgICAgICAgICAgIHNuYXBHcmlkLAogICAgICAgICAgICBydGxUcmFuc2xhdGU6IHJ0bAogICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgbGV0IG5ld0luZGV4OwogICAgICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7CiAgICAgICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTsKICAgICAgICBjb25zdCBzbmFwVHJhbnNsYXRlID0gLXNuYXBHcmlkW2FjdGl2ZUluZGV4XTsKICAgICAgICBjb25zdCBkaWZmID0gc25hcFRyYW5zbGF0ZSAtIHN3aXBlci5nZXRUcmFuc2xhdGUoKTsgLy8gRml4IEZvciBOZWdhdGl2ZSBPdmVyc2xpZGluZwoKICAgICAgICBpZiAoYWN0aXZlSW5kZXggPCBsb29wZWRTbGlkZXMpIHsKICAgICAgICAgICAgbmV3SW5kZXggPSBzbGlkZXMubGVuZ3RoIC0gbG9vcGVkU2xpZGVzICogMyArIGFjdGl2ZUluZGV4OwogICAgICAgICAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7CiAgICAgICAgICAgIGNvbnN0IHNsaWRlQ2hhbmdlZCA9IHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7CgogICAgICAgICAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHsKICAgICAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoYWN0aXZlSW5kZXggPj0gc2xpZGVzLmxlbmd0aCAtIGxvb3BlZFNsaWRlcykgewogICAgICAgICAgICAvLyBGaXggRm9yIFBvc2l0aXZlIE92ZXJzbGlkaW5nCiAgICAgICAgICAgIG5ld0luZGV4ID0gLXNsaWRlcy5sZW5ndGggKyBhY3RpdmVJbmRleCArIGxvb3BlZFNsaWRlczsKICAgICAgICAgICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzOwogICAgICAgICAgICBjb25zdCBzbGlkZUNoYW5nZWQgPSBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpOwoKICAgICAgICAgICAgaWYgKHNsaWRlQ2hhbmdlZCAmJiBkaWZmICE9PSAwKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKChydGwgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpIC0gZGlmZik7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2OwogICAgICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0OwogICAgICAgIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7CiAgICB9CgogICAgZnVuY3Rpb24gbG9vcERlc3Ryb3koKSB7CiAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICR3cmFwcGVyRWwsCiAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgc2xpZGVzCiAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30sLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlQmxhbmtDbGFzc31gKS5yZW1vdmUoKTsKICAgICAgICBzbGlkZXMucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTsKICAgIH0KCiAgICB2YXIgbG9vcCA9IHsKICAgICAgICBsb29wQ3JlYXRlLAogICAgICAgIGxvb3BGaXgsCiAgICAgICAgbG9vcERlc3Ryb3kKICAgIH07CgogICAgZnVuY3Rpb24gc2V0R3JhYkN1cnNvcihtb3ZpbmcpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGlmIChzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47CiAgICAgICAgY29uc3QgZWwgPSBzd2lwZXIucGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnY29udGFpbmVyJyA/IHN3aXBlci5lbCA6IHN3aXBlci53cmFwcGVyRWw7CiAgICAgICAgZWwuc3R5bGUuY3Vyc29yID0gJ21vdmUnOwogICAgICAgIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7CiAgICB9CgogICAgZnVuY3Rpb24gdW5zZXRHcmFiQ3Vyc29yKCkgewogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CgogICAgICAgIGlmIChzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCBzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBzd2lwZXJbc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyAnZWwnIDogJ3dyYXBwZXJFbCddLnN0eWxlLmN1cnNvciA9ICcnOwogICAgfQoKICAgIHZhciBncmFiQ3Vyc29yID0gewogICAgICAgIHNldEdyYWJDdXJzb3IsCiAgICAgICAgdW5zZXRHcmFiQ3Vyc29yCiAgICB9OwoKICAgIGZ1bmN0aW9uIGNsb3Nlc3RFbGVtZW50KHNlbGVjdG9yLCBiYXNlKSB7CiAgICAgICAgaWYgKGJhc2UgPT09IHZvaWQgMCkgewogICAgICAgICAgICBiYXNlID0gdGhpczsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIF9fY2xvc2VzdEZyb20oZWwpIHsKICAgICAgICAgICAgaWYgKCFlbCB8fCBlbCA9PT0gZ2V0RG9jdW1lbnQoKSB8fCBlbCA9PT0gZ2V0V2luZG93KCkpIHJldHVybiBudWxsOwogICAgICAgICAgICBpZiAoZWwuYXNzaWduZWRTbG90KSBlbCA9IGVsLmFzc2lnbmVkU2xvdDsKICAgICAgICAgICAgY29uc3QgZm91bmQgPSBlbC5jbG9zZXN0KHNlbGVjdG9yKTsKCiAgICAgICAgICAgIGlmICghZm91bmQgJiYgIWVsLmdldFJvb3ROb2RlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGZvdW5kIHx8IF9fY2xvc2VzdEZyb20oZWwuZ2V0Um9vdE5vZGUoKS5ob3N0KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBfX2Nsb3Nlc3RGcm9tKGJhc2UpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkgewogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpOwogICAgICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpOwogICAgICAgIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgcGFyYW1zLAogICAgICAgICAgICB0b3VjaGVzLAogICAgICAgICAgICBlbmFibGVkCiAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICBpZiAoIWVuYWJsZWQpIHJldHVybjsKCiAgICAgICAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmxvb3ApIHsKICAgICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTsKICAgICAgICB9CgogICAgICAgIGxldCBlID0gZXZlbnQ7CiAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDsKICAgICAgICBsZXQgJHRhcmdldEVsID0gJChlLnRhcmdldCk7CgogICAgICAgIGlmIChwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICd3cmFwcGVyJykgewogICAgICAgICAgICBpZiAoISR0YXJnZXRFbC5jbG9zZXN0KHN3aXBlci53cmFwcGVyRWwpLmxlbmd0aCkgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgZGF0YS5pc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JzsKICAgICAgICBpZiAoIWRhdGEuaXNUb3VjaEV2ZW50ICYmICd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm47CiAgICAgICAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuOwogICAgICAgIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHJldHVybjsgLy8gY2hhbmdlIHRhcmdldCBlbCBmb3Igc2hhZG93IHJvb3QgY29tcG9uZW50CgogICAgICAgIGNvbnN0IHN3aXBpbmdDbGFzc0hhc1ZhbHVlID0gISFwYXJhbXMubm9Td2lwaW5nQ2xhc3MgJiYgcGFyYW1zLm5vU3dpcGluZ0NsYXNzICE9PSAnJzsKCiAgICAgICAgaWYgKHN3aXBpbmdDbGFzc0hhc1ZhbHVlICYmIGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgZXZlbnQucGF0aCAmJiBldmVudC5wYXRoWzBdKSB7CiAgICAgICAgICAgICR0YXJnZXRFbCA9ICQoZXZlbnQucGF0aFswXSk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBub1N3aXBpbmdTZWxlY3RvciA9IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA/IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA6IGAuJHtwYXJhbXMubm9Td2lwaW5nQ2xhc3N9YDsKICAgICAgICBjb25zdCBpc1RhcmdldFNoYWRvdyA9ICEhKGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QpOyAvLyB1c2UgY2xvc2VzdEVsZW1lbnQgZm9yIHNoYWRvdyByb290IGVsZW1lbnQgdG8gZ2V0IHRoZSBhY3R1YWwgY2xvc2VzdCBmb3IgbmVzdGVkIHNoYWRvdyByb290IGVsZW1lbnQKCiAgICAgICAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgKGlzVGFyZ2V0U2hhZG93ID8gY2xvc2VzdEVsZW1lbnQobm9Td2lwaW5nU2VsZWN0b3IsICR0YXJnZXRFbFswXSkgOiAkdGFyZ2V0RWwuY2xvc2VzdChub1N3aXBpbmdTZWxlY3RvcilbMF0pKSB7CiAgICAgICAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHsKICAgICAgICAgICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChwYXJhbXMuc3dpcGVIYW5kbGVyKVswXSkgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdG91Y2hlcy5jdXJyZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDsKICAgICAgICB0b3VjaGVzLmN1cnJlbnRZID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZOwogICAgICAgIGNvbnN0IHN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7CiAgICAgICAgY29uc3Qgc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTsgLy8gRG8gTk9UIHN0YXJ0IGlmIGlPUyBlZGdlIHN3aXBlIGlzIGRldGVjdGVkLiBPdGhlcndpc2UgaU9TIGFwcCBjYW5ub3Qgc3dpcGUtdG8tZ28tYmFjayBhbnltb3JlCgogICAgICAgIGNvbnN0IGVkZ2VTd2lwZURldGVjdGlvbiA9IHBhcmFtcy5lZGdlU3dpcGVEZXRlY3Rpb24gfHwgcGFyYW1zLmlPU0VkZ2VTd2lwZURldGVjdGlvbjsKICAgICAgICBjb25zdCBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVUaHJlc2hvbGQ7CgogICAgICAgIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gJiYgKHN0YXJ0WCA8PSBlZGdlU3dpcGVUaHJlc2hvbGQgfHwgc3RhcnRYID49IHdpbmRvdy5pbm5lcldpZHRoIC0gZWRnZVN3aXBlVGhyZXNob2xkKSkgewogICAgICAgICAgICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uID09PSAncHJldmVudCcpIHsKICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIE9iamVjdC5hc3NpZ24oZGF0YSwgewogICAgICAgICAgICBpc1RvdWNoZWQ6IHRydWUsCiAgICAgICAgICAgIGlzTW92ZWQ6IGZhbHNlLAogICAgICAgICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB0cnVlLAogICAgICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLAogICAgICAgICAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkCiAgICAgICAgfSk7CiAgICAgICAgdG91Y2hlcy5zdGFydFggPSBzdGFydFg7CiAgICAgICAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7CiAgICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpOwogICAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTsKICAgICAgICBzd2lwZXIudXBkYXRlU2l6ZSgpOwogICAgICAgIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDsKICAgICAgICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gZmFsc2U7CgogICAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0JykgewogICAgICAgICAgICBsZXQgcHJldmVudERlZmF1bHQgPSB0cnVlOwoKICAgICAgICAgICAgaWYgKCR0YXJnZXRFbC5pcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkgewogICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICBpZiAoJHRhcmdldEVsWzBdLm5vZGVOYW1lID09PSAnU0VMRUNUJykgewogICAgICAgICAgICAgICAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gJHRhcmdldEVsWzBdKSB7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3Qgc2hvdWxkUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdCAmJiBzd2lwZXIuYWxsb3dUb3VjaE1vdmUgJiYgcGFyYW1zLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDsKCiAgICAgICAgICAgIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhJHRhcmdldEVsWzBdLmlzQ29udGVudEVkaXRhYmxlKSB7CiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgJiYgc3dpcGVyLmFuaW1hdGluZyAmJiAhcGFyYW1zLmNzc01vZGUpIHsKICAgICAgICAgICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hTdGFydCgpOwogICAgICAgIH0KCiAgICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvblRvdWNoTW92ZShldmVudCkgewogICAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgcGFyYW1zLAogICAgICAgICAgICB0b3VjaGVzLAogICAgICAgICAgICBydGxUcmFuc2xhdGU6IHJ0bCwKICAgICAgICAgICAgZW5hYmxlZAogICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgaWYgKCFlbmFibGVkKSByZXR1cm47CiAgICAgICAgbGV0IGUgPSBldmVudDsKICAgICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50OwoKICAgICAgICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7CiAgICAgICAgICAgIGlmIChkYXRhLnN0YXJ0TW92aW5nICYmIGRhdGEuaXNTY3JvbGxpbmcpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgZS50eXBlICE9PSAndG91Y2htb3ZlJykgcmV0dXJuOwogICAgICAgIGNvbnN0IHRhcmdldFRvdWNoID0gZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMgJiYgKGUudGFyZ2V0VG91Y2hlc1swXSB8fCBlLmNoYW5nZWRUb3VjaGVzWzBdKTsKICAgICAgICBjb25zdCBwYWdlWCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyB0YXJnZXRUb3VjaC5wYWdlWCA6IGUucGFnZVg7CiAgICAgICAgY29uc3QgcGFnZVkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gdGFyZ2V0VG91Y2gucGFnZVkgOiBlLnBhZ2VZOwoKICAgICAgICBpZiAoZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikgewogICAgICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHBhZ2VYOwogICAgICAgICAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkgewogICAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLmlzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZGF0YS5pc1RvdWNoZWQpIHsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odG91Y2hlcywgewogICAgICAgICAgICAgICAgICAgIHN0YXJ0WDogcGFnZVgsCiAgICAgICAgICAgICAgICAgICAgc3RhcnRZOiBwYWdlWSwKICAgICAgICAgICAgICAgICAgICBjdXJyZW50WDogcGFnZVgsCiAgICAgICAgICAgICAgICAgICAgY3VycmVudFk6IHBhZ2VZCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkgewogICAgICAgICAgICBpZiAoc3dpcGVyLmlzVmVydGljYWwoKSkgewogICAgICAgICAgICAgICAgLy8gVmVydGljYWwKICAgICAgICAgICAgICAgIGlmIChwYWdlWSA8IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VZID4gdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHsKICAgICAgICAgICAgICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHsKICAgICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICQoZS50YXJnZXQpLmlzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7CiAgICAgICAgICAgICAgICBkYXRhLmlzTW92ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykgewogICAgICAgICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSByZXR1cm47CiAgICAgICAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYOwogICAgICAgIHRvdWNoZXMuY3VycmVudFkgPSBwYWdlWTsKICAgICAgICBjb25zdCBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDsKICAgICAgICBjb25zdCBkaWZmWSA9IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTsKICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KGRpZmZYICoqIDIgKyBkaWZmWSAqKiAyKSA8IHN3aXBlci5wYXJhbXMudGhyZXNob2xkKSByZXR1cm47CgogICAgICAgIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgbGV0IHRvdWNoQW5nbGU7CgogICAgICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZIHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpIHsKICAgICAgICAgICAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQogICAgICAgICAgICAgICAgaWYgKGRpZmZYICogZGlmZlggKyBkaWZmWSAqIGRpZmZZID49IDI1KSB7CiAgICAgICAgICAgICAgICAgICAgdG91Y2hBbmdsZSA9IE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwIC8gTWF0aC5QSTsKICAgICAgICAgICAgICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7CiAgICAgICAgICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHR5cGVvZiBkYXRhLnN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHsKICAgICAgICAgICAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZGF0YS5pc1Njcm9sbGluZykgewogICAgICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoIWRhdGEuc3RhcnRNb3ZpbmcpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTsKCiAgICAgICAgaWYgKCFwYXJhbXMuY3NzTW9kZSAmJiBlLmNhbmNlbGFibGUpIHsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24gJiYgIXBhcmFtcy5uZXN0ZWQpIHsKICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICB9CgogICAgICAgIGlmICghZGF0YS5pc01vdmVkKSB7CiAgICAgICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiAhcGFyYW1zLmNzc01vZGUpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7CiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApOwoKICAgICAgICAgICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHsKICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLnRyaWdnZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQgdHJhbnNpdGlvbmVuZCcpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSBmYWxzZTsgLy8gR3JhYiBDdXJzb3IKCiAgICAgICAgICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKHRydWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzd2lwZXIuZW1pdCgnc2xpZGVyRmlyc3RNb3ZlJywgZSk7CiAgICAgICAgfQoKICAgICAgICBzd2lwZXIuZW1pdCgnc2xpZGVyTW92ZScsIGUpOwogICAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7CiAgICAgICAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZOwogICAgICAgIHRvdWNoZXMuZGlmZiA9IGRpZmY7CiAgICAgICAgZGlmZiAqPSBwYXJhbXMudG91Y2hSYXRpbzsKICAgICAgICBpZiAocnRsKSBkaWZmID0gLWRpZmY7CiAgICAgICAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7CiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7CiAgICAgICAgbGV0IGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlOwogICAgICAgIGxldCByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvOwoKICAgICAgICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHsKICAgICAgICAgICAgcmVzaXN0YW5jZVJhdGlvID0gMDsKICAgICAgICB9CgogICAgICAgIGlmIChkaWZmID4gMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHsKICAgICAgICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlOwogICAgICAgICAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSAtIDEgKyAoLXN3aXBlci5taW5UcmFuc2xhdGUoKSArIGRhdGEuc3RhcnRUcmFuc2xhdGUgKyBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87CiAgICAgICAgfSBlbHNlIGlmIChkaWZmIDwgMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHsKICAgICAgICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlOwogICAgICAgICAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEgLSAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbzsKICAgICAgICB9CgogICAgICAgIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyKSB7CiAgICAgICAgICAgIGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIgPSB0cnVlOwogICAgICAgIH0gLy8gRGlyZWN0aW9ucyBsb2NrcwoKCiAgICAgICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkgewogICAgICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkgewogICAgICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgIXN3aXBlci5hbGxvd1NsaWRlTmV4dCkgewogICAgICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlOwogICAgICAgIH0gLy8gVGhyZXNob2xkCgoKICAgICAgICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIHsKICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRpZmYpID4gcGFyYW1zLnRocmVzaG9sZCB8fCBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkgewogICAgICAgICAgICAgICAgaWYgKCFkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkgewogICAgICAgICAgICAgICAgICAgIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7CiAgICAgICAgICAgICAgICAgICAgdG91Y2hlcy5zdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZOwogICAgICAgICAgICAgICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7CiAgICAgICAgICAgICAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuOyAvLyBVcGRhdGUgYWN0aXZlIGluZGV4IGluIGZyZWUgbW9kZQoKICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSB8fCBwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcykgewogICAgICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTsKICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTsKICAgICAgICB9CgogICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSkgewogICAgICAgICAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaE1vdmUoKTsKICAgICAgICB9IC8vIFVwZGF0ZSBwcm9ncmVzcwoKCiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7IC8vIFVwZGF0ZSB0cmFuc2xhdGUKCiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShkYXRhLmN1cnJlbnRUcmFuc2xhdGUpOwogICAgfQoKICAgIGZ1bmN0aW9uIG9uVG91Y2hFbmQoZXZlbnQpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgcGFyYW1zLAogICAgICAgICAgICB0b3VjaGVzLAogICAgICAgICAgICBydGxUcmFuc2xhdGU6IHJ0bCwKICAgICAgICAgICAgc2xpZGVzR3JpZCwKICAgICAgICAgICAgZW5hYmxlZAogICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgaWYgKCFlbmFibGVkKSByZXR1cm47CiAgICAgICAgbGV0IGUgPSBldmVudDsKICAgICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50OwoKICAgICAgICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7CiAgICAgICAgICAgIHN3aXBlci5lbWl0KCd0b3VjaEVuZCcsIGUpOwogICAgICAgIH0KCiAgICAgICAgZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzID0gZmFsc2U7CgogICAgICAgIGlmICghZGF0YS5pc1RvdWNoZWQpIHsKICAgICAgICAgICAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBwYXJhbXMuZ3JhYkN1cnNvcikgewogICAgICAgICAgICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTsKICAgICAgICAgICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfSAvLyBSZXR1cm4gR3JhYiBDdXJzb3IKCgogICAgICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7CiAgICAgICAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTsKICAgICAgICB9IC8vIFRpbWUgZGlmZgoKCiAgICAgICAgY29uc3QgdG91Y2hFbmRUaW1lID0gbm93KCk7CiAgICAgICAgY29uc3QgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lOyAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2sKCiAgICAgICAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7CiAgICAgICAgICAgIGNvbnN0IHBhdGhUcmVlID0gZS5wYXRoIHx8IGUuY29tcG9zZWRQYXRoICYmIGUuY29tcG9zZWRQYXRoKCk7CiAgICAgICAgICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUocGF0aFRyZWUgJiYgcGF0aFRyZWVbMF0gfHwgZS50YXJnZXQpOwogICAgICAgICAgICBzd2lwZXIuZW1pdCgndGFwIGNsaWNrJywgZSk7CgogICAgICAgICAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgdG91Y2hFbmRUaW1lIC0gZGF0YS5sYXN0Q2xpY2tUaW1lIDwgMzAwKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuZW1pdCgnZG91YmxlVGFwIGRvdWJsZUNsaWNrJywgZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGRhdGEubGFzdENsaWNrVGltZSA9IG5vdygpOwogICAgICAgIG5leHRUaWNrKCgpID0+IHsKICAgICAgICAgICAgaWYgKCFzd2lwZXIuZGVzdHJveWVkKSBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7CiAgICAgICAgfSk7CgogICAgICAgIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCB8fCBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPT09IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHsKICAgICAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTsKICAgICAgICAgICAgZGF0YS5pc01vdmVkID0gZmFsc2U7CiAgICAgICAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTsKICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTsKICAgICAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7CiAgICAgICAgbGV0IGN1cnJlbnRQb3M7CgogICAgICAgIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7CiAgICAgICAgICAgIGN1cnJlbnRQb3MgPSBydGwgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY3VycmVudFBvcyA9IC1kYXRhLmN1cnJlbnRUcmFuc2xhdGU7CiAgICAgICAgfQoKICAgICAgICBpZiAocGFyYW1zLmNzc01vZGUpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQpIHsKICAgICAgICAgICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hFbmQoewogICAgICAgICAgICAgICAgY3VycmVudFBvcwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0gLy8gRmluZCBjdXJyZW50IHNsaWRlCgoKICAgICAgICBsZXQgc3RvcEluZGV4ID0gMDsKICAgICAgICBsZXQgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTsKCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHsKICAgICAgICAgICAgY29uc3QgaW5jcmVtZW50ID0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDsKCiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0gJiYgY3VycmVudFBvcyA8IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0pIHsKICAgICAgICAgICAgICAgICAgICBzdG9wSW5kZXggPSBpOwogICAgICAgICAgICAgICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gLSBzbGlkZXNHcmlkW2ldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSkgewogICAgICAgICAgICAgICAgc3RvcEluZGV4ID0gaTsKICAgICAgICAgICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgbGV0IHJld2luZEZpcnN0SW5kZXggPSBudWxsOwogICAgICAgIGxldCByZXdpbmRMYXN0SW5kZXggPSBudWxsOwoKICAgICAgICBpZiAocGFyYW1zLnJld2luZCkgewogICAgICAgICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7CiAgICAgICAgICAgICAgICByZXdpbmRMYXN0SW5kZXggPSBzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTsKICAgICAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIuaXNFbmQpIHsKICAgICAgICAgICAgICAgIHJld2luZEZpcnN0SW5kZXggPSAwOwogICAgICAgICAgICB9CiAgICAgICAgfSAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZQoKCiAgICAgICAgY29uc3QgcmF0aW8gPSAoY3VycmVudFBvcyAtIHNsaWRlc0dyaWRbc3RvcEluZGV4XSkgLyBncm91cFNpemU7CiAgICAgICAgY29uc3QgaW5jcmVtZW50ID0gc3RvcEluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwOwoKICAgICAgICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7CiAgICAgICAgICAgIC8vIExvbmcgdG91Y2hlcwogICAgICAgICAgICBpZiAoIXBhcmFtcy5sb25nU3dpcGVzKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHsKICAgICAgICAgICAgICAgIGlmIChyYXRpbyA+PSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSBzd2lwZXIuc2xpZGVUbyhwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpOyBlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2JykgewogICAgICAgICAgICAgICAgaWYgKHJhdGlvID4gMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXdpbmRMYXN0SW5kZXggIT09IG51bGwgJiYgcmF0aW8gPCAwICYmIE1hdGguYWJzKHJhdGlvKSA+IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gU2hvcnQgc3dpcGVzCiAgICAgICAgICAgIGlmICghcGFyYW1zLnNob3J0U3dpcGVzKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBpc05hdkJ1dHRvblRhcmdldCA9IHN3aXBlci5uYXZpZ2F0aW9uICYmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsIHx8IGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpOwoKICAgICAgICAgICAgaWYgKCFpc05hdkJ1dHRvblRhcmdldCkgewogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kRmlyc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2JykgewogICAgICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZExhc3RJbmRleCA6IHN0b3BJbmRleCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCkgewogICAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gb25SZXNpemUoKSB7CiAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgZWwKICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgIGlmIChlbCAmJiBlbC5vZmZzZXRXaWR0aCA9PT0gMCkgcmV0dXJuOyAvLyBCcmVha3BvaW50cwoKICAgICAgICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7CiAgICAgICAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7CiAgICAgICAgfSAvLyBTYXZlIGxvY2tzCgoKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIGFsbG93U2xpZGVOZXh0LAogICAgICAgICAgICBhbGxvd1NsaWRlUHJldiwKICAgICAgICAgICAgc25hcEdyaWQKICAgICAgICB9ID0gc3dpcGVyOyAvLyBEaXNhYmxlIGxvY2tzIG9uIHJlc2l6ZQoKICAgICAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlOwogICAgICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7CiAgICAgICAgc3dpcGVyLnVwZGF0ZVNpemUoKTsKICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7CiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTsKCiAgICAgICAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHsKICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHsKICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpOwogICAgICAgIH0gLy8gUmV0dXJuIGxvY2tzIGFmdGVyIHJlc2l6ZQoKCiAgICAgICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7CiAgICAgICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7CgogICAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkgewogICAgICAgICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBvbkNsaWNrKGUpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjsKCiAgICAgICAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykgewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzKSBlLnByZXZlbnREZWZhdWx0KCk7CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykgewogICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gb25TY3JvbGwoKSB7CiAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHdyYXBwZXJFbCwKICAgICAgICAgICAgcnRsVHJhbnNsYXRlLAogICAgICAgICAgICBlbmFibGVkCiAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICBpZiAoIWVuYWJsZWQpIHJldHVybjsKICAgICAgICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlOwoKICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7CiAgICAgICAgICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbExlZnQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsVG9wOwogICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCgoKICAgICAgICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gMCkgc3dpcGVyLnRyYW5zbGF0ZSA9IDA7CiAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7CiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTsKICAgICAgICBsZXQgbmV3UHJvZ3Jlc3M7CiAgICAgICAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7CgogICAgICAgIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkgewogICAgICAgICAgICBuZXdQcm9ncmVzcyA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbmV3UHJvZ3Jlc3MgPSAoc3dpcGVyLnRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjsKICAgICAgICB9CgogICAgICAgIGlmIChuZXdQcm9ncmVzcyAhPT0gc3dpcGVyLnByb2dyZXNzKSB7CiAgICAgICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpOwogICAgICAgIH0KCiAgICAgICAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGZhbHNlKTsKICAgIH0KCiAgICBsZXQgZHVtbXlFdmVudEF0dGFjaGVkID0gZmFsc2U7CgogICAgZnVuY3Rpb24gZHVtbXlFdmVudExpc3RlbmVyKCkgeyB9CgogICAgY29uc3QgZXZlbnRzID0gKHN3aXBlciwgbWV0aG9kKSA9PiB7CiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgcGFyYW1zLAogICAgICAgICAgICB0b3VjaEV2ZW50cywKICAgICAgICAgICAgZWwsCiAgICAgICAgICAgIHdyYXBwZXJFbCwKICAgICAgICAgICAgZGV2aWNlLAogICAgICAgICAgICBzdXBwb3J0CiAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICBjb25zdCBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkOwogICAgICAgIGNvbnN0IGRvbU1ldGhvZCA9IG1ldGhvZCA9PT0gJ29uJyA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJzsKICAgICAgICBjb25zdCBzd2lwZXJNZXRob2QgPSBtZXRob2Q7IC8vIFRvdWNoIEV2ZW50cwoKICAgICAgICBpZiAoIXN1cHBvcnQudG91Y2gpIHsKICAgICAgICAgICAgZWxbZG9tTWV0aG9kXSh0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpOwogICAgICAgICAgICBkb2N1bWVudFtkb21NZXRob2RdKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7CiAgICAgICAgICAgIGRvY3VtZW50W2RvbU1ldGhvZF0odG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7CiAgICAgICAgICAgICAgICBwYXNzaXZlOiB0cnVlLAogICAgICAgICAgICAgICAgY2FwdHVyZTogZmFsc2UKICAgICAgICAgICAgfSA6IGZhbHNlOwogICAgICAgICAgICBlbFtkb21NZXRob2RdKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpOwogICAgICAgICAgICBlbFtkb21NZXRob2RdKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7CiAgICAgICAgICAgICAgICBwYXNzaXZlOiBmYWxzZSwKICAgICAgICAgICAgICAgIGNhcHR1cmUKICAgICAgICAgICAgfSA6IGNhcHR1cmUpOwogICAgICAgICAgICBlbFtkb21NZXRob2RdKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7CgogICAgICAgICAgICBpZiAodG91Y2hFdmVudHMuY2FuY2VsKSB7CiAgICAgICAgICAgICAgICBlbFtkb21NZXRob2RdKHRvdWNoRXZlbnRzLmNhbmNlbCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7CiAgICAgICAgICAgIH0KICAgICAgICB9IC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzCgoKICAgICAgICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikgewogICAgICAgICAgICBlbFtkb21NZXRob2RdKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTsKICAgICAgICB9CgogICAgICAgIGlmIChwYXJhbXMuY3NzTW9kZSkgewogICAgICAgICAgICB3cmFwcGVyRWxbZG9tTWV0aG9kXSgnc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTsKICAgICAgICB9IC8vIFJlc2l6ZSBoYW5kbGVyCgoKICAgICAgICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7CiAgICAgICAgICAgIHN3aXBlcltzd2lwZXJNZXRob2RdKGRldmljZS5pb3MgfHwgZGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oJ29ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpOwogICAgICAgIH0KICAgIH07CgogICAgZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkgewogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgcGFyYW1zLAogICAgICAgICAgICBzdXBwb3J0CiAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICBzd2lwZXIub25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTsKICAgICAgICBzd2lwZXIub25Ub3VjaE1vdmUgPSBvblRvdWNoTW92ZS5iaW5kKHN3aXBlcik7CiAgICAgICAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTsKCiAgICAgICAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7CiAgICAgICAgICAgIHN3aXBlci5vblNjcm9sbCA9IG9uU2Nyb2xsLmJpbmQoc3dpcGVyKTsKICAgICAgICB9CgogICAgICAgIHN3aXBlci5vbkNsaWNrID0gb25DbGljay5iaW5kKHN3aXBlcik7CgogICAgICAgIGlmIChzdXBwb3J0LnRvdWNoICYmICFkdW1teUV2ZW50QXR0YWNoZWQpIHsKICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGR1bW15RXZlbnRMaXN0ZW5lcik7CiAgICAgICAgICAgIGR1bW15RXZlbnRBdHRhY2hlZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBldmVudHMoc3dpcGVyLCAnb24nKTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZXRhY2hFdmVudHMoKSB7CiAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICBldmVudHMoc3dpcGVyLCAnb2ZmJyk7CiAgICB9CgogICAgdmFyIGV2ZW50cyQxID0gewogICAgICAgIGF0dGFjaEV2ZW50cywKICAgICAgICBkZXRhY2hFdmVudHMKICAgIH07CgogICAgY29uc3QgaXNHcmlkRW5hYmxlZCA9IChzd2lwZXIsIHBhcmFtcykgPT4gewogICAgICAgIHJldHVybiBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTsKICAgIH07CgogICAgZnVuY3Rpb24gc2V0QnJlYWtwb2ludCgpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgYWN0aXZlSW5kZXgsCiAgICAgICAgICAgIGluaXRpYWxpemVkLAogICAgICAgICAgICBsb29wZWRTbGlkZXMgPSAwLAogICAgICAgICAgICBwYXJhbXMsCiAgICAgICAgICAgICRlbAogICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgY29uc3QgYnJlYWtwb2ludHMgPSBwYXJhbXMuYnJlYWtwb2ludHM7CiAgICAgICAgaWYgKCFicmVha3BvaW50cyB8fCBicmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhicmVha3BvaW50cykubGVuZ3RoID09PSAwKSByZXR1cm47IC8vIEdldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGggYW5kIHVwZGF0ZSBwYXJhbWV0ZXJzCgogICAgICAgIGNvbnN0IGJyZWFrcG9pbnQgPSBzd2lwZXIuZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgc3dpcGVyLnBhcmFtcy5icmVha3BvaW50c0Jhc2UsIHN3aXBlci5lbCk7CiAgICAgICAgaWYgKCFicmVha3BvaW50IHx8IHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9PT0gYnJlYWtwb2ludCkgcmV0dXJuOwogICAgICAgIGNvbnN0IGJyZWFrcG9pbnRPbmx5UGFyYW1zID0gYnJlYWtwb2ludCBpbiBicmVha3BvaW50cyA/IGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdIDogdW5kZWZpbmVkOwogICAgICAgIGNvbnN0IGJyZWFrcG9pbnRQYXJhbXMgPSBicmVha3BvaW50T25seVBhcmFtcyB8fCBzd2lwZXIub3JpZ2luYWxQYXJhbXM7CiAgICAgICAgY29uc3Qgd2FzTXVsdGlSb3cgPSBpc0dyaWRFbmFibGVkKHN3aXBlciwgcGFyYW1zKTsKICAgICAgICBjb25zdCBpc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIGJyZWFrcG9pbnRQYXJhbXMpOwogICAgICAgIGNvbnN0IHdhc0VuYWJsZWQgPSBwYXJhbXMuZW5hYmxlZDsKCiAgICAgICAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7CiAgICAgICAgICAgICRlbC5yZW1vdmVDbGFzcyhgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkICR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKTsKICAgICAgICAgICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7CiAgICAgICAgfSBlbHNlIGlmICghd2FzTXVsdGlSb3cgJiYgaXNNdWx0aVJvdykgewogICAgICAgICAgICAkZWwuYWRkQ2xhc3MoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGApOwoKICAgICAgICAgICAgaWYgKGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJyB8fCAhYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicpIHsKICAgICAgICAgICAgICAgICRlbC5hZGRDbGFzcyhgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTsKICAgICAgICB9IC8vIFRvZ2dsZSBuYXZpZ2F0aW9uLCBwYWdpbmF0aW9uLCBzY3JvbGxiYXIKCgogICAgICAgIFsnbmF2aWdhdGlvbicsICdwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmZvckVhY2gocHJvcCA9PiB7CiAgICAgICAgICAgIGNvbnN0IHdhc01vZHVsZUVuYWJsZWQgPSBwYXJhbXNbcHJvcF0gJiYgcGFyYW1zW3Byb3BdLmVuYWJsZWQ7CiAgICAgICAgICAgIGNvbnN0IGlzTW9kdWxlRW5hYmxlZCA9IGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0gJiYgYnJlYWtwb2ludFBhcmFtc1twcm9wXS5lbmFibGVkOwoKICAgICAgICAgICAgaWYgKHdhc01vZHVsZUVuYWJsZWQgJiYgIWlzTW9kdWxlRW5hYmxlZCkgewogICAgICAgICAgICAgICAgc3dpcGVyW3Byb3BdLmRpc2FibGUoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCF3YXNNb2R1bGVFbmFibGVkICYmIGlzTW9kdWxlRW5hYmxlZCkgewogICAgICAgICAgICAgICAgc3dpcGVyW3Byb3BdLmVuYWJsZSgpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgY29uc3QgZGlyZWN0aW9uQ2hhbmdlZCA9IGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICYmIGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICE9PSBwYXJhbXMuZGlyZWN0aW9uOwogICAgICAgIGNvbnN0IG5lZWRzUmVMb29wID0gcGFyYW1zLmxvb3AgJiYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgfHwgZGlyZWN0aW9uQ2hhbmdlZCk7CgogICAgICAgIGlmIChkaXJlY3Rpb25DaGFuZ2VkICYmIGluaXRpYWxpemVkKSB7CiAgICAgICAgICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTsKICAgICAgICB9CgogICAgICAgIGV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTsKICAgICAgICBjb25zdCBpc0VuYWJsZWQgPSBzd2lwZXIucGFyYW1zLmVuYWJsZWQ7CiAgICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHsKICAgICAgICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsCiAgICAgICAgICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LAogICAgICAgICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldgogICAgICAgIH0pOwoKICAgICAgICBpZiAod2FzRW5hYmxlZCAmJiAhaXNFbmFibGVkKSB7CiAgICAgICAgICAgIHN3aXBlci5kaXNhYmxlKCk7CiAgICAgICAgfSBlbHNlIGlmICghd2FzRW5hYmxlZCAmJiBpc0VuYWJsZWQpIHsKICAgICAgICAgICAgc3dpcGVyLmVuYWJsZSgpOwogICAgICAgIH0KCiAgICAgICAgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID0gYnJlYWtwb2ludDsKICAgICAgICBzd2lwZXIuZW1pdCgnX2JlZm9yZUJyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTsKCiAgICAgICAgaWYgKG5lZWRzUmVMb29wICYmIGluaXRpYWxpemVkKSB7CiAgICAgICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpOwogICAgICAgICAgICBzd2lwZXIubG9vcENyZWF0ZSgpOwogICAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7CiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gbG9vcGVkU2xpZGVzICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpOwogICAgICAgIH0KCiAgICAgICAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBiYXNlLCBjb250YWluZXJFbCkgewogICAgICAgIGlmIChiYXNlID09PSB2b2lkIDApIHsKICAgICAgICAgICAgYmFzZSA9ICd3aW5kb3cnOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFicmVha3BvaW50cyB8fCBiYXNlID09PSAnY29udGFpbmVyJyAmJiAhY29udGFpbmVyRWwpIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgbGV0IGJyZWFrcG9pbnQgPSBmYWxzZTsKICAgICAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTsKICAgICAgICBjb25zdCBjdXJyZW50SGVpZ2h0ID0gYmFzZSA9PT0gJ3dpbmRvdycgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiBjb250YWluZXJFbC5jbGllbnRIZWlnaHQ7CiAgICAgICAgY29uc3QgcG9pbnRzID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLm1hcChwb2ludCA9PiB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgcG9pbnQgPT09ICdzdHJpbmcnICYmIHBvaW50LmluZGV4T2YoJ0AnKSA9PT0gMCkgewogICAgICAgICAgICAgICAgY29uc3QgbWluUmF0aW8gPSBwYXJzZUZsb2F0KHBvaW50LnN1YnN0cigxKSk7CiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN1cnJlbnRIZWlnaHQgKiBtaW5SYXRpbzsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgcG9pbnQKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICB2YWx1ZTogcG9pbnQsCiAgICAgICAgICAgICAgICBwb2ludAogICAgICAgICAgICB9OwogICAgICAgIH0pOwogICAgICAgIHBvaW50cy5zb3J0KChhLCBiKSA9PiBwYXJzZUludChhLnZhbHVlLCAxMCkgLSBwYXJzZUludChiLnZhbHVlLCAxMCkpOwoKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBwb2ludCwKICAgICAgICAgICAgICAgIHZhbHVlCiAgICAgICAgICAgIH0gPSBwb2ludHNbaV07CgogICAgICAgICAgICBpZiAoYmFzZSA9PT0gJ3dpbmRvdycpIHsKICAgICAgICAgICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShgKG1pbi13aWR0aDogJHt2YWx1ZX1weClgKS5tYXRjaGVzKSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIDw9IGNvbnRhaW5lckVsLmNsaWVudFdpZHRoKSB7CiAgICAgICAgICAgICAgICBicmVha3BvaW50ID0gcG9pbnQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJldHVybiBicmVha3BvaW50IHx8ICdtYXgnOwogICAgfQoKICAgIHZhciBicmVha3BvaW50cyA9IHsKICAgICAgICBzZXRCcmVha3BvaW50LAogICAgICAgIGdldEJyZWFrcG9pbnQKICAgIH07CgogICAgZnVuY3Rpb24gcHJlcGFyZUNsYXNzZXMoZW50cmllcywgcHJlZml4KSB7CiAgICAgICAgY29uc3QgcmVzdWx0Q2xhc3NlcyA9IFtdOwogICAgICAgIGVudHJpZXMuZm9yRWFjaChpdGVtID0+IHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0JykgewogICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaChjbGFzc05hbWVzID0+IHsKICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbVtjbGFzc05hbWVzXSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gcmVzdWx0Q2xhc3NlczsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGRDbGFzc2VzKCkgewogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgewogICAgICAgICAgICBjbGFzc05hbWVzLAogICAgICAgICAgICBwYXJhbXMsCiAgICAgICAgICAgIHJ0bCwKICAgICAgICAgICAgJGVsLAogICAgICAgICAgICBkZXZpY2UsCiAgICAgICAgICAgIHN1cHBvcnQKICAgICAgICB9ID0gc3dpcGVyOyAvLyBwcmV0dGllci1pZ25vcmUKCiAgICAgICAgY29uc3Qgc3VmZml4ZXMgPSBwcmVwYXJlQ2xhc3NlcyhbJ2luaXRpYWxpemVkJywgcGFyYW1zLmRpcmVjdGlvbiwgewogICAgICAgICAgICAncG9pbnRlci1ldmVudHMnOiAhc3VwcG9ydC50b3VjaAogICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICdmcmVlLW1vZGUnOiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICdhdXRvaGVpZ2h0JzogcGFyYW1zLmF1dG9IZWlnaHQKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgJ3J0bCc6IHJ0bAogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAnZ3JpZCc6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICdncmlkLWNvbHVtbic6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICdhbmRyb2lkJzogZGV2aWNlLmFuZHJvaWQKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgJ2lvcyc6IGRldmljZS5pb3MKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgJ2Nzcy1tb2RlJzogcGFyYW1zLmNzc01vZGUKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgJ2NlbnRlcmVkJzogcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICd3YXRjaC1wcm9ncmVzcyc6IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzCiAgICAgICAgICAgIH1dLCBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyk7CiAgICAgICAgY2xhc3NOYW1lcy5wdXNoKC4uLnN1ZmZpeGVzKTsKICAgICAgICAkZWwuYWRkQ2xhc3MoWy4uLmNsYXNzTmFtZXNdLmpvaW4oJyAnKSk7CiAgICAgICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7CiAgICB9CgogICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcygpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgJGVsLAogICAgICAgICAgICBjbGFzc05hbWVzCiAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICAkZWwucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpOwogICAgICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpOwogICAgfQoKICAgIHZhciBjbGFzc2VzID0gewogICAgICAgIGFkZENsYXNzZXMsCiAgICAgICAgcmVtb3ZlQ2xhc3NlcwogICAgfTsKCiAgICBmdW5jdGlvbiBsb2FkSW1hZ2UoaW1hZ2VFbCwgc3JjLCBzcmNzZXQsIHNpemVzLCBjaGVja0ZvckNvbXBsZXRlLCBjYWxsYmFjaykgewogICAgICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpOwogICAgICAgIGxldCBpbWFnZTsKCiAgICAgICAgZnVuY3Rpb24gb25SZWFkeSgpIHsKICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpOwogICAgICAgIH0KCiAgICAgICAgY29uc3QgaXNQaWN0dXJlID0gJChpbWFnZUVsKS5wYXJlbnQoJ3BpY3R1cmUnKVswXTsKCiAgICAgICAgaWYgKCFpc1BpY3R1cmUgJiYgKCFpbWFnZUVsLmNvbXBsZXRlIHx8ICFjaGVja0ZvckNvbXBsZXRlKSkgewogICAgICAgICAgICBpZiAoc3JjKSB7CiAgICAgICAgICAgICAgICBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKTsKICAgICAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9IG9uUmVhZHk7CiAgICAgICAgICAgICAgICBpbWFnZS5vbmVycm9yID0gb25SZWFkeTsKCiAgICAgICAgICAgICAgICBpZiAoc2l6ZXMpIHsKICAgICAgICAgICAgICAgICAgICBpbWFnZS5zaXplcyA9IHNpemVzOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzcmNzZXQpIHsKICAgICAgICAgICAgICAgICAgICBpbWFnZS5zcmNzZXQgPSBzcmNzZXQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHNyYykgewogICAgICAgICAgICAgICAgICAgIGltYWdlLnNyYyA9IHNyYzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG9uUmVhZHkoKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGltYWdlIGFscmVhZHkgbG9hZGVkLi4uCiAgICAgICAgICAgIG9uUmVhZHkoKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcHJlbG9hZEltYWdlcygpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIHN3aXBlci5pbWFnZXNUb0xvYWQgPSBzd2lwZXIuJGVsLmZpbmQoJ2ltZycpOwoKICAgICAgICBmdW5jdGlvbiBvblJlYWR5KCkgewogICAgICAgICAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuOwogICAgICAgICAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCAhPT0gdW5kZWZpbmVkKSBzd2lwZXIuaW1hZ2VzTG9hZGVkICs9IDE7CgogICAgICAgICAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCA9PT0gc3dpcGVyLmltYWdlc1RvTG9hZC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVwZGF0ZU9uSW1hZ2VzUmVhZHkpIHN3aXBlci51cGRhdGUoKTsKICAgICAgICAgICAgICAgIHN3aXBlci5lbWl0KCdpbWFnZXNSZWFkeScpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5pbWFnZXNUb0xvYWRbaV07CiAgICAgICAgICAgIHN3aXBlci5sb2FkSW1hZ2UoaW1hZ2VFbCwgaW1hZ2VFbC5jdXJyZW50U3JjIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzcmMnKSwgaW1hZ2VFbC5zcmNzZXQgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpLCBpbWFnZUVsLnNpemVzIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzaXplcycpLCB0cnVlLCBvblJlYWR5KTsKICAgICAgICB9CiAgICB9CgogICAgdmFyIGltYWdlcyA9IHsKICAgICAgICBsb2FkSW1hZ2UsCiAgICAgICAgcHJlbG9hZEltYWdlcwogICAgfTsKCiAgICBmdW5jdGlvbiBjaGVja092ZXJmbG93KCkgewogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgewogICAgICAgICAgICBpc0xvY2tlZDogd2FzTG9ja2VkLAogICAgICAgICAgICBwYXJhbXMKICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgc2xpZGVzT2Zmc2V0QmVmb3JlCiAgICAgICAgfSA9IHBhcmFtczsKCiAgICAgICAgaWYgKHNsaWRlc09mZnNldEJlZm9yZSkgewogICAgICAgICAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTsKICAgICAgICAgICAgY29uc3QgbGFzdFNsaWRlUmlnaHRFZGdlID0gc3dpcGVyLnNsaWRlc0dyaWRbbGFzdFNsaWRlSW5kZXhdICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzbGlkZXNPZmZzZXRCZWZvcmUgKiAyOwogICAgICAgICAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc2l6ZSA+IGxhc3RTbGlkZVJpZ2h0RWRnZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSkgewogICAgICAgICAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkgewogICAgICAgICAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSAhc3dpcGVyLmlzTG9ja2VkOwogICAgICAgIH0KCiAgICAgICAgaWYgKHdhc0xvY2tlZCAmJiB3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkgewogICAgICAgICAgICBzd2lwZXIuaXNFbmQgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIGlmICh3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkgewogICAgICAgICAgICBzd2lwZXIuZW1pdChzd2lwZXIuaXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJyk7CiAgICAgICAgfQogICAgfQoKICAgIHZhciBjaGVja092ZXJmbG93JDEgPSB7CiAgICAgICAgY2hlY2tPdmVyZmxvdwogICAgfTsKCiAgICB2YXIgZGVmYXVsdHMgPSB7CiAgICAgICAgaW5pdDogdHJ1ZSwKICAgICAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJywKICAgICAgICB0b3VjaEV2ZW50c1RhcmdldDogJ3dyYXBwZXInLAogICAgICAgIGluaXRpYWxTbGlkZTogMCwKICAgICAgICBzcGVlZDogMzAwLAogICAgICAgIGNzc01vZGU6IGZhbHNlLAogICAgICAgIHVwZGF0ZU9uV2luZG93UmVzaXplOiB0cnVlLAogICAgICAgIHJlc2l6ZU9ic2VydmVyOiB0cnVlLAogICAgICAgIG5lc3RlZDogZmFsc2UsCiAgICAgICAgY3JlYXRlRWxlbWVudHM6IGZhbHNlLAogICAgICAgIGVuYWJsZWQ6IHRydWUsCiAgICAgICAgZm9jdXNhYmxlRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvLCBsYWJlbCcsCiAgICAgICAgLy8gT3ZlcnJpZGVzCiAgICAgICAgd2lkdGg6IG51bGwsCiAgICAgICAgaGVpZ2h0OiBudWxsLAogICAgICAgIC8vCiAgICAgICAgcHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uOiBmYWxzZSwKICAgICAgICAvLyBzc3IKICAgICAgICB1c2VyQWdlbnQ6IG51bGwsCiAgICAgICAgdXJsOiBudWxsLAogICAgICAgIC8vIFRvIHN1cHBvcnQgaU9TJ3Mgc3dpcGUtdG8tZ28tYmFjayBnZXN0dXJlICh3aGVuIGJlaW5nIHVzZWQgaW4tYXBwKS4KICAgICAgICBlZGdlU3dpcGVEZXRlY3Rpb246IGZhbHNlLAogICAgICAgIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsCiAgICAgICAgLy8gQXV0b2hlaWdodAogICAgICAgIGF1dG9IZWlnaHQ6IGZhbHNlLAogICAgICAgIC8vIFNldCB3cmFwcGVyIHdpZHRoCiAgICAgICAgc2V0V3JhcHBlclNpemU6IGZhbHNlLAogICAgICAgIC8vIFZpcnR1YWwgVHJhbnNsYXRlCiAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogZmFsc2UsCiAgICAgICAgLy8gRWZmZWN0cwogICAgICAgIGVmZmVjdDogJ3NsaWRlJywKICAgICAgICAvLyAnc2xpZGUnIG9yICdmYWRlJyBvciAnY3ViZScgb3IgJ2NvdmVyZmxvdycgb3IgJ2ZsaXAnCiAgICAgICAgLy8gQnJlYWtwb2ludHMKICAgICAgICBicmVha3BvaW50czogdW5kZWZpbmVkLAogICAgICAgIGJyZWFrcG9pbnRzQmFzZTogJ3dpbmRvdycsCiAgICAgICAgLy8gU2xpZGVzIGdyaWQKICAgICAgICBzcGFjZUJldHdlZW46IDAsCiAgICAgICAgc2xpZGVzUGVyVmlldzogMSwKICAgICAgICBzbGlkZXNQZXJHcm91cDogMSwKICAgICAgICBzbGlkZXNQZXJHcm91cFNraXA6IDAsCiAgICAgICAgc2xpZGVzUGVyR3JvdXBBdXRvOiBmYWxzZSwKICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsCiAgICAgICAgY2VudGVyZWRTbGlkZXNCb3VuZHM6IGZhbHNlLAogICAgICAgIHNsaWRlc09mZnNldEJlZm9yZTogMCwKICAgICAgICAvLyBpbiBweAogICAgICAgIHNsaWRlc09mZnNldEFmdGVyOiAwLAogICAgICAgIC8vIGluIHB4CiAgICAgICAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSwKICAgICAgICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6IGZhbHNlLAogICAgICAgIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93CiAgICAgICAgd2F0Y2hPdmVyZmxvdzogdHJ1ZSwKICAgICAgICAvLyBSb3VuZCBsZW5ndGgKICAgICAgICByb3VuZExlbmd0aHM6IGZhbHNlLAogICAgICAgIC8vIFRvdWNoZXMKICAgICAgICB0b3VjaFJhdGlvOiAxLAogICAgICAgIHRvdWNoQW5nbGU6IDQ1LAogICAgICAgIHNpbXVsYXRlVG91Y2g6IHRydWUsCiAgICAgICAgc2hvcnRTd2lwZXM6IHRydWUsCiAgICAgICAgbG9uZ1N3aXBlczogdHJ1ZSwKICAgICAgICBsb25nU3dpcGVzUmF0aW86IDAuNSwKICAgICAgICBsb25nU3dpcGVzTXM6IDMwMCwKICAgICAgICBmb2xsb3dGaW5nZXI6IHRydWUsCiAgICAgICAgYWxsb3dUb3VjaE1vdmU6IHRydWUsCiAgICAgICAgdGhyZXNob2xkOiAwLAogICAgICAgIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsCiAgICAgICAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLAogICAgICAgIHRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0OiBmYWxzZSwKICAgICAgICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSwKICAgICAgICAvLyBVbmlxdWUgTmF2aWdhdGlvbiBFbGVtZW50cwogICAgICAgIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLAogICAgICAgIC8vIFJlc2lzdGFuY2UKICAgICAgICByZXNpc3RhbmNlOiB0cnVlLAogICAgICAgIHJlc2lzdGFuY2VSYXRpbzogMC44NSwKICAgICAgICAvLyBQcm9ncmVzcwogICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLAogICAgICAgIC8vIEN1cnNvcgogICAgICAgIGdyYWJDdXJzb3I6IGZhbHNlLAogICAgICAgIC8vIENsaWNrcwogICAgICAgIHByZXZlbnRDbGlja3M6IHRydWUsCiAgICAgICAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLAogICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLAogICAgICAgIC8vIEltYWdlcwogICAgICAgIHByZWxvYWRJbWFnZXM6IHRydWUsCiAgICAgICAgdXBkYXRlT25JbWFnZXNSZWFkeTogdHJ1ZSwKICAgICAgICAvLyBsb29wCiAgICAgICAgbG9vcDogZmFsc2UsCiAgICAgICAgbG9vcEFkZGl0aW9uYWxTbGlkZXM6IDAsCiAgICAgICAgbG9vcGVkU2xpZGVzOiBudWxsLAogICAgICAgIGxvb3BlZFNsaWRlc0xpbWl0OiB0cnVlLAogICAgICAgIGxvb3BGaWxsR3JvdXBXaXRoQmxhbms6IGZhbHNlLAogICAgICAgIGxvb3BQcmV2ZW50c1NsaWRlOiB0cnVlLAogICAgICAgIC8vIHJld2luZAogICAgICAgIHJld2luZDogZmFsc2UsCiAgICAgICAgLy8gU3dpcGluZy9ubyBzd2lwaW5nCiAgICAgICAgYWxsb3dTbGlkZVByZXY6IHRydWUsCiAgICAgICAgYWxsb3dTbGlkZU5leHQ6IHRydWUsCiAgICAgICAgc3dpcGVIYW5kbGVyOiBudWxsLAogICAgICAgIC8vICcuc3dpcGUtaGFuZGxlcicsCiAgICAgICAgbm9Td2lwaW5nOiB0cnVlLAogICAgICAgIG5vU3dpcGluZ0NsYXNzOiAnc3dpcGVyLW5vLXN3aXBpbmcnLAogICAgICAgIG5vU3dpcGluZ1NlbGVjdG9yOiBudWxsLAogICAgICAgIC8vIFBhc3NpdmUgTGlzdGVuZXJzCiAgICAgICAgcGFzc2l2ZUxpc3RlbmVyczogdHJ1ZSwKICAgICAgICBtYXhCYWNrZmFjZUhpZGRlblNsaWRlczogMTAsCiAgICAgICAgLy8gTlMKICAgICAgICBjb250YWluZXJNb2RpZmllckNsYXNzOiAnc3dpcGVyLScsCiAgICAgICAgLy8gTkVXCiAgICAgICAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsCiAgICAgICAgc2xpZGVCbGFua0NsYXNzOiAnc3dpcGVyLXNsaWRlLWludmlzaWJsZS1ibGFuaycsCiAgICAgICAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLAogICAgICAgIHNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLWFjdGl2ZScsCiAgICAgICAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsCiAgICAgICAgc2xpZGVEdXBsaWNhdGVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUnLAogICAgICAgIHNsaWRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLW5leHQnLAogICAgICAgIHNsaWRlRHVwbGljYXRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1uZXh0JywKICAgICAgICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JywKICAgICAgICBzbGlkZUR1cGxpY2F0ZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtcHJldicsCiAgICAgICAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLAogICAgICAgIC8vIENhbGxiYWNrcwogICAgICAgIHJ1bkNhbGxiYWNrc09uSW5pdDogdHJ1ZSwKICAgICAgICAvLyBJbnRlcm5hbHMKICAgICAgICBfZW1pdENsYXNzZXM6IGZhbHNlCiAgICB9OwoKICAgIGZ1bmN0aW9uIG1vZHVsZUV4dGVuZFBhcmFtcyhwYXJhbXMsIGFsbE1vZHVsZXNQYXJhbXMpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gZXh0ZW5kUGFyYW1zKG9iaikgewogICAgICAgICAgICBpZiAob2JqID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIG9iaiA9IHt9OwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBtb2R1bGVQYXJhbU5hbWUgPSBPYmplY3Qua2V5cyhvYmopWzBdOwogICAgICAgICAgICBjb25zdCBtb2R1bGVQYXJhbXMgPSBvYmpbbW9kdWxlUGFyYW1OYW1lXTsKCiAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kdWxlUGFyYW1zICE9PSAnb2JqZWN0JyB8fCBtb2R1bGVQYXJhbXMgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoWyduYXZpZ2F0aW9uJywgJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uaW5kZXhPZihtb2R1bGVQYXJhbU5hbWUpID49IDAgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHsKICAgICAgICAgICAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0gewogICAgICAgICAgICAgICAgICAgIGF1dG86IHRydWUKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghKG1vZHVsZVBhcmFtTmFtZSBpbiBwYXJhbXMgJiYgJ2VuYWJsZWQnIGluIG1vZHVsZVBhcmFtcykpIHsKICAgICAgICAgICAgICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAocGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHsKICAgICAgICAgICAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0gewogICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09ICdvYmplY3QnICYmICEoJ2VuYWJsZWQnIGluIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSkgewogICAgICAgICAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCA9IHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0gewogICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UKICAgICAgICAgICAgfTsKICAgICAgICAgICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7CiAgICAgICAgfTsKICAgIH0KCiAgICAvKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246ICJvZmYiICovCiAgICBjb25zdCBwcm90b3R5cGVzID0gewogICAgICAgIGV2ZW50c0VtaXR0ZXIsCiAgICAgICAgdXBkYXRlLAogICAgICAgIHRyYW5zbGF0ZSwKICAgICAgICB0cmFuc2l0aW9uLAogICAgICAgIHNsaWRlLAogICAgICAgIGxvb3AsCiAgICAgICAgZ3JhYkN1cnNvciwKICAgICAgICBldmVudHM6IGV2ZW50cyQxLAogICAgICAgIGJyZWFrcG9pbnRzLAogICAgICAgIGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3ckMSwKICAgICAgICBjbGFzc2VzLAogICAgICAgIGltYWdlcwogICAgfTsKICAgIGNvbnN0IGV4dGVuZGVkRGVmYXVsdHMgPSB7fTsKCiAgICBjbGFzcyBTd2lwZXIgewogICAgICAgIGNvbnN0cnVjdG9yKCkgewogICAgICAgICAgICBsZXQgZWw7CiAgICAgICAgICAgIGxldCBwYXJhbXM7CgogICAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmdzWzBdKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnKSB7CiAgICAgICAgICAgICAgICBwYXJhbXMgPSBhcmdzWzBdOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgW2VsLCBwYXJhbXNdID0gYXJnczsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9OwogICAgICAgICAgICBwYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7CiAgICAgICAgICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDsKCiAgICAgICAgICAgIGlmIChwYXJhbXMuZWwgJiYgJChwYXJhbXMuZWwpLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHN3aXBlcnMgPSBbXTsKICAgICAgICAgICAgICAgICQocGFyYW1zLmVsKS5lYWNoKGNvbnRhaW5lckVsID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcywgewogICAgICAgICAgICAgICAgICAgICAgICBlbDogY29udGFpbmVyRWwKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBzd2lwZXJzLnB1c2gobmV3IFN3aXBlcihuZXdQYXJhbXMpKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIHN3aXBlcnM7CiAgICAgICAgICAgIH0gLy8gU3dpcGVyIEluc3RhbmNlCgoKICAgICAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICAgICAgc3dpcGVyLl9fc3dpcGVyX18gPSB0cnVlOwogICAgICAgICAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTsKICAgICAgICAgICAgc3dpcGVyLmRldmljZSA9IGdldERldmljZSh7CiAgICAgICAgICAgICAgICB1c2VyQWdlbnQ6IHBhcmFtcy51c2VyQWdlbnQKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpOwogICAgICAgICAgICBzd2lwZXIuZXZlbnRzTGlzdGVuZXJzID0ge307CiAgICAgICAgICAgIHN3aXBlci5ldmVudHNBbnlMaXN0ZW5lcnMgPSBbXTsKICAgICAgICAgICAgc3dpcGVyLm1vZHVsZXMgPSBbLi4uc3dpcGVyLl9fbW9kdWxlc19fXTsKCiAgICAgICAgICAgIGlmIChwYXJhbXMubW9kdWxlcyAmJiBBcnJheS5pc0FycmF5KHBhcmFtcy5tb2R1bGVzKSkgewogICAgICAgICAgICAgICAgc3dpcGVyLm1vZHVsZXMucHVzaCguLi5wYXJhbXMubW9kdWxlcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IGFsbE1vZHVsZXNQYXJhbXMgPSB7fTsKICAgICAgICAgICAgc3dpcGVyLm1vZHVsZXMuZm9yRWFjaChtb2QgPT4gewogICAgICAgICAgICAgICAgbW9kKHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kUGFyYW1zOiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSwKICAgICAgICAgICAgICAgICAgICBvbjogc3dpcGVyLm9uLmJpbmQoc3dpcGVyKSwKICAgICAgICAgICAgICAgICAgICBvbmNlOiBzd2lwZXIub25jZS5iaW5kKHN3aXBlciksCiAgICAgICAgICAgICAgICAgICAgb2ZmOiBzd2lwZXIub2ZmLmJpbmQoc3dpcGVyKSwKICAgICAgICAgICAgICAgICAgICBlbWl0OiBzd2lwZXIuZW1pdC5iaW5kKHN3aXBlcikKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXMKCiAgICAgICAgICAgIGNvbnN0IHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMsIGFsbE1vZHVsZXNQYXJhbXMpOyAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBwYXNzZWQgcGFyYW1zCgogICAgICAgICAgICBzd2lwZXIucGFyYW1zID0gZXh0ZW5kKHt9LCBzd2lwZXJQYXJhbXMsIGV4dGVuZGVkRGVmYXVsdHMsIHBhcmFtcyk7CiAgICAgICAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyLnBhcmFtcyk7CiAgICAgICAgICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7IC8vIGFkZCBldmVudCBsaXN0ZW5lcnMKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub24pIHsKICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHN3aXBlci5wYXJhbXMub24pLmZvckVhY2goZXZlbnROYW1lID0+IHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIub24oZXZlbnROYW1lLCBzd2lwZXIucGFyYW1zLm9uW2V2ZW50TmFtZV0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub25BbnkpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5vbkFueShzd2lwZXIucGFyYW1zLm9uQW55KTsKICAgICAgICAgICAgfSAvLyBTYXZlIERvbSBsaWIKCgogICAgICAgICAgICBzd2lwZXIuJCA9ICQ7IC8vIEV4dGVuZCBTd2lwZXIKCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7CiAgICAgICAgICAgICAgICBlbmFibGVkOiBzd2lwZXIucGFyYW1zLmVuYWJsZWQsCiAgICAgICAgICAgICAgICBlbCwKICAgICAgICAgICAgICAgIC8vIENsYXNzZXMKICAgICAgICAgICAgICAgIGNsYXNzTmFtZXM6IFtdLAogICAgICAgICAgICAgICAgLy8gU2xpZGVzCiAgICAgICAgICAgICAgICBzbGlkZXM6ICQoKSwKICAgICAgICAgICAgICAgIHNsaWRlc0dyaWQ6IFtdLAogICAgICAgICAgICAgICAgc25hcEdyaWQ6IFtdLAogICAgICAgICAgICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSwKCiAgICAgICAgICAgICAgICAvLyBpc0RpcmVjdGlvbgogICAgICAgICAgICAgICAgaXNIb3Jpem9udGFsKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnOwogICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICBpc1ZlcnRpY2FsKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJzsKICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgLy8gSW5kZXhlcwogICAgICAgICAgICAgICAgYWN0aXZlSW5kZXg6IDAsCiAgICAgICAgICAgICAgICByZWFsSW5kZXg6IDAsCiAgICAgICAgICAgICAgICAvLwogICAgICAgICAgICAgICAgaXNCZWdpbm5pbmc6IHRydWUsCiAgICAgICAgICAgICAgICBpc0VuZDogZmFsc2UsCiAgICAgICAgICAgICAgICAvLyBQcm9wcwogICAgICAgICAgICAgICAgdHJhbnNsYXRlOiAwLAogICAgICAgICAgICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsCiAgICAgICAgICAgICAgICBwcm9ncmVzczogMCwKICAgICAgICAgICAgICAgIHZlbG9jaXR5OiAwLAogICAgICAgICAgICAgICAgYW5pbWF0aW5nOiBmYWxzZSwKICAgICAgICAgICAgICAgIC8vIExvY2tzCiAgICAgICAgICAgICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCwKICAgICAgICAgICAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LAogICAgICAgICAgICAgICAgLy8gVG91Y2ggRXZlbnRzCiAgICAgICAgICAgICAgICB0b3VjaEV2ZW50czogZnVuY3Rpb24gdG91Y2hFdmVudHMoKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG91Y2ggPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJ107CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVza3RvcCA9IFsncG9pbnRlcmRvd24nLCAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJ107CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB0b3VjaFswXSwKICAgICAgICAgICAgICAgICAgICAgICAgbW92ZTogdG91Y2hbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogdG91Y2hbMl0sCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbDogdG91Y2hbM10KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkZXNrdG9wWzBdLAogICAgICAgICAgICAgICAgICAgICAgICBtb3ZlOiBkZXNrdG9wWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGRlc2t0b3BbMl0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoID8gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggOiBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wOwogICAgICAgICAgICAgICAgfSgpLAogICAgICAgICAgICAgICAgdG91Y2hFdmVudHNEYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICAgIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRyYW5zbGF0ZTogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgYWxsb3dUaHJlc2hvbGRNb3ZlOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgLy8gRm9ybSBlbGVtZW50cyB0byBtYXRjaAogICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzOiBzd2lwZXIucGFyYW1zLmZvY3VzYWJsZUVsZW1lbnRzLAogICAgICAgICAgICAgICAgICAgIC8vIExhc3QgY2xpY2sgdGltZQogICAgICAgICAgICAgICAgICAgIGxhc3RDbGlja1RpbWU6IG5vdygpLAogICAgICAgICAgICAgICAgICAgIGNsaWNrVGltZW91dDogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICAgIC8vIFZlbG9jaXRpZXMKICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0aWVzOiBbXSwKICAgICAgICAgICAgICAgICAgICBhbGxvd01vbWVudHVtQm91bmNlOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgaXNUb3VjaEV2ZW50OiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIC8vIENsaWNrcwogICAgICAgICAgICAgICAgYWxsb3dDbGljazogdHJ1ZSwKICAgICAgICAgICAgICAgIC8vIFRvdWNoZXMKICAgICAgICAgICAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLAogICAgICAgICAgICAgICAgdG91Y2hlczogewogICAgICAgICAgICAgICAgICAgIHN0YXJ0WDogMCwKICAgICAgICAgICAgICAgICAgICBzdGFydFk6IDAsCiAgICAgICAgICAgICAgICAgICAgY3VycmVudFg6IDAsCiAgICAgICAgICAgICAgICAgICAgY3VycmVudFk6IDAsCiAgICAgICAgICAgICAgICAgICAgZGlmZjogMAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIC8vIEltYWdlcwogICAgICAgICAgICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSwKICAgICAgICAgICAgICAgIGltYWdlc0xvYWRlZDogMAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ19zd2lwZXInKTsgLy8gSW5pdAoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkgewogICAgICAgICAgICAgICAgc3dpcGVyLmluaXQoKTsKICAgICAgICAgICAgfSAvLyBSZXR1cm4gYXBwIGluc3RhbmNlCgoKICAgICAgICAgICAgcmV0dXJuIHN3aXBlcjsKICAgICAgICB9CgogICAgICAgIGVuYWJsZSgpIHsKICAgICAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICAgICAgaWYgKHN3aXBlci5lbmFibGVkKSByZXR1cm47CiAgICAgICAgICAgIHN3aXBlci5lbmFibGVkID0gdHJ1ZTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdlbmFibGUnKTsKICAgICAgICB9CgogICAgICAgIGRpc2FibGUoKSB7CiAgICAgICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjsKICAgICAgICAgICAgc3dpcGVyLmVuYWJsZWQgPSBmYWxzZTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHsKICAgICAgICAgICAgICAgIHN3aXBlci51bnNldEdyYWJDdXJzb3IoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ2Rpc2FibGUnKTsKICAgICAgICB9CgogICAgICAgIHNldFByb2dyZXNzKHByb2dyZXNzLCBzcGVlZCkgewogICAgICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHByb2dyZXNzLCAwKSwgMSk7CiAgICAgICAgICAgIGNvbnN0IG1pbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTsKICAgICAgICAgICAgY29uc3QgbWF4ID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpOwogICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gKG1heCAtIG1pbikgKiBwcm9ncmVzcyArIG1pbjsKICAgICAgICAgICAgc3dpcGVyLnRyYW5zbGF0ZVRvKGN1cnJlbnQsIHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcgPyAwIDogc3BlZWQpOwogICAgICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTsKICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTsKICAgICAgICB9CgogICAgICAgIGVtaXRDb250YWluZXJDbGFzc2VzKCkgewogICAgICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjsKICAgICAgICAgICAgY29uc3QgY2xzID0gc3dpcGVyLmVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihjbGFzc05hbWUgPT4gewogICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzTmFtZS5pbmRleE9mKCdzd2lwZXInKSA9PT0gMCB8fCBjbGFzc05hbWUuaW5kZXhPZihzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpID09PSAwOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ19jb250YWluZXJDbGFzc2VzJywgY2xzLmpvaW4oJyAnKSk7CiAgICAgICAgfQoKICAgICAgICBnZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCkgewogICAgICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgICAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuICcnOwogICAgICAgICAgICByZXR1cm4gc2xpZGVFbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHsKICAgICAgICAgICAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSA9PT0gMDsKICAgICAgICAgICAgfSkuam9pbignICcpOwogICAgICAgIH0KCiAgICAgICAgZW1pdFNsaWRlc0NsYXNzZXMoKSB7CiAgICAgICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuOwogICAgICAgICAgICBjb25zdCB1cGRhdGVzID0gW107CiAgICAgICAgICAgIHN3aXBlci5zbGlkZXMuZWFjaChzbGlkZUVsID0+IHsKICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBzd2lwZXIuZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpOwogICAgICAgICAgICAgICAgdXBkYXRlcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICBzbGlkZUVsLAogICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ19zbGlkZUNsYXNzJywgc2xpZGVFbCwgY2xhc3NOYW1lcyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3NlcycsIHVwZGF0ZXMpOwogICAgICAgIH0KCiAgICAgICAgc2xpZGVzUGVyVmlld0R5bmFtaWModmlldywgZXhhY3QpIHsKICAgICAgICAgICAgaWYgKHZpZXcgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgdmlldyA9ICdjdXJyZW50JzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGV4YWN0ID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIGV4YWN0ID0gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgICAgIHNsaWRlcywKICAgICAgICAgICAgICAgIHNsaWRlc0dyaWQsCiAgICAgICAgICAgICAgICBzbGlkZXNTaXplc0dyaWQsCiAgICAgICAgICAgICAgICBzaXplOiBzd2lwZXJTaXplLAogICAgICAgICAgICAgICAgYWN0aXZlSW5kZXgKICAgICAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICAgICAgbGV0IHNwdiA9IDE7CgogICAgICAgICAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7CiAgICAgICAgICAgICAgICBsZXQgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemU7CiAgICAgICAgICAgICAgICBsZXQgYnJlYWtMb29wOwoKICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7CiAgICAgICAgICAgICAgICAgICAgICAgIHNwdiArPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7CiAgICAgICAgICAgICAgICAgICAgICAgIHNwdiArPSAxOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKICAgICAgICAgICAgICAgIGlmICh2aWV3ID09PSAnY3VycmVudCcpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlSW5WaWV3ID0gZXhhY3QgPyBzbGlkZXNHcmlkW2ldICsgc2xpZGVzU2l6ZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplIDogc2xpZGVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZUluVmlldykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3B2ICs9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzCiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2xpZGVJblZpZXcgPSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSAtIHNsaWRlc0dyaWRbaV0gPCBzd2lwZXJTaXplOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5WaWV3KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcHYgKz0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHNwdjsKICAgICAgICB9CgogICAgICAgIHVwZGF0ZSgpIHsKICAgICAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuOwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBzbmFwR3JpZCwKICAgICAgICAgICAgICAgIHBhcmFtcwogICAgICAgICAgICB9ID0gc3dpcGVyOyAvLyBCcmVha3BvaW50cwoKICAgICAgICAgICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykgewogICAgICAgICAgICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNpemUoKTsKICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpOwogICAgICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTsKICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTsKCiAgICAgICAgICAgIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0ZVZhbHVlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgKiAtMSA6IHN3aXBlci50cmFuc2xhdGU7CiAgICAgICAgICAgICAgICBjb25zdCBuZXdUcmFuc2xhdGUgPSBNYXRoLm1pbihNYXRoLm1heCh0cmFuc2xhdGVWYWx1ZSwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTsKICAgICAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTsKICAgICAgICAgICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpOwogICAgICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbGV0IHRyYW5zbGF0ZWQ7CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQpIHsKICAgICAgICAgICAgICAgIHNldFRyYW5zbGF0ZSgpOwoKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHsKICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoIXRyYW5zbGF0ZWQpIHsKICAgICAgICAgICAgICAgICAgICBzZXRUcmFuc2xhdGUoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN3aXBlci5lbWl0KCd1cGRhdGUnKTsKICAgICAgICB9CgogICAgICAgIGNoYW5nZURpcmVjdGlvbihuZXdEaXJlY3Rpb24sIG5lZWRVcGRhdGUpIHsKICAgICAgICAgICAgaWYgKG5lZWRVcGRhdGUgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgbmVlZFVwZGF0ZSA9IHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnREaXJlY3Rpb24gPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbjsKCiAgICAgICAgICAgIGlmICghbmV3RGlyZWN0aW9uKSB7CiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKICAgICAgICAgICAgICAgIG5ld0RpcmVjdGlvbiA9IGN1cnJlbnREaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChuZXdEaXJlY3Rpb24gPT09IGN1cnJlbnREaXJlY3Rpb24gfHwgbmV3RGlyZWN0aW9uICE9PSAnaG9yaXpvbnRhbCcgJiYgbmV3RGlyZWN0aW9uICE9PSAndmVydGljYWwnKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc3dpcGVyOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzd2lwZXIuJGVsLnJlbW92ZUNsYXNzKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2N1cnJlbnREaXJlY3Rpb259YCkuYWRkQ2xhc3MoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7bmV3RGlyZWN0aW9ufWApOwogICAgICAgICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTsKICAgICAgICAgICAgc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247CiAgICAgICAgICAgIHN3aXBlci5zbGlkZXMuZWFjaChzbGlkZUVsID0+IHsKICAgICAgICAgICAgICAgIGlmIChuZXdEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHsKICAgICAgICAgICAgICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNsaWRlRWwuc3R5bGUuaGVpZ2h0ID0gJyc7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7CiAgICAgICAgICAgIGlmIChuZWVkVXBkYXRlKSBzd2lwZXIudXBkYXRlKCk7CiAgICAgICAgICAgIHJldHVybiBzd2lwZXI7CiAgICAgICAgfQoKICAgICAgICBjaGFuZ2VMYW5ndWFnZURpcmVjdGlvbihkaXJlY3Rpb24pIHsKICAgICAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICAgICAgaWYgKHN3aXBlci5ydGwgJiYgZGlyZWN0aW9uID09PSAncnRsJyB8fCAhc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdsdHInKSByZXR1cm47CiAgICAgICAgICAgIHN3aXBlci5ydGwgPSBkaXJlY3Rpb24gPT09ICdydGwnOwogICAgICAgICAgICBzd2lwZXIucnRsVHJhbnNsYXRlID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBzd2lwZXIucnRsOwoKICAgICAgICAgICAgaWYgKHN3aXBlci5ydGwpIHsKICAgICAgICAgICAgICAgIHN3aXBlci4kZWwuYWRkQ2xhc3MoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXJ0bGApOwogICAgICAgICAgICAgICAgc3dpcGVyLmVsLmRpciA9ICdydGwnOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc3dpcGVyLiRlbC5yZW1vdmVDbGFzcyhgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7CiAgICAgICAgICAgICAgICBzd2lwZXIuZWwuZGlyID0gJ2x0cic7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN3aXBlci51cGRhdGUoKTsKICAgICAgICB9CgogICAgICAgIG1vdW50KGVsKSB7CiAgICAgICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7IC8vIEZpbmQgZWwKCiAgICAgICAgICAgIGNvbnN0ICRlbCA9ICQoZWwgfHwgc3dpcGVyLnBhcmFtcy5lbCk7CiAgICAgICAgICAgIGVsID0gJGVsWzBdOwoKICAgICAgICAgICAgaWYgKCFlbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBlbC5zd2lwZXIgPSBzd2lwZXI7CgogICAgICAgICAgICBjb25zdCBnZXRXcmFwcGVyU2VsZWN0b3IgPSAoKSA9PiB7CiAgICAgICAgICAgICAgICByZXR1cm4gYC4keyhzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyB8fCAnJykudHJpbSgpLnNwbGl0KCcgJykuam9pbignLicpfWA7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBjb25zdCBnZXRXcmFwcGVyID0gKCkgPT4gewogICAgICAgICAgICAgICAgaWYgKGVsICYmIGVsLnNoYWRvd1Jvb3QgJiYgZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gJChlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoZ2V0V3JhcHBlclNlbGVjdG9yKCkpKTsgLy8gQ2hpbGRyZW4gbmVlZHMgdG8gcmV0dXJuIHNsb3QgaXRlbXMKCiAgICAgICAgICAgICAgICAgICAgcmVzLmNoaWxkcmVuID0gb3B0aW9ucyA9PiAkZWwuY2hpbGRyZW4ob3B0aW9ucyk7CgogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXM7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCEkZWwuY2hpbGRyZW4pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgkZWwpLmNoaWxkcmVuKGdldFdyYXBwZXJTZWxlY3RvcigpKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gJGVsLmNoaWxkcmVuKGdldFdyYXBwZXJTZWxlY3RvcigpKTsKICAgICAgICAgICAgfTsgLy8gRmluZCBXcmFwcGVyCgoKICAgICAgICAgICAgbGV0ICR3cmFwcGVyRWwgPSBnZXRXcmFwcGVyKCk7CgogICAgICAgICAgICBpZiAoJHdyYXBwZXJFbC5sZW5ndGggPT09IDAgJiYgc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykgewogICAgICAgICAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpOwogICAgICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgJHdyYXBwZXJFbCA9ICQod3JhcHBlcik7CiAgICAgICAgICAgICAgICB3cmFwcGVyLmNsYXNzTmFtZSA9IHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzOwogICAgICAgICAgICAgICAgJGVsLmFwcGVuZCh3cmFwcGVyKTsKICAgICAgICAgICAgICAgICRlbC5jaGlsZHJlbihgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApLmVhY2goc2xpZGVFbCA9PiB7CiAgICAgICAgICAgICAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVFbCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHsKICAgICAgICAgICAgICAgICRlbCwKICAgICAgICAgICAgICAgIGVsLAogICAgICAgICAgICAgICAgJHdyYXBwZXJFbCwKICAgICAgICAgICAgICAgIHdyYXBwZXJFbDogJHdyYXBwZXJFbFswXSwKICAgICAgICAgICAgICAgIG1vdW50ZWQ6IHRydWUsCiAgICAgICAgICAgICAgICAvLyBSVEwKICAgICAgICAgICAgICAgIHJ0bDogZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8ICRlbC5jc3MoJ2RpcmVjdGlvbicpID09PSAncnRsJywKICAgICAgICAgICAgICAgIHJ0bFRyYW5zbGF0ZTogc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAoZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8ICRlbC5jc3MoJ2RpcmVjdGlvbicpID09PSAncnRsJyksCiAgICAgICAgICAgICAgICB3cm9uZ1JUTDogJHdyYXBwZXJFbC5jc3MoJ2Rpc3BsYXknKSA9PT0gJy13ZWJraXQtYm94JwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBpbml0KGVsKSB7CiAgICAgICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybiBzd2lwZXI7CiAgICAgICAgICAgIGNvbnN0IG1vdW50ZWQgPSBzd2lwZXIubW91bnQoZWwpOwogICAgICAgICAgICBpZiAobW91bnRlZCA9PT0gZmFsc2UpIHJldHVybiBzd2lwZXI7CiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVJbml0Jyk7IC8vIFNldCBicmVha3BvaW50CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50cykgewogICAgICAgICAgICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTsKICAgICAgICAgICAgfSAvLyBBZGQgQ2xhc3NlcwoKCiAgICAgICAgICAgIHN3aXBlci5hZGRDbGFzc2VzKCk7IC8vIENyZWF0ZSBsb29wCgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIubG9vcENyZWF0ZSgpOwogICAgICAgICAgICB9IC8vIFVwZGF0ZSBzaXplCgoKICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNpemUoKTsgLy8gVXBkYXRlIHNsaWRlcwoKICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpOwoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykgewogICAgICAgICAgICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTsKICAgICAgICAgICAgfSAvLyBTZXQgR3JhYiBDdXJzb3IKCgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yICYmIHN3aXBlci5lbmFibGVkKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIucHJlbG9hZEltYWdlcygpOwogICAgICAgICAgICB9IC8vIFNsaWRlIFRvIEluaXRpYWwgU2xpZGUKCgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTsKICAgICAgICAgICAgfSAvLyBBdHRhY2ggZXZlbnRzCgoKICAgICAgICAgICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpOyAvLyBJbml0IEZsYWcKCiAgICAgICAgICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7IC8vIEVtaXQKCiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdpbml0Jyk7CiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdhZnRlckluaXQnKTsKICAgICAgICAgICAgcmV0dXJuIHN3aXBlcjsKICAgICAgICB9CgogICAgICAgIGRlc3Ryb3koZGVsZXRlSW5zdGFuY2UsIGNsZWFuU3R5bGVzKSB7CiAgICAgICAgICAgIGlmIChkZWxldGVJbnN0YW5jZSA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICBkZWxldGVJbnN0YW5jZSA9IHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChjbGVhblN0eWxlcyA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICBjbGVhblN0eWxlcyA9IHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgICAgICRlbCwKICAgICAgICAgICAgICAgICR3cmFwcGVyRWwsCiAgICAgICAgICAgICAgICBzbGlkZXMKICAgICAgICAgICAgfSA9IHN3aXBlcjsKCiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVEZXN0cm95Jyk7IC8vIEluaXQgRmxhZwoKICAgICAgICAgICAgc3dpcGVyLmluaXRpYWxpemVkID0gZmFsc2U7IC8vIERldGFjaCBldmVudHMKCiAgICAgICAgICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTsgLy8gRGVzdHJveSBsb29wCgogICAgICAgICAgICBpZiAocGFyYW1zLmxvb3ApIHsKICAgICAgICAgICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpOwogICAgICAgICAgICB9IC8vIENsZWFudXAgc3R5bGVzCgoKICAgICAgICAgICAgaWYgKGNsZWFuU3R5bGVzKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpOwogICAgICAgICAgICAgICAgJGVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7CiAgICAgICAgICAgICAgICAkd3JhcHBlckVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7CgogICAgICAgICAgICAgICAgaWYgKHNsaWRlcyAmJiBzbGlkZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgc2xpZGVzLnJlbW92ZUNsYXNzKFtwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzc10uam9pbignICcpKS5yZW1vdmVBdHRyKCdzdHlsZScpLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdkZXN0cm95Jyk7IC8vIERldGFjaCBlbWl0dGVyIGV2ZW50cwoKICAgICAgICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaChldmVudE5hbWUgPT4gewogICAgICAgICAgICAgICAgc3dpcGVyLm9mZihldmVudE5hbWUpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIHN3aXBlci4kZWxbMF0uc3dpcGVyID0gbnVsbDsKICAgICAgICAgICAgICAgIGRlbGV0ZVByb3BzKHN3aXBlcik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN3aXBlci5kZXN0cm95ZWQgPSB0cnVlOwogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CgogICAgICAgIHN0YXRpYyBleHRlbmREZWZhdWx0cyhuZXdEZWZhdWx0cykgewogICAgICAgICAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpOwogICAgICAgIH0KCiAgICAgICAgc3RhdGljIGdldCBleHRlbmRlZERlZmF1bHRzKCkgewogICAgICAgICAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0czsKICAgICAgICB9CgogICAgICAgIHN0YXRpYyBnZXQgZGVmYXVsdHMoKSB7CiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0czsKICAgICAgICB9CgogICAgICAgIHN0YXRpYyBpbnN0YWxsTW9kdWxlKG1vZCkgewogICAgICAgICAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18pIFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18gPSBbXTsKICAgICAgICAgICAgY29uc3QgbW9kdWxlcyA9IFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX187CgogICAgICAgICAgICBpZiAodHlwZW9mIG1vZCA9PT0gJ2Z1bmN0aW9uJyAmJiBtb2R1bGVzLmluZGV4T2YobW9kKSA8IDApIHsKICAgICAgICAgICAgICAgIG1vZHVsZXMucHVzaChtb2QpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBzdGF0aWMgdXNlKG1vZHVsZSkgewogICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtb2R1bGUpKSB7CiAgICAgICAgICAgICAgICBtb2R1bGUuZm9yRWFjaChtID0+IFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pKTsKICAgICAgICAgICAgICAgIHJldHVybiBTd2lwZXI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlKG1vZHVsZSk7CiAgICAgICAgICAgIHJldHVybiBTd2lwZXI7CiAgICAgICAgfQoKICAgIH0KCiAgICBPYmplY3Qua2V5cyhwcm90b3R5cGVzKS5mb3JFYWNoKHByb3RvdHlwZUdyb3VwID0+IHsKICAgICAgICBPYmplY3Qua2V5cyhwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXSkuZm9yRWFjaChwcm90b01ldGhvZCA9PiB7CiAgICAgICAgICAgIFN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b3R5cGVHcm91cF1bcHJvdG9NZXRob2RdOwogICAgICAgIH0pOwogICAgfSk7CiAgICBTd2lwZXIudXNlKFtSZXNpemUsIE9ic2VydmVyXSk7CgogICAgZnVuY3Rpb24gVmlydHVhbChfcmVmKSB7CiAgICAgICAgbGV0IHsKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICBleHRlbmRQYXJhbXMsCiAgICAgICAgICAgIG9uLAogICAgICAgICAgICBlbWl0CiAgICAgICAgfSA9IF9yZWY7CiAgICAgICAgZXh0ZW5kUGFyYW1zKHsKICAgICAgICAgICAgdmlydHVhbDogewogICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsCiAgICAgICAgICAgICAgICBzbGlkZXM6IFtdLAogICAgICAgICAgICAgICAgY2FjaGU6IHRydWUsCiAgICAgICAgICAgICAgICByZW5kZXJTbGlkZTogbnVsbCwKICAgICAgICAgICAgICAgIHJlbmRlckV4dGVybmFsOiBudWxsLAogICAgICAgICAgICAgICAgcmVuZGVyRXh0ZXJuYWxVcGRhdGU6IHRydWUsCiAgICAgICAgICAgICAgICBhZGRTbGlkZXNCZWZvcmU6IDAsCiAgICAgICAgICAgICAgICBhZGRTbGlkZXNBZnRlcjogMAogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgbGV0IGNzc01vZGVUaW1lb3V0OwogICAgICAgIHN3aXBlci52aXJ0dWFsID0gewogICAgICAgICAgICBjYWNoZToge30sCiAgICAgICAgICAgIGZyb206IHVuZGVmaW5lZCwKICAgICAgICAgICAgdG86IHVuZGVmaW5lZCwKICAgICAgICAgICAgc2xpZGVzOiBbXSwKICAgICAgICAgICAgb2Zmc2V0OiAwLAogICAgICAgICAgICBzbGlkZXNHcmlkOiBbXQogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIHJlbmRlclNsaWRlKHNsaWRlLCBpbmRleCkgewogICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7CgogICAgICAgICAgICBpZiAocGFyYW1zLmNhY2hlICYmIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgJHNsaWRlRWwgPSBwYXJhbXMucmVuZGVyU2xpZGUgPyAkKHBhcmFtcy5yZW5kZXJTbGlkZS5jYWxsKHN3aXBlciwgc2xpZGUsIGluZGV4KSkgOiAkKGA8ZGl2IGNsYXNzPSIke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30iIGRhdGEtc3dpcGVyLXNsaWRlLWluZGV4PSIke2luZGV4fSI+JHtzbGlkZX08L2Rpdj5gKTsKICAgICAgICAgICAgaWYgKCEkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpKSAkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTsKICAgICAgICAgICAgaWYgKHBhcmFtcy5jYWNoZSkgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdID0gJHNsaWRlRWw7CiAgICAgICAgICAgIHJldHVybiAkc2xpZGVFbDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHVwZGF0ZShmb3JjZSkgewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3LAogICAgICAgICAgICAgICAgc2xpZGVzUGVyR3JvdXAsCiAgICAgICAgICAgICAgICBjZW50ZXJlZFNsaWRlcwogICAgICAgICAgICB9ID0gc3dpcGVyLnBhcmFtczsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgYWRkU2xpZGVzQmVmb3JlLAogICAgICAgICAgICAgICAgYWRkU2xpZGVzQWZ0ZXIKICAgICAgICAgICAgfSA9IHN3aXBlci5wYXJhbXMudmlydHVhbDsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgZnJvbTogcHJldmlvdXNGcm9tLAogICAgICAgICAgICAgICAgdG86IHByZXZpb3VzVG8sCiAgICAgICAgICAgICAgICBzbGlkZXMsCiAgICAgICAgICAgICAgICBzbGlkZXNHcmlkOiBwcmV2aW91c1NsaWRlc0dyaWQsCiAgICAgICAgICAgICAgICBvZmZzZXQ6IHByZXZpb3VzT2Zmc2V0CiAgICAgICAgICAgIH0gPSBzd2lwZXIudmlydHVhbDsKCiAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDsKICAgICAgICAgICAgbGV0IG9mZnNldFByb3A7CiAgICAgICAgICAgIGlmIChzd2lwZXIucnRsVHJhbnNsYXRlKSBvZmZzZXRQcm9wID0gJ3JpZ2h0JzsgZWxzZSBvZmZzZXRQcm9wID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCc7CiAgICAgICAgICAgIGxldCBzbGlkZXNBZnRlcjsKICAgICAgICAgICAgbGV0IHNsaWRlc0JlZm9yZTsKCiAgICAgICAgICAgIGlmIChjZW50ZXJlZFNsaWRlcykgewogICAgICAgICAgICAgICAgc2xpZGVzQWZ0ZXIgPSBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSArIHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQWZ0ZXI7CiAgICAgICAgICAgICAgICBzbGlkZXNCZWZvcmUgPSBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSArIHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQmVmb3JlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc2xpZGVzQWZ0ZXIgPSBzbGlkZXNQZXJWaWV3ICsgKHNsaWRlc1Blckdyb3VwIC0gMSkgKyBhZGRTbGlkZXNBZnRlcjsKICAgICAgICAgICAgICAgIHNsaWRlc0JlZm9yZSA9IHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQmVmb3JlOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBmcm9tID0gTWF0aC5tYXgoKGFjdGl2ZUluZGV4IHx8IDApIC0gc2xpZGVzQmVmb3JlLCAwKTsKICAgICAgICAgICAgY29uc3QgdG8gPSBNYXRoLm1pbigoYWN0aXZlSW5kZXggfHwgMCkgKyBzbGlkZXNBZnRlciwgc2xpZGVzLmxlbmd0aCAtIDEpOwogICAgICAgICAgICBjb25zdCBvZmZzZXQgPSAoc3dpcGVyLnNsaWRlc0dyaWRbZnJvbV0gfHwgMCkgLSAoc3dpcGVyLnNsaWRlc0dyaWRbMF0gfHwgMCk7CiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnZpcnR1YWwsIHsKICAgICAgICAgICAgICAgIGZyb20sCiAgICAgICAgICAgICAgICB0bywKICAgICAgICAgICAgICAgIG9mZnNldCwKICAgICAgICAgICAgICAgIHNsaWRlc0dyaWQ6IHN3aXBlci5zbGlkZXNHcmlkCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgZnVuY3Rpb24gb25SZW5kZXJlZCgpIHsKICAgICAgICAgICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTsKICAgICAgICAgICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpOwogICAgICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTsKCiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLmxhenkgJiYgc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZW1pdCgndmlydHVhbFVwZGF0ZScpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAocHJldmlvdXNGcm9tID09PSBmcm9tICYmIHByZXZpb3VzVG8gPT09IHRvICYmICFmb3JjZSkgewogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5zbGlkZXNHcmlkICE9PSBwcmV2aW91c1NsaWRlc0dyaWQgJiYgb2Zmc2V0ICE9PSBwcmV2aW91c09mZnNldCkgewogICAgICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZXMuY3NzKG9mZnNldFByb3AsIGAke29mZnNldH1weGApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpOwogICAgICAgICAgICAgICAgZW1pdCgndmlydHVhbFVwZGF0ZScpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwuY2FsbChzd2lwZXIsIHsKICAgICAgICAgICAgICAgICAgICBvZmZzZXQsCiAgICAgICAgICAgICAgICAgICAgZnJvbSwKICAgICAgICAgICAgICAgICAgICB0bywKICAgICAgICAgICAgICAgICAgICBzbGlkZXM6IGZ1bmN0aW9uIGdldFNsaWRlcygpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2xpZGVzVG9SZW5kZXIgPSBbXTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDw9IHRvOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvUmVuZGVyLnB1c2goc2xpZGVzW2ldKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsaWRlc1RvUmVuZGVyOwogICAgICAgICAgICAgICAgICAgIH0oKQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbFVwZGF0ZSkgewogICAgICAgICAgICAgICAgICAgIG9uUmVuZGVyZWQoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZW1pdCgndmlydHVhbFVwZGF0ZScpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgcHJlcGVuZEluZGV4ZXMgPSBbXTsKICAgICAgICAgICAgY29uc3QgYXBwZW5kSW5kZXhlcyA9IFtdOwoKICAgICAgICAgICAgaWYgKGZvcmNlKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5maW5kKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCkucmVtb3ZlKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gcHJldmlvdXNGcm9tOyBpIDw9IHByZXZpb3VzVG87IGkgKz0gMSkgewogICAgICAgICAgICAgICAgICAgIGlmIChpIDwgZnJvbSB8fCBpID4gdG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuZmluZChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD0iJHtpfSJdYCkucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgaWYgKGkgPj0gZnJvbSAmJiBpIDw9IHRvKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcmV2aW91c1RvID09PSAndW5kZWZpbmVkJyB8fCBmb3JjZSkgewogICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRJbmRleGVzLnB1c2goaSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiBwcmV2aW91c1RvKSBhcHBlbmRJbmRleGVzLnB1c2goaSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpIDwgcHJldmlvdXNGcm9tKSBwcmVwZW5kSW5kZXhlcy5wdXNoKGkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgYXBwZW5kSW5kZXhlcy5mb3JFYWNoKGluZGV4ID0+IHsKICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLmFwcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcHJlcGVuZEluZGV4ZXMuc29ydCgoYSwgYikgPT4gYiAtIGEpLmZvckVhY2goaW5kZXggPT4gewogICAgICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwucHJlcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oJy5zd2lwZXItc2xpZGUnKS5jc3Mob2Zmc2V0UHJvcCwgYCR7b2Zmc2V0fXB4YCk7CiAgICAgICAgICAgIG9uUmVuZGVyZWQoKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGFwcGVuZFNsaWRlKHNsaWRlcykgewogICAgICAgICAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7CiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZXNbaV0pIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlc1tpXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMucHVzaChzbGlkZXMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB1cGRhdGUodHJ1ZSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBwcmVwZW5kU2xpZGUoc2xpZGVzKSB7CiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4OwogICAgICAgICAgICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7CiAgICAgICAgICAgIGxldCBudW1iZXJPZk5ld1NsaWRlcyA9IDE7CgogICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzbGlkZXMpKSB7CiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZXNbaV0pIHN3aXBlci52aXJ0dWFsLnNsaWRlcy51bnNoaWZ0KHNsaWRlc1tpXSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIHNsaWRlcy5sZW5ndGg7CiAgICAgICAgICAgICAgICBudW1iZXJPZk5ld1NsaWRlcyA9IHNsaWRlcy5sZW5ndGg7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXMpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7CiAgICAgICAgICAgICAgICBjb25zdCBjYWNoZSA9IHN3aXBlci52aXJ0dWFsLmNhY2hlOwogICAgICAgICAgICAgICAgY29uc3QgbmV3Q2FjaGUgPSB7fTsKICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGNhY2hlKS5mb3JFYWNoKGNhY2hlZEluZGV4ID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zdCAkY2FjaGVkRWwgPSBjYWNoZVtjYWNoZWRJbmRleF07CiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FjaGVkRWxJbmRleCA9ICRjYWNoZWRFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpOwoKICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGVkRWxJbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICAkY2FjaGVkRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBwYXJzZUludChjYWNoZWRFbEluZGV4LCAxMCkgKyBudW1iZXJPZk5ld1NsaWRlcyk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBuZXdDYWNoZVtwYXJzZUludChjYWNoZWRJbmRleCwgMTApICsgbnVtYmVyT2ZOZXdTbGlkZXNdID0gJGNhY2hlZEVsOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBzd2lwZXIudmlydHVhbC5jYWNoZSA9IG5ld0NhY2hlOwogICAgICAgICAgICB9CgogICAgICAgICAgICB1cGRhdGUodHJ1ZSk7CiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHJlbW92ZVNsaWRlKHNsaWRlc0luZGV4ZXMpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAndW5kZWZpbmVkJyB8fCBzbGlkZXNJbmRleGVzID09PSBudWxsKSByZXR1cm47CiAgICAgICAgICAgIGxldCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDsKCiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNsaWRlc0luZGV4ZXMpKSB7CiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gc2xpZGVzSW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkgewogICAgICAgICAgICAgICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlc1tpXSwgMSk7CgogICAgICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlc0luZGV4ZXNbaV1dOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlc0luZGV4ZXNbaV0gPCBhY3RpdmVJbmRleCkgYWN0aXZlSW5kZXggLT0gMTsKICAgICAgICAgICAgICAgICAgICBhY3RpdmVJbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4LCAwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlcywgMSk7CgogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZXNJbmRleGVzXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoc2xpZGVzSW5kZXhlcyA8IGFjdGl2ZUluZGV4KSBhY3RpdmVJbmRleCAtPSAxOwogICAgICAgICAgICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHVwZGF0ZSh0cnVlKTsKICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXgsIDApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzKCkgewogICAgICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMgPSBbXTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHsKICAgICAgICAgICAgICAgIHN3aXBlci52aXJ0dWFsLmNhY2hlID0ge307CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHVwZGF0ZSh0cnVlKTsKICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgMCk7CiAgICAgICAgfQoKICAgICAgICBvbignYmVmb3JlSW5pdCcsICgpID0+IHsKICAgICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuOwogICAgICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMgPSBzd2lwZXIucGFyYW1zLnZpcnR1YWwuc2xpZGVzOwogICAgICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc312aXJ0dWFsYCk7CiAgICAgICAgICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7CiAgICAgICAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTsKCiAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUpIHsKICAgICAgICAgICAgICAgIHVwZGF0ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgb24oJ3NldFRyYW5zbGF0ZScsICgpID0+IHsKICAgICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuOwoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSAmJiAhc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsKSB7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY3NzTW9kZVRpbWVvdXQpOwogICAgICAgICAgICAgICAgY3NzTW9kZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgICAgICB1cGRhdGUoKTsKICAgICAgICAgICAgICAgIH0sIDEwMCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB1cGRhdGUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIG9uKCdpbml0IHVwZGF0ZSByZXNpemUnLCAoKSA9PiB7CiAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHsKICAgICAgICAgICAgICAgIHNldENTU1Byb3BlcnR5KHN3aXBlci53cmFwcGVyRWwsICctLXN3aXBlci12aXJ0dWFsLXNpemUnLCBgJHtzd2lwZXIudmlydHVhbFNpemV9cHhgKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnZpcnR1YWwsIHsKICAgICAgICAgICAgYXBwZW5kU2xpZGUsCiAgICAgICAgICAgIHByZXBlbmRTbGlkZSwKICAgICAgICAgICAgcmVtb3ZlU2xpZGUsCiAgICAgICAgICAgIHJlbW92ZUFsbFNsaWRlcywKICAgICAgICAgICAgdXBkYXRlCiAgICAgICAgfSk7CiAgICB9CgogICAgLyogZXNsaW50LWRpc2FibGUgY29uc2lzdGVudC1yZXR1cm4gKi8KICAgIGZ1bmN0aW9uIEtleWJvYXJkKF9yZWYpIHsKICAgICAgICBsZXQgewogICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgIGV4dGVuZFBhcmFtcywKICAgICAgICAgICAgb24sCiAgICAgICAgICAgIGVtaXQKICAgICAgICB9ID0gX3JlZjsKICAgICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7CiAgICAgICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7CiAgICAgICAgc3dpcGVyLmtleWJvYXJkID0gewogICAgICAgICAgICBlbmFibGVkOiBmYWxzZQogICAgICAgIH07CiAgICAgICAgZXh0ZW5kUGFyYW1zKHsKICAgICAgICAgICAga2V5Ym9hcmQ6IHsKICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsCiAgICAgICAgICAgICAgICBwYWdlVXBEb3duOiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7CiAgICAgICAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgcnRsVHJhbnNsYXRlOiBydGwKICAgICAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICAgICAgbGV0IGUgPSBldmVudDsKICAgICAgICAgICAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDsgLy8ganF1ZXJ5IGZpeAoKICAgICAgICAgICAgY29uc3Qga2MgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZTsKICAgICAgICAgICAgY29uc3QgcGFnZVVwRG93biA9IHN3aXBlci5wYXJhbXMua2V5Ym9hcmQucGFnZVVwRG93bjsKICAgICAgICAgICAgY29uc3QgaXNQYWdlVXAgPSBwYWdlVXBEb3duICYmIGtjID09PSAzMzsKICAgICAgICAgICAgY29uc3QgaXNQYWdlRG93biA9IHBhZ2VVcERvd24gJiYga2MgPT09IDM0OwogICAgICAgICAgICBjb25zdCBpc0Fycm93TGVmdCA9IGtjID09PSAzNzsKICAgICAgICAgICAgY29uc3QgaXNBcnJvd1JpZ2h0ID0ga2MgPT09IDM5OwogICAgICAgICAgICBjb25zdCBpc0Fycm93VXAgPSBrYyA9PT0gMzg7CiAgICAgICAgICAgIGNvbnN0IGlzQXJyb3dEb3duID0ga2MgPT09IDQwOyAvLyBEaXJlY3Rpb25zIGxvY2tzCgogICAgICAgICAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIGlzQXJyb3dSaWdodCB8fCBzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIGlzQXJyb3dEb3duIHx8IGlzUGFnZURvd24pKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgaXNBcnJvd0xlZnQgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiBpc0Fycm93VXAgfHwgaXNQYWdlVXApKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLm1ldGFLZXkpIHsKICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUgJiYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0ZXh0YXJlYScpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5vbmx5SW5WaWV3cG9ydCAmJiAoaXNQYWdlVXAgfHwgaXNQYWdlRG93biB8fCBpc0Fycm93TGVmdCB8fCBpc0Fycm93UmlnaHQgfHwgaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duKSkgewogICAgICAgICAgICAgICAgbGV0IGluVmlldyA9IGZhbHNlOyAvLyBDaGVjayB0aGF0IHN3aXBlciBzaG91bGQgYmUgaW5zaWRlIG9mIHZpc2libGUgYXJlYSBvZiB3aW5kb3cKCiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLiRlbC5wYXJlbnRzKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCkubGVuZ3RoID4gMCAmJiBzd2lwZXIuJGVsLnBhcmVudHMoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnN0ICRlbCA9IHN3aXBlci4kZWw7CiAgICAgICAgICAgICAgICBjb25zdCBzd2lwZXJXaWR0aCA9ICRlbFswXS5jbGllbnRXaWR0aDsKICAgICAgICAgICAgICAgIGNvbnN0IHN3aXBlckhlaWdodCA9ICRlbFswXS5jbGllbnRIZWlnaHQ7CiAgICAgICAgICAgICAgICBjb25zdCB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoOwogICAgICAgICAgICAgICAgY29uc3Qgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0OwogICAgICAgICAgICAgICAgY29uc3Qgc3dpcGVyT2Zmc2V0ID0gc3dpcGVyLiRlbC5vZmZzZXQoKTsKICAgICAgICAgICAgICAgIGlmIChydGwpIHN3aXBlck9mZnNldC5sZWZ0IC09IHN3aXBlci4kZWxbMF0uc2Nyb2xsTGVmdDsKICAgICAgICAgICAgICAgIGNvbnN0IHN3aXBlckNvb3JkID0gW1tzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlcldpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVySGVpZ2h0XSwgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyV2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXJIZWlnaHRdXTsKCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlckNvb3JkLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBzd2lwZXJDb29yZFtpXTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50WzBdID49IDAgJiYgcG9pbnRbMF0gPD0gd2luZG93V2lkdGggJiYgcG9pbnRbMV0gPj0gMCAmJiBwb2ludFsxXSA8PSB3aW5kb3dIZWlnaHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50WzBdID09PSAwICYmIHBvaW50WzFdID09PSAwKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICAgICAgICAgICAgICAgICAgaW5WaWV3ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCFpblZpZXcpIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHsKICAgICAgICAgICAgICAgIGlmIChpc1BhZ2VVcCB8fCBpc1BhZ2VEb3duIHx8IGlzQXJyb3dMZWZ0IHx8IGlzQXJyb3dSaWdodCkgewogICAgICAgICAgICAgICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7IGVsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmICFydGwgfHwgKGlzUGFnZVVwIHx8IGlzQXJyb3dMZWZ0KSAmJiBydGwpIHN3aXBlci5zbGlkZU5leHQoKTsKICAgICAgICAgICAgICAgIGlmICgoaXNQYWdlVXAgfHwgaXNBcnJvd0xlZnQpICYmICFydGwgfHwgKGlzUGFnZURvd24gfHwgaXNBcnJvd1JpZ2h0KSAmJiBydGwpIHN3aXBlci5zbGlkZVByZXYoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIChpc1BhZ2VVcCB8fCBpc1BhZ2VEb3duIHx8IGlzQXJyb3dVcCB8fCBpc0Fycm93RG93bikgewogICAgICAgICAgICAgICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7IGVsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChpc1BhZ2VEb3duIHx8IGlzQXJyb3dEb3duKSBzd2lwZXIuc2xpZGVOZXh0KCk7CiAgICAgICAgICAgICAgICBpZiAoaXNQYWdlVXAgfHwgaXNBcnJvd1VwKSBzd2lwZXIuc2xpZGVQcmV2KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGVtaXQoJ2tleVByZXNzJywga2MpOwogICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZW5hYmxlKCkgewogICAgICAgICAgICBpZiAoc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHJldHVybjsKICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ2tleWRvd24nLCBoYW5kbGUpOwogICAgICAgICAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBkaXNhYmxlKCkgewogICAgICAgICAgICBpZiAoIXN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47CiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZigna2V5ZG93bicsIGhhbmRsZSk7CiAgICAgICAgICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGVkID0gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBvbignaW5pdCcsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQuZW5hYmxlZCkgewogICAgICAgICAgICAgICAgZW5hYmxlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbignZGVzdHJveScsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci5rZXlib2FyZC5lbmFibGVkKSB7CiAgICAgICAgICAgICAgICBkaXNhYmxlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBPYmplY3QuYXNzaWduKHN3aXBlci5rZXlib2FyZCwgewogICAgICAgICAgICBlbmFibGUsCiAgICAgICAgICAgIGRpc2FibGUKICAgICAgICB9KTsKICAgIH0KCiAgICAvKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqLwogICAgZnVuY3Rpb24gTW91c2V3aGVlbChfcmVmKSB7CiAgICAgICAgbGV0IHsKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICBleHRlbmRQYXJhbXMsCiAgICAgICAgICAgIG9uLAogICAgICAgICAgICBlbWl0CiAgICAgICAgfSA9IF9yZWY7CiAgICAgICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7CiAgICAgICAgZXh0ZW5kUGFyYW1zKHsKICAgICAgICAgICAgbW91c2V3aGVlbDogewogICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsCiAgICAgICAgICAgICAgICByZWxlYXNlT25FZGdlczogZmFsc2UsCiAgICAgICAgICAgICAgICBpbnZlcnQ6IGZhbHNlLAogICAgICAgICAgICAgICAgZm9yY2VUb0F4aXM6IGZhbHNlLAogICAgICAgICAgICAgICAgc2Vuc2l0aXZpdHk6IDEsCiAgICAgICAgICAgICAgICBldmVudHNUYXJnZXQ6ICdjb250YWluZXInLAogICAgICAgICAgICAgICAgdGhyZXNob2xkRGVsdGE6IG51bGwsCiAgICAgICAgICAgICAgICB0aHJlc2hvbGRUaW1lOiBudWxsCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBzd2lwZXIubW91c2V3aGVlbCA9IHsKICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UKICAgICAgICB9OwogICAgICAgIGxldCB0aW1lb3V0OwogICAgICAgIGxldCBsYXN0U2Nyb2xsVGltZSA9IG5vdygpOwogICAgICAgIGxldCBsYXN0RXZlbnRCZWZvcmVTbmFwOwogICAgICAgIGNvbnN0IHJlY2VudFdoZWVsRXZlbnRzID0gW107CgogICAgICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZShlKSB7CiAgICAgICAgICAgIC8vIFJlYXNvbmFibGUgZGVmYXVsdHMKICAgICAgICAgICAgY29uc3QgUElYRUxfU1RFUCA9IDEwOwogICAgICAgICAgICBjb25zdCBMSU5FX0hFSUdIVCA9IDQwOwogICAgICAgICAgICBjb25zdCBQQUdFX0hFSUdIVCA9IDgwMDsKICAgICAgICAgICAgbGV0IHNYID0gMDsKICAgICAgICAgICAgbGV0IHNZID0gMDsgLy8gc3BpblgsIHNwaW5ZCgogICAgICAgICAgICBsZXQgcFggPSAwOwogICAgICAgICAgICBsZXQgcFkgPSAwOyAvLyBwaXhlbFgsIHBpeGVsWQogICAgICAgICAgICAvLyBMZWdhY3kKCiAgICAgICAgICAgIGlmICgnZGV0YWlsJyBpbiBlKSB7CiAgICAgICAgICAgICAgICBzWSA9IGUuZGV0YWlsOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJ3doZWVsRGVsdGEnIGluIGUpIHsKICAgICAgICAgICAgICAgIHNZID0gLWUud2hlZWxEZWx0YSAvIDEyMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCd3aGVlbERlbHRhWScgaW4gZSkgewogICAgICAgICAgICAgICAgc1kgPSAtZS53aGVlbERlbHRhWSAvIDEyMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCd3aGVlbERlbHRhWCcgaW4gZSkgewogICAgICAgICAgICAgICAgc1ggPSAtZS53aGVlbERlbHRhWCAvIDEyMDsKICAgICAgICAgICAgfSAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsCgoKICAgICAgICAgICAgaWYgKCdheGlzJyBpbiBlICYmIGUuYXhpcyA9PT0gZS5IT1JJWk9OVEFMX0FYSVMpIHsKICAgICAgICAgICAgICAgIHNYID0gc1k7CiAgICAgICAgICAgICAgICBzWSA9IDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHBYID0gc1ggKiBQSVhFTF9TVEVQOwogICAgICAgICAgICBwWSA9IHNZICogUElYRUxfU1RFUDsKCiAgICAgICAgICAgIGlmICgnZGVsdGFZJyBpbiBlKSB7CiAgICAgICAgICAgICAgICBwWSA9IGUuZGVsdGFZOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJ2RlbHRhWCcgaW4gZSkgewogICAgICAgICAgICAgICAgcFggPSBlLmRlbHRhWDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkgJiYgIXBYKSB7CiAgICAgICAgICAgICAgICAvLyBpZiB1c2VyIHNjcm9sbHMgd2l0aCBzaGlmdCBoZSB3YW50cyBob3Jpem9udGFsIHNjcm9sbAogICAgICAgICAgICAgICAgcFggPSBwWTsKICAgICAgICAgICAgICAgIHBZID0gMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKChwWCB8fCBwWSkgJiYgZS5kZWx0YU1vZGUpIHsKICAgICAgICAgICAgICAgIGlmIChlLmRlbHRhTW9kZSA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgIC8vIGRlbHRhIGluIExJTkUgdW5pdHMKICAgICAgICAgICAgICAgICAgICBwWCAqPSBMSU5FX0hFSUdIVDsKICAgICAgICAgICAgICAgICAgICBwWSAqPSBMSU5FX0hFSUdIVDsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0cwogICAgICAgICAgICAgICAgICAgIHBYICo9IFBBR0VfSEVJR0hUOwogICAgICAgICAgICAgICAgICAgIHBZICo9IFBBR0VfSEVJR0hUOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IC8vIEZhbGwtYmFjayBpZiBzcGluIGNhbm5vdCBiZSBkZXRlcm1pbmVkCgoKICAgICAgICAgICAgaWYgKHBYICYmICFzWCkgewogICAgICAgICAgICAgICAgc1ggPSBwWCA8IDEgPyAtMSA6IDE7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChwWSAmJiAhc1kpIHsKICAgICAgICAgICAgICAgIHNZID0gcFkgPCAxID8gLTEgOiAxOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgc3Bpblg6IHNYLAogICAgICAgICAgICAgICAgc3Bpblk6IHNZLAogICAgICAgICAgICAgICAgcGl4ZWxYOiBwWCwKICAgICAgICAgICAgICAgIHBpeGVsWTogcFkKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGhhbmRsZU1vdXNlRW50ZXIoKSB7CiAgICAgICAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjsKICAgICAgICAgICAgc3dpcGVyLm1vdXNlRW50ZXJlZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBoYW5kbGVNb3VzZUxlYXZlKCkgewogICAgICAgICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47CiAgICAgICAgICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSBmYWxzZTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGFuaW1hdGVTbGlkZXIobmV3RXZlbnQpIHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGREZWx0YSAmJiBuZXdFdmVudC5kZWx0YSA8IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGREZWx0YSkgewogICAgICAgICAgICAgICAgLy8gUHJldmVudCBpZiBkZWx0YSBvZiB3aGVlbCBzY3JvbGwgZGVsdGEgaXMgYmVsb3cgY29uZmlndXJlZCB0aHJlc2hvbGQKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGRUaW1lICYmIG5vdygpIC0gbGFzdFNjcm9sbFRpbWUgPCBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkVGltZSkgewogICAgICAgICAgICAgICAgLy8gUHJldmVudCBpZiB0aW1lIGJldHdlZW4gc2Nyb2xscyBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZAogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9IC8vIElmIHRoZSBtb3ZlbWVudCBpcyBOT1QgYmlnIGVub3VnaCBhbmQKICAgICAgICAgICAgLy8gaWYgdGhlIGxhc3QgdGltZSB0aGUgdXNlciBzY3JvbGxlZCB3YXMgdG9vIGNsb3NlIHRvIHRoZSBjdXJyZW50IG9uZSAoYXZvaWQgY29udGludW91c2x5IHRyaWdnZXJpbmcgdGhlIHNsaWRlcik6CiAgICAgICAgICAgIC8vICAgRG9uJ3QgZ28gYW55IGZ1cnRoZXIgKGF2b2lkIGluc2lnbmlmaWNhbnQgc2Nyb2xsIG1vdmVtZW50KS4KCgogICAgICAgICAgICBpZiAobmV3RXZlbnQuZGVsdGEgPj0gNiAmJiBub3coKSAtIGxhc3RTY3JvbGxUaW1lIDwgNjApIHsKICAgICAgICAgICAgICAgIC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHQKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9IC8vIElmIHVzZXIgaXMgc2Nyb2xsaW5nIHRvd2FyZHMgdGhlIGVuZDoKICAgICAgICAgICAgLy8gICBJZiB0aGUgc2xpZGVyIGhhc24ndCBoaXQgdGhlIGxhdGVzdCBzbGlkZSBvcgogICAgICAgICAgICAvLyAgIGlmIHRoZSBzbGlkZXIgaXMgYSBsb29wIGFuZAogICAgICAgICAgICAvLyAgIGlmIHRoZSBzbGlkZXIgaXNuJ3QgbW92aW5nIHJpZ2h0IG5vdzoKICAgICAgICAgICAgLy8gICAgIEdvIHRvIG5leHQgc2xpZGUgYW5kCiAgICAgICAgICAgIC8vICAgICBlbWl0IGEgc2Nyb2xsIGV2ZW50LgogICAgICAgICAgICAvLyBFbHNlICh0aGUgdXNlciBpcyBzY3JvbGxpbmcgdG93YXJkcyB0aGUgYmVnaW5uaW5nKSBhbmQKICAgICAgICAgICAgLy8gaWYgdGhlIHNsaWRlciBoYXNuJ3QgaGl0IHRoZSBmaXJzdCBzbGlkZSBvcgogICAgICAgICAgICAvLyBpZiB0aGUgc2xpZGVyIGlzIGEgbG9vcCBhbmQKICAgICAgICAgICAgLy8gaWYgdGhlIHNsaWRlciBpc24ndCBtb3ZpbmcgcmlnaHQgbm93OgogICAgICAgICAgICAvLyAgIEdvIHRvIHByZXYgc2xpZGUgYW5kCiAgICAgICAgICAgIC8vICAgZW1pdCBhIHNjcm9sbCBldmVudC4KCgogICAgICAgICAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkgewogICAgICAgICAgICAgICAgaWYgKCghc3dpcGVyLmlzRW5kIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7CiAgICAgICAgICAgICAgICAgICAgZW1pdCgnc2Nyb2xsJywgbmV3RXZlbnQucmF3KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmICgoIXN3aXBlci5pc0JlZ2lubmluZyB8fCBzd2lwZXIucGFyYW1zLmxvb3ApICYmICFzd2lwZXIuYW5pbWF0aW5nKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7CiAgICAgICAgICAgICAgICBlbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpOwogICAgICAgICAgICB9IC8vIElmIHlvdSBnb3QgaGVyZSBpcyBiZWNhdXNlIGFuIGFuaW1hdGlvbiBoYXMgYmVlbiB0cmlnZ2VyZWQgc28gc3RvcmUgdGhlIGN1cnJlbnQgdGltZQoKCiAgICAgICAgICAgIGxhc3RTY3JvbGxUaW1lID0gbmV3IHdpbmRvdy5EYXRlKCkuZ2V0VGltZSgpOyAvLyBSZXR1cm4gZmFsc2UgYXMgYSBkZWZhdWx0CgogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiByZWxlYXNlU2Nyb2xsKG5ld0V2ZW50KSB7CiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbDsKCiAgICAgICAgICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gPCAwKSB7CiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRydWUgdG8gYW5pbWF0ZSBzY3JvbGwgb24gZWRnZXMKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiBwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHsKICAgICAgICAgICAgICAgIC8vIFJldHVybiB0cnVlIHRvIGFuaW1hdGUgc2Nyb2xsIG9uIGVkZ2VzCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7CiAgICAgICAgICAgIGxldCBlID0gZXZlbnQ7CiAgICAgICAgICAgIGxldCBkaXNhYmxlUGFyZW50U3dpcGVyID0gdHJ1ZTsKICAgICAgICAgICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuOwogICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7CiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxldCB0YXJnZXQgPSBzd2lwZXIuJGVsOwoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQgIT09ICdjb250YWluZXInKSB7CiAgICAgICAgICAgICAgICB0YXJnZXQgPSAkKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIXN3aXBlci5tb3VzZUVudGVyZWQgJiYgIXRhcmdldFswXS5jb250YWlucyhlLnRhcmdldCkgJiYgIXBhcmFtcy5yZWxlYXNlT25FZGdlcykgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXgKCiAgICAgICAgICAgIGxldCBkZWx0YSA9IDA7CiAgICAgICAgICAgIGNvbnN0IHJ0bEZhY3RvciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7CiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBub3JtYWxpemUoZSk7CgogICAgICAgICAgICBpZiAocGFyYW1zLmZvcmNlVG9BeGlzKSB7CiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSkgZGVsdGEgPSAtZGF0YS5waXhlbFggKiBydGxGYWN0b3I7IGVsc2UgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxZKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxYKSkgZGVsdGEgPSAtZGF0YS5waXhlbFk7IGVsc2UgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkZWx0YSA9IE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSA/IC1kYXRhLnBpeGVsWCAqIHJ0bEZhY3RvciA6IC1kYXRhLnBpeGVsWTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGRlbHRhID09PSAwKSByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgaWYgKHBhcmFtcy5pbnZlcnQpIGRlbHRhID0gLWRlbHRhOyAvLyBHZXQgdGhlIHNjcm9sbCBwb3NpdGlvbnMKCiAgICAgICAgICAgIGxldCBwb3NpdGlvbnMgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCkgKyBkZWx0YSAqIHBhcmFtcy5zZW5zaXRpdml0eTsKICAgICAgICAgICAgaWYgKHBvc2l0aW9ucyA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHBvc2l0aW9ucyA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTsKICAgICAgICAgICAgaWYgKHBvc2l0aW9ucyA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHBvc2l0aW9ucyA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTsgLy8gV2hlbiBsb29wIGlzIHRydWU6CiAgICAgICAgICAgIC8vICAgICB0aGUgZGlzYWJsZVBhcmVudFN3aXBlciB3aWxsIGJlIHRydWUuCiAgICAgICAgICAgIC8vIFdoZW4gbG9vcCBpcyBmYWxzZToKICAgICAgICAgICAgLy8gICAgIGlmIHRoZSBzY3JvbGwgcG9zaXRpb25zIGlzIG5vdCBvbiBlZGdlLAogICAgICAgICAgICAvLyAgICAgdGhlbiB0aGUgZGlzYWJsZVBhcmVudFN3aXBlciB3aWxsIGJlIHRydWUuCiAgICAgICAgICAgIC8vICAgICBpZiB0aGUgc2Nyb2xsIG9uIGVkZ2UgcG9zaXRpb25zLAogICAgICAgICAgICAvLyAgICAgdGhlbiB0aGUgZGlzYWJsZVBhcmVudFN3aXBlciB3aWxsIGJlIGZhbHNlLgoKICAgICAgICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHRydWUgOiAhKHBvc2l0aW9ucyA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9ucyA9PT0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKTsKICAgICAgICAgICAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIgJiYgc3dpcGVyLnBhcmFtcy5uZXN0ZWQpIGUuc3RvcFByb3BhZ2F0aW9uKCk7CgogICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUgfHwgIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCkgewogICAgICAgICAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIG5ldyBldmVudCBpbiBhIHZhcmlhYmxlIHdoaWNoIHN0b3JlcyB0aGUgcmVsZXZhbnQgZGF0YQogICAgICAgICAgICAgICAgY29uc3QgbmV3RXZlbnQgPSB7CiAgICAgICAgICAgICAgICAgICAgdGltZTogbm93KCksCiAgICAgICAgICAgICAgICAgICAgZGVsdGE6IE1hdGguYWJzKGRlbHRhKSwKICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IE1hdGguc2lnbihkZWx0YSksCiAgICAgICAgICAgICAgICAgICAgcmF3OiBldmVudAogICAgICAgICAgICAgICAgfTsgLy8gS2VlcCB0aGUgbW9zdCByZWNlbnQgZXZlbnRzCgogICAgICAgICAgICAgICAgaWYgKHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAyKSB7CiAgICAgICAgICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc2hpZnQoKTsgLy8gb25seSBzdG9yZSB0aGUgbGFzdCBOIGV2ZW50cwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnN0IHByZXZFdmVudCA9IHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA/IHJlY2VudFdoZWVsRXZlbnRzW3JlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMucHVzaChuZXdFdmVudCk7IC8vIElmIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBwcmV2aW91cyByZWNvcmRlZCBldmVudDoKICAgICAgICAgICAgICAgIC8vICAgSWYgZGlyZWN0aW9uIGhhcyBjaGFuZ2VkIG9yCiAgICAgICAgICAgICAgICAvLyAgIGlmIHRoZSBzY3JvbGwgaXMgcXVpY2tlciB0aGFuIHRoZSBwcmV2aW91cyBvbmU6CiAgICAgICAgICAgICAgICAvLyAgICAgQW5pbWF0ZSB0aGUgc2xpZGVyLgogICAgICAgICAgICAgICAgLy8gRWxzZSAodGhpcyBpcyB0aGUgZmlyc3QgdGltZSB0aGUgd2hlZWwgaXMgbW92ZWQpOgogICAgICAgICAgICAgICAgLy8gICAgIEFuaW1hdGUgdGhlIHNsaWRlci4KCiAgICAgICAgICAgICAgICBpZiAocHJldkV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0V2ZW50LmRpcmVjdGlvbiAhPT0gcHJldkV2ZW50LmRpcmVjdGlvbiB8fCBuZXdFdmVudC5kZWx0YSA+IHByZXZFdmVudC5kZWx0YSB8fCBuZXdFdmVudC50aW1lID4gcHJldkV2ZW50LnRpbWUgKyAxNTApIHsKICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZVNsaWRlcihuZXdFdmVudCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBhbmltYXRlU2xpZGVyKG5ld0V2ZW50KTsKICAgICAgICAgICAgICAgIH0gLy8gSWYgaXQncyB0aW1lIHRvIHJlbGVhc2UgdGhlIHNjcm9sbDoKICAgICAgICAgICAgICAgIC8vICAgUmV0dXJuIG5vdyBzbyB5b3UgZG9uJ3QgaGl0IHRoZSBwcmV2ZW50RGVmYXVsdC4KCgogICAgICAgICAgICAgICAgaWYgKHJlbGVhc2VTY3JvbGwobmV3RXZlbnQpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBGcmVlbW9kZSBvciBzY3JvbGxDb250YWluZXI6CiAgICAgICAgICAgICAgICAvLyBJZiB3ZSByZWNlbnRseSBzbmFwcGVkIGFmdGVyIGEgbW9tZW50dW0gc2Nyb2xsLCB0aGVuIGlnbm9yZSB3aGVlbCBldmVudHMKICAgICAgICAgICAgICAgIC8vIHRvIGdpdmUgdGltZSBmb3IgdGhlIGRlY2VsZXJhdGlvbiB0byBmaW5pc2guIFN0b3AgaWdub3JpbmcgYWZ0ZXIgNTAwIG1zZWNzCiAgICAgICAgICAgICAgICAvLyBvciBpZiBpdCdzIGEgbmV3IHNjcm9sbCAobGFyZ2VyIGRlbHRhIG9yIGludmVyc2Ugc2lnbiBhcyBsYXN0IGV2ZW50IGJlZm9yZQogICAgICAgICAgICAgICAgLy8gYW4gZW5kLW9mLW1vbWVudHVtIHNuYXApLgogICAgICAgICAgICAgICAgY29uc3QgbmV3RXZlbnQgPSB7CiAgICAgICAgICAgICAgICAgICAgdGltZTogbm93KCksCiAgICAgICAgICAgICAgICAgICAgZGVsdGE6IE1hdGguYWJzKGRlbHRhKSwKICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IE1hdGguc2lnbihkZWx0YSkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBjb25zdCBpZ25vcmVXaGVlbEV2ZW50cyA9IGxhc3RFdmVudEJlZm9yZVNuYXAgJiYgbmV3RXZlbnQudGltZSA8IGxhc3RFdmVudEJlZm9yZVNuYXAudGltZSArIDUwMCAmJiBuZXdFdmVudC5kZWx0YSA8PSBsYXN0RXZlbnRCZWZvcmVTbmFwLmRlbHRhICYmIG5ld0V2ZW50LmRpcmVjdGlvbiA9PT0gbGFzdEV2ZW50QmVmb3JlU25hcC5kaXJlY3Rpb247CgogICAgICAgICAgICAgICAgaWYgKCFpZ25vcmVXaGVlbEV2ZW50cykgewogICAgICAgICAgICAgICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXAgPSB1bmRlZmluZWQ7CgogICAgICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGxldCBwb3NpdGlvbiA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKSArIGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5OwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHdhc0JlZ2lubmluZyA9IHN3aXBlci5pc0JlZ2lubmluZzsKICAgICAgICAgICAgICAgICAgICBjb25zdCB3YXNFbmQgPSBzd2lwZXIuaXNFbmQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkgcG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgcG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXNCZWdpbm5pbmcgJiYgc3dpcGVyLmlzQmVnaW5uaW5nIHx8ICF3YXNFbmQgJiYgc3dpcGVyLmlzRW5kKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZS5zdGlja3kpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB3aGVlbCBzY3JvbGxpbmcgc3RhcnRzIHdpdGggc3RpY2t5IChha2Egc25hcCkgZW5hYmxlZCwgdGhlbiBkZXRlY3QKICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCBieSBzdG9yaW5nIHJlY2VudCAoTj0xNT8pIHdoZWVsIGV2ZW50cy4KICAgICAgICAgICAgICAgICAgICAgICAgLy8gMS4gZG8gYWxsIE4gZXZlbnRzIGhhdmUgZGVjcmVhc2luZyBvciBzYW1lIChhYnNvbHV0ZSB2YWx1ZSkgZGVsdGE/CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIuIGRpZCBhbGwgTiBldmVudHMgYXJyaXZlIGluIHRoZSBsYXN0IE0gKE09NTAwPykgbXNlY3M/CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDMuIGRvZXMgdGhlIGVhcmxpZXN0IGV2ZW50IGhhdmUgYW4gKGFic29sdXRlIHZhbHVlKSBkZWx0YSB0aGF0J3MKICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgYXQgbGVhc3QgUCAoUD0xPykgbGFyZ2VyIHRoYW4gdGhlIG1vc3QgcmVjZW50IGV2ZW50J3MgZGVsdGE/CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDQuIGRvZXMgdGhlIGxhdGVzdCBldmVudCBoYXZlIGEgZGVsdGEgdGhhdCdzIHNtYWxsZXIgdGhhbiBRIChRPTY/KSBwaXhlbHM/CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIDEtNCBhcmUgInllcyIgdGhlbiB3ZSdyZSBuZWFyIHRoZSBlbmQgb2YgYSBtb21lbnR1bSBzY3JvbGwgZGVjZWxlcmF0aW9uLgogICAgICAgICAgICAgICAgICAgICAgICAvLyBTbmFwIGltbWVkaWF0ZWx5IGFuZCBpZ25vcmUgcmVtYWluaW5nIHdoZWVsIGV2ZW50cyBpbiB0aGlzIHNjcm9sbC4KICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2VlIGNvbW1lbnQgYWJvdmUgZm9yICJyZW1haW5pbmcgd2hlZWwgZXZlbnRzIGluIHRoaXMgc2Nyb2xsIiBkZXRlcm1pbmF0aW9uLgogICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiAxLTQgYXJlbid0IHNhdGlzZmllZCwgdGhlbiB3YWl0IHRvIHNuYXAgdW50aWwgNTAwbXMgYWZ0ZXIgdGhlIGxhc3QgZXZlbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dCA9IHVuZGVmaW5lZDsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMTUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNoaWZ0KCk7IC8vIG9ubHkgc3RvcmUgdGhlIGxhc3QgTiBldmVudHMKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldkV2ZW50ID0gcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID8gcmVjZW50V2hlZWxFdmVudHNbcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0RXZlbnQgPSByZWNlbnRXaGVlbEV2ZW50c1swXTsKICAgICAgICAgICAgICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMucHVzaChuZXdFdmVudCk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldkV2ZW50ICYmIChuZXdFdmVudC5kZWx0YSA+IHByZXZFdmVudC5kZWx0YSB8fCBuZXdFdmVudC5kaXJlY3Rpb24gIT09IHByZXZFdmVudC5kaXJlY3Rpb24pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmNyZWFzaW5nIG9yIHJldmVyc2Utc2lnbiBkZWx0YSBtZWFucyB0aGUgdXNlciBzdGFydGVkIHNjcm9sbGluZyBhZ2Fpbi4gQ2xlYXIgdGhlIHdoZWVsIGV2ZW50IGxvZy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNwbGljZSgwKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMTUgJiYgbmV3RXZlbnQudGltZSAtIGZpcnN0RXZlbnQudGltZSA8IDUwMCAmJiBmaXJzdEV2ZW50LmRlbHRhIC0gbmV3RXZlbnQuZGVsdGEgPj0gMSAmJiBuZXdFdmVudC5kZWx0YSA8PSA2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBkZWNlbGVyYXRpb24gb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gd2FpdCBmb3IgbW9yZSBldmVudHMuIFNuYXAgQVNBUCBvbiB0aGUgbmV4dCB0aWNrLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxzbywgYmVjYXVzZSB0aGVyZSdzIHNvbWUgcmVtYWluaW5nIG1vbWVudHVtIHdlJ2xsIGJpYXMgdGhlIHNuYXAgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXJlY3Rpb24gb2YgdGhlIG9uZ29pbmcgc2Nyb2xsIGJlY2F1c2UgaXQncyBiZXR0ZXIgVVggZm9yIHRoZSBzY3JvbGwgdG8gc25hcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoZSBzY3JvbGwgaW5zdGVhZCBvZiByZXZlcnNpbmcgdG8gc25hcC4gIFRoZXJlZm9yZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGl0J3MgYWxyZWFkeSBzY3JvbGxlZCBtb3JlIHRoYW4gMjAlIGluIHRoZSBjdXJyZW50IGRpcmVjdGlvbiwga2VlcCBnb2luZy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNuYXBUb1RocmVzaG9sZCA9IGRlbHRhID4gMCA/IDAuOCA6IDAuMjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXAgPSBuZXdFdmVudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNwbGljZSgwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBuZXh0VGljaygoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHVuZGVmaW5lZCwgc25hcFRvVGhyZXNob2xkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApOyAvLyBubyBkZWxheTsgbW92ZSBvbiBuZXh0IHRpY2sKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aW1lb3V0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBnZXQgaGVyZSwgdGhlbiB3ZSBoYXZlbid0IGRldGVjdGVkIHRoZSBlbmQgb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSdsbCBjb25zaWRlciBhIHNjcm9sbCAiY29tcGxldGUiIHdoZW4gdGhlcmUgaGF2ZW4ndCBiZWVuIGFueSB3aGVlbCBldmVudHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciA1MDBtcy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBuZXh0VGljaygoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc25hcFRvVGhyZXNob2xkID0gMC41OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXAgPSBuZXdFdmVudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHVuZGVmaW5lZCwgc25hcFRvVGhyZXNob2xkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IC8vIEVtaXQgZXZlbnQKCgogICAgICAgICAgICAgICAgICAgIGlmICghaWdub3JlV2hlZWxFdmVudHMpIGVtaXQoJ3Njcm9sbCcsIGUpOyAvLyBTdG9wIGF1dG9wbGF5CgogICAgICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5ICYmIHN3aXBlci5wYXJhbXMuYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbikgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTsgLy8gUmV0dXJuIHBhZ2Ugc2Nyb2xsIG9uIGVkZ2UgcG9zaXRpb25zCgogICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9uID09PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpOyBlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZXZlbnRzKG1ldGhvZCkgewogICAgICAgICAgICBsZXQgdGFyZ2V0ID0gc3dpcGVyLiRlbDsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0ICE9PSAnY29udGFpbmVyJykgewogICAgICAgICAgICAgICAgdGFyZ2V0ID0gJChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGFyZ2V0W21ldGhvZF0oJ21vdXNlZW50ZXInLCBoYW5kbGVNb3VzZUVudGVyKTsKICAgICAgICAgICAgdGFyZ2V0W21ldGhvZF0oJ21vdXNlbGVhdmUnLCBoYW5kbGVNb3VzZUxlYXZlKTsKICAgICAgICAgICAgdGFyZ2V0W21ldGhvZF0oJ3doZWVsJywgaGFuZGxlKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGVuYWJsZSgpIHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgewogICAgICAgICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIGhhbmRsZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgZXZlbnRzKCdvbicpOwogICAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkID0gdHJ1ZTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBkaXNhYmxlKCkgewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGV2ZW50cygnb2ZmJyk7CiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBvbignaW5pdCcsICgpID0+IHsKICAgICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHsKICAgICAgICAgICAgICAgIGRpc2FibGUoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5lbmFibGVkKSBlbmFibGUoKTsKICAgICAgICB9KTsKICAgICAgICBvbignZGVzdHJveScsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgewogICAgICAgICAgICAgICAgZW5hYmxlKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSBkaXNhYmxlKCk7CiAgICAgICAgfSk7CiAgICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIubW91c2V3aGVlbCwgewogICAgICAgICAgICBlbmFibGUsCiAgICAgICAgICAgIGRpc2FibGUKICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgb3JpZ2luYWxQYXJhbXMsIHBhcmFtcywgY2hlY2tQcm9wcykgewogICAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTsKCiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHsKICAgICAgICAgICAgT2JqZWN0LmtleXMoY2hlY2tQcm9wcykuZm9yRWFjaChrZXkgPT4gewogICAgICAgICAgICAgICAgaWYgKCFwYXJhbXNba2V5XSAmJiBwYXJhbXMuYXV0byA9PT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gc3dpcGVyLiRlbC5jaGlsZHJlbihgLiR7Y2hlY2tQcm9wc1trZXldfWApWzBdOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIWVsZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNoZWNrUHJvcHNba2V5XTsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLiRlbC5hcHBlbmQoZWxlbWVudCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBwYXJhbXNba2V5XSA9IGVsZW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHBhcmFtczsKICAgIH0KCiAgICBmdW5jdGlvbiBOYXZpZ2F0aW9uKF9yZWYpIHsKICAgICAgICBsZXQgewogICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgIGV4dGVuZFBhcmFtcywKICAgICAgICAgICAgb24sCiAgICAgICAgICAgIGVtaXQKICAgICAgICB9ID0gX3JlZjsKICAgICAgICBleHRlbmRQYXJhbXMoewogICAgICAgICAgICBuYXZpZ2F0aW9uOiB7CiAgICAgICAgICAgICAgICBuZXh0RWw6IG51bGwsCiAgICAgICAgICAgICAgICBwcmV2RWw6IG51bGwsCiAgICAgICAgICAgICAgICBoaWRlT25DbGljazogZmFsc2UsCiAgICAgICAgICAgICAgICBkaXNhYmxlZENsYXNzOiAnc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCcsCiAgICAgICAgICAgICAgICBoaWRkZW5DbGFzczogJ3N3aXBlci1idXR0b24taGlkZGVuJywKICAgICAgICAgICAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1idXR0b24tbG9jaycsCiAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uRGlzYWJsZWRDbGFzczogJ3N3aXBlci1uYXZpZ2F0aW9uLWRpc2FibGVkJwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgc3dpcGVyLm5hdmlnYXRpb24gPSB7CiAgICAgICAgICAgIG5leHRFbDogbnVsbCwKICAgICAgICAgICAgJG5leHRFbDogbnVsbCwKICAgICAgICAgICAgcHJldkVsOiBudWxsLAogICAgICAgICAgICAkcHJldkVsOiBudWxsCiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gZ2V0RWwoZWwpIHsKICAgICAgICAgICAgbGV0ICRlbDsKCiAgICAgICAgICAgIGlmIChlbCkgewogICAgICAgICAgICAgICAgJGVsID0gJChlbCk7CgogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIGVsID09PSAnc3RyaW5nJyAmJiAkZWwubGVuZ3RoID4gMSAmJiBzd2lwZXIuJGVsLmZpbmQoZWwpLmxlbmd0aCA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgICRlbCA9IHN3aXBlci4kZWwuZmluZChlbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiAkZWw7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB0b2dnbGVFbCgkZWwsIGRpc2FibGVkKSB7CiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjsKCiAgICAgICAgICAgIGlmICgkZWwgJiYgJGVsLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICRlbFtkaXNhYmxlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMuZGlzYWJsZWRDbGFzcyk7CiAgICAgICAgICAgICAgICBpZiAoJGVsWzBdICYmICRlbFswXS50YWdOYW1lID09PSAnQlVUVE9OJykgJGVsWzBdLmRpc2FibGVkID0gZGlzYWJsZWQ7CgogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkgewogICAgICAgICAgICAgICAgICAgICRlbFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ocGFyYW1zLmxvY2tDbGFzcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHVwZGF0ZSgpIHsKICAgICAgICAgICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9ucwogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgICRuZXh0RWwsCiAgICAgICAgICAgICAgICAkcHJldkVsCiAgICAgICAgICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjsKICAgICAgICAgICAgdG9nZ2xlRWwoJHByZXZFbCwgc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLnJld2luZCk7CiAgICAgICAgICAgIHRvZ2dsZUVsKCRuZXh0RWwsIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gb25QcmV2Q2xpY2soZSkgewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHJldHVybjsKICAgICAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpOwogICAgICAgICAgICBlbWl0KCduYXZpZ2F0aW9uUHJldicpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gb25OZXh0Q2xpY2soZSkgewogICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHJldHVybjsKICAgICAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpOwogICAgICAgICAgICBlbWl0KCduYXZpZ2F0aW9uTmV4dCcpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uOwogICAgICAgICAgICBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24gPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLm5hdmlnYXRpb24sIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbiwgewogICAgICAgICAgICAgICAgbmV4dEVsOiAnc3dpcGVyLWJ1dHRvbi1uZXh0JywKICAgICAgICAgICAgICAgIHByZXZFbDogJ3N3aXBlci1idXR0b24tcHJldicKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGlmICghKHBhcmFtcy5uZXh0RWwgfHwgcGFyYW1zLnByZXZFbCkpIHJldHVybjsKICAgICAgICAgICAgY29uc3QgJG5leHRFbCA9IGdldEVsKHBhcmFtcy5uZXh0RWwpOwogICAgICAgICAgICBjb25zdCAkcHJldkVsID0gZ2V0RWwocGFyYW1zLnByZXZFbCk7CgogICAgICAgICAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICRuZXh0RWwub24oJ2NsaWNrJywgb25OZXh0Q2xpY2spOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICRwcmV2RWwub24oJ2NsaWNrJywgb25QcmV2Q2xpY2spOwogICAgICAgICAgICB9CgogICAgICAgICAgICBPYmplY3QuYXNzaWduKHN3aXBlci5uYXZpZ2F0aW9uLCB7CiAgICAgICAgICAgICAgICAkbmV4dEVsLAogICAgICAgICAgICAgICAgbmV4dEVsOiAkbmV4dEVsICYmICRuZXh0RWxbMF0sCiAgICAgICAgICAgICAgICAkcHJldkVsLAogICAgICAgICAgICAgICAgcHJldkVsOiAkcHJldkVsICYmICRwcmV2RWxbMF0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSB7CiAgICAgICAgICAgICAgICBpZiAoJG5leHRFbCkgJG5leHRFbC5hZGRDbGFzcyhwYXJhbXMubG9ja0NsYXNzKTsKICAgICAgICAgICAgICAgIGlmICgkcHJldkVsKSAkcHJldkVsLmFkZENsYXNzKHBhcmFtcy5sb2NrQ2xhc3MpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBkZXN0cm95KCkgewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICAkbmV4dEVsLAogICAgICAgICAgICAgICAgJHByZXZFbAogICAgICAgICAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247CgogICAgICAgICAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCkgewogICAgICAgICAgICAgICAgJG5leHRFbC5vZmYoJ2NsaWNrJywgb25OZXh0Q2xpY2spOwogICAgICAgICAgICAgICAgJG5leHRFbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAkcHJldkVsLm9mZignY2xpY2snLCBvblByZXZDbGljayk7CiAgICAgICAgICAgICAgICAkcHJldkVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgb24oJ2luaXQnLCAoKSA9PiB7CiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZW5hYmxlZCA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQogICAgICAgICAgICAgICAgZGlzYWJsZSgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaW5pdCgpOwogICAgICAgICAgICAgICAgdXBkYXRlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbigndG9FZGdlIGZyb21FZGdlIGxvY2sgdW5sb2NrJywgKCkgPT4gewogICAgICAgICAgICB1cGRhdGUoKTsKICAgICAgICB9KTsKICAgICAgICBvbignZGVzdHJveScsICgpID0+IHsKICAgICAgICAgICAgZGVzdHJveSgpOwogICAgICAgIH0pOwogICAgICAgIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgJG5leHRFbCwKICAgICAgICAgICAgICAgICRwcmV2RWwKICAgICAgICAgICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uOwoKICAgICAgICAgICAgaWYgKCRuZXh0RWwpIHsKICAgICAgICAgICAgICAgICRuZXh0RWxbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmxvY2tDbGFzcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkcHJldkVsKSB7CiAgICAgICAgICAgICAgICAkcHJldkVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgb24oJ2NsaWNrJywgKF9zLCBlKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgICRuZXh0RWwsCiAgICAgICAgICAgICAgICAkcHJldkVsCiAgICAgICAgICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjsKICAgICAgICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZU9uQ2xpY2sgJiYgISQodGFyZ2V0RWwpLmlzKCRwcmV2RWwpICYmICEkKHRhcmdldEVsKS5pcygkbmV4dEVsKSkgewogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIChzd2lwZXIucGFnaW5hdGlvbi5lbCA9PT0gdGFyZ2V0RWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uZWwuY29udGFpbnModGFyZ2V0RWwpKSkgcmV0dXJuOwogICAgICAgICAgICAgICAgbGV0IGlzSGlkZGVuOwoKICAgICAgICAgICAgICAgIGlmICgkbmV4dEVsKSB7CiAgICAgICAgICAgICAgICAgICAgaXNIaWRkZW4gPSAkbmV4dEVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRwcmV2RWwpIHsKICAgICAgICAgICAgICAgICAgICBpc0hpZGRlbiA9ICRwcmV2RWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICBlbWl0KCduYXZpZ2F0aW9uU2hvdycpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBlbWl0KCduYXZpZ2F0aW9uSGlkZScpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgkbmV4dEVsKSB7CiAgICAgICAgICAgICAgICAgICAgJG5leHRFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgkcHJldkVsKSB7CiAgICAgICAgICAgICAgICAgICAgJHByZXZFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIGNvbnN0IGVuYWJsZSA9ICgpID0+IHsKICAgICAgICAgICAgc3dpcGVyLiRlbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3MpOwogICAgICAgICAgICBpbml0KCk7CiAgICAgICAgICAgIHVwZGF0ZSgpOwogICAgICAgIH07CgogICAgICAgIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7CiAgICAgICAgICAgIHN3aXBlci4kZWwuYWRkQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5hdmlnYXRpb25EaXNhYmxlZENsYXNzKTsKICAgICAgICAgICAgZGVzdHJveSgpOwogICAgICAgIH07CgogICAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLm5hdmlnYXRpb24sIHsKICAgICAgICAgICAgZW5hYmxlLAogICAgICAgICAgICBkaXNhYmxlLAogICAgICAgICAgICB1cGRhdGUsCiAgICAgICAgICAgIGluaXQsCiAgICAgICAgICAgIGRlc3Ryb3kKICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBjbGFzc2VzVG9TZWxlY3RvcihjbGFzc2VzKSB7CiAgICAgICAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkgewogICAgICAgICAgICBjbGFzc2VzID0gJyc7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gYC4ke2NsYXNzZXMudHJpbSgpLnJlcGxhY2UoLyhbXC46IVwvXSkvZywgJ1xcJDEnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCiAgICAgICAgICAgIC5yZXBsYWNlKC8gL2csICcuJyl9YDsKICAgIH0KCiAgICBmdW5jdGlvbiBQYWdpbmF0aW9uKF9yZWYpIHsKICAgICAgICBsZXQgewogICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgIGV4dGVuZFBhcmFtcywKICAgICAgICAgICAgb24sCiAgICAgICAgICAgIGVtaXQKICAgICAgICB9ID0gX3JlZjsKICAgICAgICBjb25zdCBwZnggPSAnc3dpcGVyLXBhZ2luYXRpb24nOwogICAgICAgIGV4dGVuZFBhcmFtcyh7CiAgICAgICAgICAgIHBhZ2luYXRpb246IHsKICAgICAgICAgICAgICAgIGVsOiBudWxsLAogICAgICAgICAgICAgICAgYnVsbGV0RWxlbWVudDogJ3NwYW4nLAogICAgICAgICAgICAgICAgY2xpY2thYmxlOiBmYWxzZSwKICAgICAgICAgICAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSwKICAgICAgICAgICAgICAgIHJlbmRlckJ1bGxldDogbnVsbCwKICAgICAgICAgICAgICAgIHJlbmRlclByb2dyZXNzYmFyOiBudWxsLAogICAgICAgICAgICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsCiAgICAgICAgICAgICAgICByZW5kZXJDdXN0b206IG51bGwsCiAgICAgICAgICAgICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlOiBmYWxzZSwKICAgICAgICAgICAgICAgIHR5cGU6ICdidWxsZXRzJywKICAgICAgICAgICAgICAgIC8vICdidWxsZXRzJyBvciAncHJvZ3Jlc3NiYXInIG9yICdmcmFjdGlvbicgb3IgJ2N1c3RvbScKICAgICAgICAgICAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSwKICAgICAgICAgICAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSwKICAgICAgICAgICAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogbnVtYmVyID0+IG51bWJlciwKICAgICAgICAgICAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IG51bWJlciA9PiBudW1iZXIsCiAgICAgICAgICAgICAgICBidWxsZXRDbGFzczogYCR7cGZ4fS1idWxsZXRgLAogICAgICAgICAgICAgICAgYnVsbGV0QWN0aXZlQ2xhc3M6IGAke3BmeH0tYnVsbGV0LWFjdGl2ZWAsCiAgICAgICAgICAgICAgICBtb2RpZmllckNsYXNzOiBgJHtwZnh9LWAsCiAgICAgICAgICAgICAgICBjdXJyZW50Q2xhc3M6IGAke3BmeH0tY3VycmVudGAsCiAgICAgICAgICAgICAgICB0b3RhbENsYXNzOiBgJHtwZnh9LXRvdGFsYCwKICAgICAgICAgICAgICAgIGhpZGRlbkNsYXNzOiBgJHtwZnh9LWhpZGRlbmAsCiAgICAgICAgICAgICAgICBwcm9ncmVzc2JhckZpbGxDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1maWxsYCwKICAgICAgICAgICAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1vcHBvc2l0ZWAsCiAgICAgICAgICAgICAgICBjbGlja2FibGVDbGFzczogYCR7cGZ4fS1jbGlja2FibGVgLAogICAgICAgICAgICAgICAgbG9ja0NsYXNzOiBgJHtwZnh9LWxvY2tgLAogICAgICAgICAgICAgICAgaG9yaXpvbnRhbENsYXNzOiBgJHtwZnh9LWhvcml6b250YWxgLAogICAgICAgICAgICAgICAgdmVydGljYWxDbGFzczogYCR7cGZ4fS12ZXJ0aWNhbGAsCiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uRGlzYWJsZWRDbGFzczogYCR7cGZ4fS1kaXNhYmxlZGAKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHN3aXBlci5wYWdpbmF0aW9uID0gewogICAgICAgICAgICBlbDogbnVsbCwKICAgICAgICAgICAgJGVsOiBudWxsLAogICAgICAgICAgICBidWxsZXRzOiBbXQogICAgICAgIH07CiAgICAgICAgbGV0IGJ1bGxldFNpemU7CiAgICAgICAgbGV0IGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7CgogICAgICAgIGZ1bmN0aW9uIGlzUGFnaW5hdGlvbkRpc2FibGVkKCkgewogICAgICAgICAgICByZXR1cm4gIXN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2V0U2lkZUJ1bGxldHMoJGJ1bGxldEVsLCBwb3NpdGlvbikgewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBidWxsZXRBY3RpdmVDbGFzcwogICAgICAgICAgICB9ID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uOwogICAgICAgICAgICAkYnVsbGV0RWxbcG9zaXRpb25dKCkuYWRkQ2xhc3MoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259YClbcG9zaXRpb25dKCkuYWRkQ2xhc3MoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259LSR7cG9zaXRpb259YCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1cGRhdGUoKSB7CiAgICAgICAgICAgIC8vIFJlbmRlciB8fCBVcGRhdGUgUGFnaW5hdGlvbiBidWxsZXRzL2l0ZW1zCiAgICAgICAgICAgIGNvbnN0IHJ0bCA9IHN3aXBlci5ydGw7CiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjsKICAgICAgICAgICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjsKICAgICAgICAgICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7CiAgICAgICAgICAgIGNvbnN0ICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDsgLy8gQ3VycmVudC9Ub3RhbAoKICAgICAgICAgICAgbGV0IGN1cnJlbnQ7CiAgICAgICAgICAgIGNvbnN0IHRvdGFsID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMikgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50ID0gTWF0aC5jZWlsKChzd2lwZXIuYWN0aXZlSW5kZXggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApOwoKICAgICAgICAgICAgICAgIGlmIChjdXJyZW50ID4gc2xpZGVzTGVuZ3RoIC0gMSAtIHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSB7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudCAtPSBzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCA+IHRvdGFsIC0gMSkgY3VycmVudCAtPSB0b3RhbDsKICAgICAgICAgICAgICAgIGlmIChjdXJyZW50IDwgMCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb25UeXBlICE9PSAnYnVsbGV0cycpIGN1cnJlbnQgPSB0b3RhbCArIGN1cnJlbnQ7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDsKICAgICAgICAgICAgfSAvLyBUeXBlcwoKCiAgICAgICAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBjb25zdCBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0czsKICAgICAgICAgICAgICAgIGxldCBmaXJzdEluZGV4OwogICAgICAgICAgICAgICAgbGV0IGxhc3RJbmRleDsKICAgICAgICAgICAgICAgIGxldCBtaWRJbmRleDsKCiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7CiAgICAgICAgICAgICAgICAgICAgYnVsbGV0U2l6ZSA9IGJ1bGxldHMuZXEoMClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ291dGVyV2lkdGgnIDogJ291dGVySGVpZ2h0J10odHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgJGVsLmNzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnd2lkdGgnIDogJ2hlaWdodCcsIGAke2J1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpfXB4YCk7CgogICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID4gMSAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCArPSBjdXJyZW50IC0gKHN3aXBlci5wcmV2aW91c0luZGV4IC0gc3dpcGVyLmxvb3BlZFNsaWRlcyB8fCAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPiBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZHluYW1pY0J1bGxldEluZGV4IDwgMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZmlyc3RJbmRleCA9IE1hdGgubWF4KGN1cnJlbnQgLSBkeW5hbWljQnVsbGV0SW5kZXgsIDApOwogICAgICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7CiAgICAgICAgICAgICAgICAgICAgbWlkSW5kZXggPSAobGFzdEluZGV4ICsgZmlyc3RJbmRleCkgLyAyOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGJ1bGxldHMucmVtb3ZlQ2xhc3MoWycnLCAnLW5leHQnLCAnLW5leHQtbmV4dCcsICctcHJldicsICctcHJldi1wcmV2JywgJy1tYWluJ10ubWFwKHN1ZmZpeCA9PiBgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9JHtzdWZmaXh9YCkuam9pbignICcpKTsKCiAgICAgICAgICAgICAgICBpZiAoJGVsLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgICAgICBidWxsZXRzLmVhY2goYnVsbGV0ID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgJGJ1bGxldCA9ICQoYnVsbGV0KTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVsbGV0SW5kZXggPSAkYnVsbGV0LmluZGV4KCk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGN1cnJlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTaWRlQnVsbGV0cygkYnVsbGV0LCAncHJldicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gbGFzdEluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoJGJ1bGxldCwgJ25leHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCAkYnVsbGV0ID0gYnVsbGV0cy5lcShjdXJyZW50KTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBidWxsZXRJbmRleCA9ICRidWxsZXQuaW5kZXgoKTsKICAgICAgICAgICAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7CgogICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgJGZpcnN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0cy5lcShmaXJzdEluZGV4KTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgJGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGxhc3RJbmRleCk7CgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVsbGV0cy5lcShpKS5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGJ1bGxldHMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHM7IGkgPj0gMDsgaSAtPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1bGxldHMuZXEoYnVsbGV0cy5sZW5ndGggLSBpKS5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1bGxldHMuZXEoYnVsbGV0cy5sZW5ndGggLSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2YCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKCRmaXJzdERpc3BsYXllZEJ1bGxldCwgJ3ByZXYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTaWRlQnVsbGV0cygkbGFzdERpc3BsYXllZEJ1bGxldCwgJ25leHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKCRmaXJzdERpc3BsYXllZEJ1bGxldCwgJ3ByZXYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKCRsYXN0RGlzcGxheWVkQnVsbGV0LCAnbmV4dCcpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBkeW5hbWljQnVsbGV0c0xlbmd0aCA9IE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCk7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnVsbGV0c09mZnNldCA9IChidWxsZXRTaXplICogZHluYW1pY0J1bGxldHNMZW5ndGggLSBidWxsZXRTaXplKSAvIDIgLSBtaWRJbmRleCAqIGJ1bGxldFNpemU7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7CiAgICAgICAgICAgICAgICAgICAgYnVsbGV0cy5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnLCBgJHtidWxsZXRzT2Zmc2V0fXB4YCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykgewogICAgICAgICAgICAgICAgJGVsLmZpbmQoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmN1cnJlbnRDbGFzcykpLnRleHQocGFyYW1zLmZvcm1hdEZyYWN0aW9uQ3VycmVudChjdXJyZW50ICsgMSkpOwogICAgICAgICAgICAgICAgJGVsLmZpbmQoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLnRvdGFsQ2xhc3MpKS50ZXh0KHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJykgewogICAgICAgICAgICAgICAgbGV0IHByb2dyZXNzYmFyRGlyZWN0aW9uOwoKICAgICAgICAgICAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkgewogICAgICAgICAgICAgICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJzsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsOwogICAgICAgICAgICAgICAgbGV0IHNjYWxlWCA9IDE7CiAgICAgICAgICAgICAgICBsZXQgc2NhbGVZID0gMTsKCiAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykgewogICAgICAgICAgICAgICAgICAgIHNjYWxlWCA9IHNjYWxlOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBzY2FsZVkgPSBzY2FsZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkZWwuZmluZChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJHtzY2FsZVh9KSBzY2FsZVkoJHtzY2FsZVl9KWApLnRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2N1c3RvbScgJiYgcGFyYW1zLnJlbmRlckN1c3RvbSkgewogICAgICAgICAgICAgICAgJGVsLmh0bWwocGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCkpOwogICAgICAgICAgICAgICAgZW1pdCgncGFnaW5hdGlvblJlbmRlcicsICRlbFswXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBlbWl0KCdwYWdpbmF0aW9uVXBkYXRlJywgJGVsWzBdKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkgewogICAgICAgICAgICAgICAgJGVsW3N3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICAgICAgICAvLyBSZW5kZXIgQ29udGFpbmVyCiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjsKICAgICAgICAgICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjsKICAgICAgICAgICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7CiAgICAgICAgICAgIGNvbnN0ICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDsKICAgICAgICAgICAgbGV0IHBhZ2luYXRpb25IVE1MID0gJyc7CgogICAgICAgICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykgewogICAgICAgICAgICAgICAgbGV0IG51bWJlck9mQnVsbGV0cyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoOwoKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIG51bWJlck9mQnVsbGV0cyA+IHNsaWRlc0xlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIG51bWJlck9mQnVsbGV0cyA9IHNsaWRlc0xlbmd0aDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mQnVsbGV0czsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5yZW5kZXJCdWxsZXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gcGFyYW1zLnJlbmRlckJ1bGxldC5jYWxsKHN3aXBlciwgaSwgcGFyYW1zLmJ1bGxldENsYXNzKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBgPCR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9IGNsYXNzPSIke3BhcmFtcy5idWxsZXRDbGFzc30iPjwvJHtwYXJhbXMuYnVsbGV0RWxlbWVudH0+YDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpOwogICAgICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyA9ICRlbC5maW5kKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcykpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHsKICAgICAgICAgICAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHsKICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJGcmFjdGlvbi5jYWxsKHN3aXBlciwgcGFyYW1zLmN1cnJlbnRDbGFzcywgcGFyYW1zLnRvdGFsQ2xhc3MpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz0iJHtwYXJhbXMuY3VycmVudENsYXNzfSI+PC9zcGFuPmAgKyAnIC8gJyArIGA8c3BhbiBjbGFzcz0iJHtwYXJhbXMudG90YWxDbGFzc30iPjwvc3Bhbj5gOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7CiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLnJlbmRlclByb2dyZXNzYmFyKSB7CiAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPSIke3BhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzc30iPjwvc3Bhbj5gOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykgewogICAgICAgICAgICAgICAgZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN3aXBlci5wYWdpbmF0aW9uLiRlbFswXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7CiAgICAgICAgICAgIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBzd2lwZXIub3JpZ2luYWxQYXJhbXMucGFnaW5hdGlvbiwgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLCB7CiAgICAgICAgICAgICAgICBlbDogJ3N3aXBlci1wYWdpbmF0aW9uJwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uOwogICAgICAgICAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuOwogICAgICAgICAgICBsZXQgJGVsID0gJChwYXJhbXMuZWwpOwogICAgICAgICAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuOwoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgJGVsLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgICRlbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMuZWwpOyAvLyBjaGVjayBpZiBpdCBiZWxvbmdzIHRvIGFub3RoZXIgbmVzdGVkIFN3aXBlcgoKICAgICAgICAgICAgICAgIGlmICgkZWwubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgICAgICRlbCA9ICRlbC5maWx0ZXIoZWwgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoJChlbCkucGFyZW50cygnLnN3aXBlcicpWzBdICE9PSBzd2lwZXIuZWwpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5jbGlja2FibGUpIHsKICAgICAgICAgICAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMuY2xpY2thYmxlQ2xhc3MpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7CiAgICAgICAgICAgICRlbC5hZGRDbGFzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpOwoKICAgICAgICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7CiAgICAgICAgICAgICAgICAkZWwuYWRkQ2xhc3MoYCR7cGFyYW1zLm1vZGlmaWVyQ2xhc3N9JHtwYXJhbXMudHlwZX0tZHluYW1pY2ApOwogICAgICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gMDsKCiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA8IDEpIHsKICAgICAgICAgICAgICAgICAgICBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID0gMTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInICYmIHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7CiAgICAgICAgICAgICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7CiAgICAgICAgICAgICAgICAkZWwub24oJ2NsaWNrJywgY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSwgZnVuY3Rpb24gb25DbGljayhlKSB7CiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9ICQodGhpcykuaW5kZXgoKSAqIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgaW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlczsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFnaW5hdGlvbiwgewogICAgICAgICAgICAgICAgJGVsLAogICAgICAgICAgICAgICAgZWw6ICRlbFswXQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHsKICAgICAgICAgICAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMubG9ja0NsYXNzKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uOwogICAgICAgICAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuOwogICAgICAgICAgICBjb25zdCAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7CiAgICAgICAgICAgICRlbC5yZW1vdmVDbGFzcyhwYXJhbXMuaGlkZGVuQ2xhc3MpOwogICAgICAgICAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7CiAgICAgICAgICAgICRlbC5yZW1vdmVDbGFzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpOwogICAgICAgICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLnJlbW92ZUNsYXNzKSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLnJlbW92ZUNsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7CgogICAgICAgICAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkgewogICAgICAgICAgICAgICAgJGVsLm9mZignY2xpY2snLCBjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMuYnVsbGV0Q2xhc3MpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgb24oJ2luaXQnLCAoKSA9PiB7CiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZW5hYmxlZCA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQogICAgICAgICAgICAgICAgZGlzYWJsZSgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaW5pdCgpOwogICAgICAgICAgICAgICAgcmVuZGVyKCk7CiAgICAgICAgICAgICAgICB1cGRhdGUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIG9uKCdhY3RpdmVJbmRleENoYW5nZScsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgewogICAgICAgICAgICAgICAgdXBkYXRlKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICB1cGRhdGUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIG9uKCdzbmFwSW5kZXhDaGFuZ2UnLCAoKSA9PiB7CiAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7CiAgICAgICAgICAgICAgICB1cGRhdGUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIG9uKCdzbGlkZXNMZW5ndGhDaGFuZ2UnLCAoKSA9PiB7CiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHsKICAgICAgICAgICAgICAgIHJlbmRlcigpOwogICAgICAgICAgICAgICAgdXBkYXRlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbignc25hcEdyaWRMZW5ndGhDaGFuZ2UnLCAoKSA9PiB7CiAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7CiAgICAgICAgICAgICAgICByZW5kZXIoKTsKICAgICAgICAgICAgICAgIHVwZGF0ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7CiAgICAgICAgICAgIGRlc3Ryb3koKTsKICAgICAgICB9KTsKICAgICAgICBvbignZW5hYmxlIGRpc2FibGUnLCAoKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgICRlbAogICAgICAgICAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247CgogICAgICAgICAgICBpZiAoJGVsKSB7CiAgICAgICAgICAgICAgICAkZWxbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmxvY2tDbGFzcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbignbG9jayB1bmxvY2snLCAoKSA9PiB7CiAgICAgICAgICAgIHVwZGF0ZSgpOwogICAgICAgIH0pOwogICAgICAgIG9uKCdjbGljaycsIChfcywgZSkgPT4gewogICAgICAgICAgICBjb25zdCB0YXJnZXRFbCA9IGUudGFyZ2V0OwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICAkZWwKICAgICAgICAgICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uOwoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZU9uQ2xpY2sgJiYgJGVsICYmICRlbC5sZW5ndGggPiAwICYmICEkKHRhcmdldEVsKS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSB7CiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgKHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCAmJiB0YXJnZXRFbCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsIHx8IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCAmJiB0YXJnZXRFbCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKSkgcmV0dXJuOwogICAgICAgICAgICAgICAgY29uc3QgaXNIaWRkZW4gPSAkZWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTsKCiAgICAgICAgICAgICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICBlbWl0KCdwYWdpbmF0aW9uU2hvdycpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBlbWl0KCdwYWdpbmF0aW9uSGlkZScpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICRlbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIGNvbnN0IGVuYWJsZSA9ICgpID0+IHsKICAgICAgICAgICAgc3dpcGVyLiRlbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpOwoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLiRlbCkgewogICAgICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGluaXQoKTsKICAgICAgICAgICAgcmVuZGVyKCk7CiAgICAgICAgICAgIHVwZGF0ZSgpOwogICAgICAgIH07CgogICAgICAgIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7CiAgICAgICAgICAgIHN3aXBlci4kZWwuYWRkQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi4kZWwpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5hZGRDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkZXN0cm95KCk7CiAgICAgICAgfTsKCiAgICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFnaW5hdGlvbiwgewogICAgICAgICAgICBlbmFibGUsCiAgICAgICAgICAgIGRpc2FibGUsCiAgICAgICAgICAgIHJlbmRlciwKICAgICAgICAgICAgdXBkYXRlLAogICAgICAgICAgICBpbml0LAogICAgICAgICAgICBkZXN0cm95CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gU2Nyb2xsYmFyKF9yZWYpIHsKICAgICAgICBsZXQgewogICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgIGV4dGVuZFBhcmFtcywKICAgICAgICAgICAgb24sCiAgICAgICAgICAgIGVtaXQKICAgICAgICB9ID0gX3JlZjsKICAgICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7CiAgICAgICAgbGV0IGlzVG91Y2hlZCA9IGZhbHNlOwogICAgICAgIGxldCB0aW1lb3V0ID0gbnVsbDsKICAgICAgICBsZXQgZHJhZ1RpbWVvdXQgPSBudWxsOwogICAgICAgIGxldCBkcmFnU3RhcnRQb3M7CiAgICAgICAgbGV0IGRyYWdTaXplOwogICAgICAgIGxldCB0cmFja1NpemU7CiAgICAgICAgbGV0IGRpdmlkZXI7CiAgICAgICAgZXh0ZW5kUGFyYW1zKHsKICAgICAgICAgICAgc2Nyb2xsYmFyOiB7CiAgICAgICAgICAgICAgICBlbDogbnVsbCwKICAgICAgICAgICAgICAgIGRyYWdTaXplOiAnYXV0bycsCiAgICAgICAgICAgICAgICBoaWRlOiBmYWxzZSwKICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogZmFsc2UsCiAgICAgICAgICAgICAgICBzbmFwT25SZWxlYXNlOiB0cnVlLAogICAgICAgICAgICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1sb2NrJywKICAgICAgICAgICAgICAgIGRyYWdDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItZHJhZycsCiAgICAgICAgICAgICAgICBzY3JvbGxiYXJEaXNhYmxlZENsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1kaXNhYmxlZCcsCiAgICAgICAgICAgICAgICBob3Jpem9udGFsQ2xhc3M6IGBzd2lwZXItc2Nyb2xsYmFyLWhvcml6b250YWxgLAogICAgICAgICAgICAgICAgdmVydGljYWxDbGFzczogYHN3aXBlci1zY3JvbGxiYXItdmVydGljYWxgCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyID0gewogICAgICAgICAgICBlbDogbnVsbCwKICAgICAgICAgICAgZHJhZ0VsOiBudWxsLAogICAgICAgICAgICAkZWw6IG51bGwsCiAgICAgICAgICAgICRkcmFnRWw6IG51bGwKICAgICAgICB9OwoKICAgICAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7CiAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgc2Nyb2xsYmFyLAogICAgICAgICAgICAgICAgcnRsVHJhbnNsYXRlOiBydGwsCiAgICAgICAgICAgICAgICBwcm9ncmVzcwogICAgICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICAkZHJhZ0VsLAogICAgICAgICAgICAgICAgJGVsCiAgICAgICAgICAgIH0gPSBzY3JvbGxiYXI7CiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyOwogICAgICAgICAgICBsZXQgbmV3U2l6ZSA9IGRyYWdTaXplOwogICAgICAgICAgICBsZXQgbmV3UG9zID0gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKSAqIHByb2dyZXNzOwoKICAgICAgICAgICAgaWYgKHJ0bCkgewogICAgICAgICAgICAgICAgbmV3UG9zID0gLW5ld1BvczsKCiAgICAgICAgICAgICAgICBpZiAobmV3UG9zID4gMCkgewogICAgICAgICAgICAgICAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSAtIG5ld1BvczsKICAgICAgICAgICAgICAgICAgICBuZXdQb3MgPSAwOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgtbmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHsKICAgICAgICAgICAgICAgICAgICBuZXdTaXplID0gdHJhY2tTaXplICsgbmV3UG9zOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKG5ld1BvcyA8IDApIHsKICAgICAgICAgICAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSArIG5ld1BvczsKICAgICAgICAgICAgICAgIG5ld1BvcyA9IDA7CiAgICAgICAgICAgIH0gZWxzZSBpZiAobmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHsKICAgICAgICAgICAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgLSBuZXdQb3M7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHsKICAgICAgICAgICAgICAgICRkcmFnRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke25ld1Bvc31weCwgMCwgMClgKTsKICAgICAgICAgICAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSBgJHtuZXdTaXplfXB4YDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICRkcmFnRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwcHgsICR7bmV3UG9zfXB4LCAwKWApOwogICAgICAgICAgICAgICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSBgJHtuZXdTaXplfXB4YDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHBhcmFtcy5oaWRlKSB7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7CiAgICAgICAgICAgICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDE7CiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwOwogICAgICAgICAgICAgICAgICAgICRlbC50cmFuc2l0aW9uKDQwMCk7CiAgICAgICAgICAgICAgICB9LCAxMDAwKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikgewogICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47CiAgICAgICAgICAgIHN3aXBlci5zY3JvbGxiYXIuJGRyYWdFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVNpemUoKSB7CiAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgc2Nyb2xsYmFyCiAgICAgICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgICRkcmFnRWwsCiAgICAgICAgICAgICAgICAkZWwKICAgICAgICAgICAgfSA9IHNjcm9sbGJhcjsKICAgICAgICAgICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9ICcnOwogICAgICAgICAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9ICcnOwogICAgICAgICAgICB0cmFja1NpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkZWxbMF0ub2Zmc2V0V2lkdGggOiAkZWxbMF0ub2Zmc2V0SGVpZ2h0OwogICAgICAgICAgICBkaXZpZGVyID0gc3dpcGVyLnNpemUgLyAoc3dpcGVyLnZpcnR1YWxTaXplICsgc3dpcGVyLnBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgLSAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5zbmFwR3JpZFswXSA6IDApKTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSA9PT0gJ2F1dG8nKSB7CiAgICAgICAgICAgICAgICBkcmFnU2l6ZSA9IHRyYWNrU2l6ZSAqIGRpdmlkZXI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBkcmFnU2l6ZSA9IHBhcnNlSW50KHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplLCAxMCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHsKICAgICAgICAgICAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSBgJHtkcmFnU2l6ZX1weGA7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9IGAke2RyYWdTaXplfXB4YDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGRpdmlkZXIgPj0gMSkgewogICAgICAgICAgICAgICAgJGVsWzBdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkZWxbMF0uc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuaGlkZSkgewogICAgICAgICAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7CiAgICAgICAgICAgICAgICBzY3JvbGxiYXIuJGVsW3N3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRQb2ludGVyUG9zaXRpb24oZSkgewogICAgICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZS50eXBlID09PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRYIDogZS5jbGllbnRYOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gZS50eXBlID09PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZIDogZS5jbGllbnRZOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2V0RHJhZ1Bvc2l0aW9uKGUpIHsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgc2Nyb2xsYmFyLAogICAgICAgICAgICAgICAgcnRsVHJhbnNsYXRlOiBydGwKICAgICAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgJGVsCiAgICAgICAgICAgIH0gPSBzY3JvbGxiYXI7CiAgICAgICAgICAgIGxldCBwb3NpdGlvblJhdGlvOwogICAgICAgICAgICBwb3NpdGlvblJhdGlvID0gKGdldFBvaW50ZXJQb3NpdGlvbihlKSAtICRlbC5vZmZzZXQoKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJ10gLSAoZHJhZ1N0YXJ0UG9zICE9PSBudWxsID8gZHJhZ1N0YXJ0UG9zIDogZHJhZ1NpemUgLyAyKSkgLyAodHJhY2tTaXplIC0gZHJhZ1NpemUpOwogICAgICAgICAgICBwb3NpdGlvblJhdGlvID0gTWF0aC5tYXgoTWF0aC5taW4ocG9zaXRpb25SYXRpbywgMSksIDApOwoKICAgICAgICAgICAgaWYgKHJ0bCkgewogICAgICAgICAgICAgICAgcG9zaXRpb25SYXRpbyA9IDEgLSBwb3NpdGlvblJhdGlvOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpICogcG9zaXRpb25SYXRpbzsKICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHBvc2l0aW9uKTsKICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7CiAgICAgICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpOwogICAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gb25EcmFnU3RhcnQoZSkgewogICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgc2Nyb2xsYmFyLAogICAgICAgICAgICAgICAgJHdyYXBwZXJFbAogICAgICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICAkZWwsCiAgICAgICAgICAgICAgICAkZHJhZ0VsCiAgICAgICAgICAgIH0gPSBzY3JvbGxiYXI7CiAgICAgICAgICAgIGlzVG91Y2hlZCA9IHRydWU7CiAgICAgICAgICAgIGRyYWdTdGFydFBvcyA9IGUudGFyZ2V0ID09PSAkZHJhZ0VsWzBdIHx8IGUudGFyZ2V0ID09PSAkZHJhZ0VsID8gZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIDogbnVsbDsKICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb24oMTAwKTsKICAgICAgICAgICAgJGRyYWdFbC50cmFuc2l0aW9uKDEwMCk7CiAgICAgICAgICAgIHNldERyYWdQb3NpdGlvbihlKTsKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGRyYWdUaW1lb3V0KTsKICAgICAgICAgICAgJGVsLnRyYW5zaXRpb24oMCk7CgogICAgICAgICAgICBpZiAocGFyYW1zLmhpZGUpIHsKICAgICAgICAgICAgICAgICRlbC5jc3MoJ29wYWNpdHknLCAxKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgewogICAgICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdzY3JvbGwtc25hcC10eXBlJywgJ25vbmUnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZW1pdCgnc2Nyb2xsYmFyRHJhZ1N0YXJ0JywgZSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBvbkRyYWdNb3ZlKGUpIHsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgc2Nyb2xsYmFyLAogICAgICAgICAgICAgICAgJHdyYXBwZXJFbAogICAgICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICAkZWwsCiAgICAgICAgICAgICAgICAkZHJhZ0VsCiAgICAgICAgICAgIH0gPSBzY3JvbGxiYXI7CiAgICAgICAgICAgIGlmICghaXNUb3VjaGVkKSByZXR1cm47CiAgICAgICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7IGVsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlOwogICAgICAgICAgICBzZXREcmFnUG9zaXRpb24oZSk7CiAgICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigwKTsKICAgICAgICAgICAgJGVsLnRyYW5zaXRpb24oMCk7CiAgICAgICAgICAgICRkcmFnRWwudHJhbnNpdGlvbigwKTsKICAgICAgICAgICAgZW1pdCgnc2Nyb2xsYmFyRHJhZ01vdmUnLCBlKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG9uRHJhZ0VuZChlKSB7CiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyOwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBzY3JvbGxiYXIsCiAgICAgICAgICAgICAgICAkd3JhcHBlckVsCiAgICAgICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgICRlbAogICAgICAgICAgICB9ID0gc2Nyb2xsYmFyOwogICAgICAgICAgICBpZiAoIWlzVG91Y2hlZCkgcmV0dXJuOwogICAgICAgICAgICBpc1RvdWNoZWQgPSBmYWxzZTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHsKICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLmNzcygnc2Nyb2xsLXNuYXAtdHlwZScsICcnKTsKICAgICAgICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbignJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChwYXJhbXMuaGlkZSkgewogICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGRyYWdUaW1lb3V0KTsKICAgICAgICAgICAgICAgIGRyYWdUaW1lb3V0ID0gbmV4dFRpY2soKCkgPT4gewogICAgICAgICAgICAgICAgICAgICRlbC5jc3MoJ29wYWNpdHknLCAwKTsKICAgICAgICAgICAgICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApOwogICAgICAgICAgICAgICAgfSwgMTAwMCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGVtaXQoJ3Njcm9sbGJhckRyYWdFbmQnLCBlKTsKCiAgICAgICAgICAgIGlmIChwYXJhbXMuc25hcE9uUmVsZWFzZSkgewogICAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGV2ZW50cyhtZXRob2QpIHsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgc2Nyb2xsYmFyLAogICAgICAgICAgICAgICAgdG91Y2hFdmVudHNUb3VjaCwKICAgICAgICAgICAgICAgIHRvdWNoRXZlbnRzRGVza3RvcCwKICAgICAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgICAgIHN1cHBvcnQKICAgICAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICAgICAgY29uc3QgJGVsID0gc2Nyb2xsYmFyLiRlbDsKICAgICAgICAgICAgaWYgKCEkZWwpIHJldHVybjsKICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gJGVsWzBdOwogICAgICAgICAgICBjb25zdCBhY3RpdmVMaXN0ZW5lciA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8gewogICAgICAgICAgICAgICAgcGFzc2l2ZTogZmFsc2UsCiAgICAgICAgICAgICAgICBjYXB0dXJlOiBmYWxzZQogICAgICAgICAgICB9IDogZmFsc2U7CiAgICAgICAgICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8gewogICAgICAgICAgICAgICAgcGFzc2l2ZTogdHJ1ZSwKICAgICAgICAgICAgICAgIGNhcHR1cmU6IGZhbHNlCiAgICAgICAgICAgIH0gOiBmYWxzZTsKICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHJldHVybjsKICAgICAgICAgICAgY29uc3QgZXZlbnRNZXRob2QgPSBtZXRob2QgPT09ICdvbicgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7CgogICAgICAgICAgICBpZiAoIXN1cHBvcnQudG91Y2gpIHsKICAgICAgICAgICAgICAgIHRhcmdldFtldmVudE1ldGhvZF0odG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LCBvbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpOwogICAgICAgICAgICAgICAgZG9jdW1lbnRbZXZlbnRNZXRob2RdKHRvdWNoRXZlbnRzRGVza3RvcC5tb3ZlLCBvbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7CiAgICAgICAgICAgICAgICBkb2N1bWVudFtldmVudE1ldGhvZF0odG91Y2hFdmVudHNEZXNrdG9wLmVuZCwgb25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGFyZ2V0W2V2ZW50TWV0aG9kXSh0b3VjaEV2ZW50c1RvdWNoLnN0YXJ0LCBvbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpOwogICAgICAgICAgICAgICAgdGFyZ2V0W2V2ZW50TWV0aG9kXSh0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIG9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTsKICAgICAgICAgICAgICAgIHRhcmdldFtldmVudE1ldGhvZF0odG91Y2hFdmVudHNUb3VjaC5lbmQsIG9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZW5hYmxlRHJhZ2dhYmxlKCkgewogICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47CiAgICAgICAgICAgIGV2ZW50cygnb24nKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGRpc2FibGVEcmFnZ2FibGUoKSB7CiAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjsKICAgICAgICAgICAgZXZlbnRzKCdvZmYnKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgIHNjcm9sbGJhciwKICAgICAgICAgICAgICAgICRlbDogJHN3aXBlckVsCiAgICAgICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgICAgIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5zY3JvbGxiYXIsIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLCB7CiAgICAgICAgICAgICAgICBlbDogJ3N3aXBlci1zY3JvbGxiYXInCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjsKICAgICAgICAgICAgaWYgKCFwYXJhbXMuZWwpIHJldHVybjsKICAgICAgICAgICAgbGV0ICRlbCA9ICQocGFyYW1zLmVsKTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmICRlbC5sZW5ndGggPiAxICYmICRzd2lwZXJFbC5maW5kKHBhcmFtcy5lbCkubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICAgICAgICAkZWwgPSAkc3dpcGVyRWwuZmluZChwYXJhbXMuZWwpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkZWwuYWRkQ2xhc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTsKICAgICAgICAgICAgbGV0ICRkcmFnRWwgPSAkZWwuZmluZChgLiR7c3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzfWApOwoKICAgICAgICAgICAgaWYgKCRkcmFnRWwubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAkZHJhZ0VsID0gJChgPGRpdiBjbGFzcz0iJHtzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnQ2xhc3N9Ij48L2Rpdj5gKTsKICAgICAgICAgICAgICAgICRlbC5hcHBlbmQoJGRyYWdFbCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc2Nyb2xsYmFyLCB7CiAgICAgICAgICAgICAgICAkZWwsCiAgICAgICAgICAgICAgICBlbDogJGVsWzBdLAogICAgICAgICAgICAgICAgJGRyYWdFbCwKICAgICAgICAgICAgICAgIGRyYWdFbDogJGRyYWdFbFswXQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChwYXJhbXMuZHJhZ2dhYmxlKSB7CiAgICAgICAgICAgICAgICBlbmFibGVEcmFnZ2FibGUoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRlbCkgewogICAgICAgICAgICAgICAgJGVsW3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmxvY2tDbGFzcyk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyOwogICAgICAgICAgICBjb25zdCAkZWwgPSBzd2lwZXIuc2Nyb2xsYmFyLiRlbDsKCiAgICAgICAgICAgIGlmICgkZWwpIHsKICAgICAgICAgICAgICAgICRlbC5yZW1vdmVDbGFzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkaXNhYmxlRHJhZ2dhYmxlKCk7CiAgICAgICAgfQoKICAgICAgICBvbignaW5pdCcsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVuYWJsZWQgPT09IGZhbHNlKSB7CiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKICAgICAgICAgICAgICAgIGRpc2FibGUoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGluaXQoKTsKICAgICAgICAgICAgICAgIHVwZGF0ZVNpemUoKTsKICAgICAgICAgICAgICAgIHNldFRyYW5zbGF0ZSgpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgb24oJ3VwZGF0ZSByZXNpemUgb2JzZXJ2ZXJVcGRhdGUgbG9jayB1bmxvY2snLCAoKSA9PiB7CiAgICAgICAgICAgIHVwZGF0ZVNpemUoKTsKICAgICAgICB9KTsKICAgICAgICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4gewogICAgICAgICAgICBzZXRUcmFuc2xhdGUoKTsKICAgICAgICB9KTsKICAgICAgICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24pID0+IHsKICAgICAgICAgICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7CiAgICAgICAgfSk7CiAgICAgICAgb24oJ2VuYWJsZSBkaXNhYmxlJywgKCkgPT4gewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICAkZWwKICAgICAgICAgICAgfSA9IHN3aXBlci5zY3JvbGxiYXI7CgogICAgICAgICAgICBpZiAoJGVsKSB7CiAgICAgICAgICAgICAgICAkZWxbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIG9uKCdkZXN0cm95JywgKCkgPT4gewogICAgICAgICAgICBkZXN0cm95KCk7CiAgICAgICAgfSk7CgogICAgICAgIGNvbnN0IGVuYWJsZSA9ICgpID0+IHsKICAgICAgICAgICAgc3dpcGVyLiRlbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIuc2Nyb2xsYmFyLiRlbCkgewogICAgICAgICAgICAgICAgc3dpcGVyLnNjcm9sbGJhci4kZWwucmVtb3ZlQ2xhc3Moc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuc2Nyb2xsYmFyRGlzYWJsZWRDbGFzcyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGluaXQoKTsKICAgICAgICAgICAgdXBkYXRlU2l6ZSgpOwogICAgICAgICAgICBzZXRUcmFuc2xhdGUoKTsKICAgICAgICB9OwoKICAgICAgICBjb25zdCBkaXNhYmxlID0gKCkgPT4gewogICAgICAgICAgICBzd2lwZXIuJGVsLmFkZENsYXNzKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLnNjcm9sbGJhckRpc2FibGVkQ2xhc3MpOwoKICAgICAgICAgICAgaWYgKHN3aXBlci5zY3JvbGxiYXIuJGVsKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLiRlbC5hZGRDbGFzcyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZGVzdHJveSgpOwogICAgICAgIH07CgogICAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnNjcm9sbGJhciwgewogICAgICAgICAgICBlbmFibGUsCiAgICAgICAgICAgIGRpc2FibGUsCiAgICAgICAgICAgIHVwZGF0ZVNpemUsCiAgICAgICAgICAgIHNldFRyYW5zbGF0ZSwKICAgICAgICAgICAgaW5pdCwKICAgICAgICAgICAgZGVzdHJveQogICAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIFBhcmFsbGF4KF9yZWYpIHsKICAgICAgICBsZXQgewogICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgIGV4dGVuZFBhcmFtcywKICAgICAgICAgICAgb24KICAgICAgICB9ID0gX3JlZjsKICAgICAgICBleHRlbmRQYXJhbXMoewogICAgICAgICAgICBwYXJhbGxheDogewogICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBjb25zdCBzZXRUcmFuc2Zvcm0gPSAoZWwsIHByb2dyZXNzKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgIHJ0bAogICAgICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgICAgICBjb25zdCAkZWwgPSAkKGVsKTsKICAgICAgICAgICAgY29uc3QgcnRsRmFjdG9yID0gcnRsID8gLTEgOiAxOwogICAgICAgICAgICBjb25zdCBwID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4JykgfHwgJzAnOwogICAgICAgICAgICBsZXQgeCA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC14Jyk7CiAgICAgICAgICAgIGxldCB5ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXknKTsKICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGUnKTsKICAgICAgICAgICAgY29uc3Qgb3BhY2l0eSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5Jyk7CgogICAgICAgICAgICBpZiAoeCB8fCB5KSB7CiAgICAgICAgICAgICAgICB4ID0geCB8fCAnMCc7CiAgICAgICAgICAgICAgICB5ID0geSB8fCAnMCc7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7CiAgICAgICAgICAgICAgICB4ID0gcDsKICAgICAgICAgICAgICAgIHkgPSAnMCc7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB5ID0gcDsKICAgICAgICAgICAgICAgIHggPSAnMCc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh4LmluZGV4T2YoJyUnKSA+PSAwKSB7CiAgICAgICAgICAgICAgICB4ID0gYCR7cGFyc2VJbnQoeCwgMTApICogcHJvZ3Jlc3MgKiBydGxGYWN0b3J9JWA7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB4ID0gYCR7eCAqIHByb2dyZXNzICogcnRsRmFjdG9yfXB4YDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHkuaW5kZXhPZignJScpID49IDApIHsKICAgICAgICAgICAgICAgIHkgPSBgJHtwYXJzZUludCh5LCAxMCkgKiBwcm9ncmVzc30lYDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHkgPSBgJHt5ICogcHJvZ3Jlc3N9cHhgOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodHlwZW9mIG9wYWNpdHkgIT09ICd1bmRlZmluZWQnICYmIG9wYWNpdHkgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRPcGFjaXR5ID0gb3BhY2l0eSAtIChvcGFjaXR5IC0gMSkgKiAoMSAtIE1hdGguYWJzKHByb2dyZXNzKSk7CiAgICAgICAgICAgICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IGN1cnJlbnRPcGFjaXR5OwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAodHlwZW9mIHNjYWxlID09PSAndW5kZWZpbmVkJyB8fCBzY2FsZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgJGVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt4fSwgJHt5fSwgMHB4KWApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFNjYWxlID0gc2NhbGUgLSAoc2NhbGUgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTsKICAgICAgICAgICAgICAgICRlbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7eH0sICR7eX0sIDBweCkgc2NhbGUoJHtjdXJyZW50U2NhbGV9KWApOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4gewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICAkZWwsCiAgICAgICAgICAgICAgICBzbGlkZXMsCiAgICAgICAgICAgICAgICBwcm9ncmVzcywKICAgICAgICAgICAgICAgIHNuYXBHcmlkCiAgICAgICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgICAgICRlbC5jaGlsZHJlbignW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXScpLmVhY2goZWwgPT4gewogICAgICAgICAgICAgICAgc2V0VHJhbnNmb3JtKGVsLCBwcm9ncmVzcyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzbGlkZXMuZWFjaCgoc2xpZGVFbCwgc2xpZGVJbmRleCkgPT4gewogICAgICAgICAgICAgICAgbGV0IHNsaWRlUHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzOwoKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJykgewogICAgICAgICAgICAgICAgICAgIHNsaWRlUHJvZ3Jlc3MgKz0gTWF0aC5jZWlsKHNsaWRlSW5kZXggLyAyKSAtIHByb2dyZXNzICogKHNuYXBHcmlkLmxlbmd0aCAtIDEpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHNsaWRlUHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZVByb2dyZXNzLCAtMSksIDEpOwogICAgICAgICAgICAgICAgJChzbGlkZUVsKS5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJykuZWFjaChlbCA9PiB7CiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNmb3JtKGVsLCBzbGlkZVByb2dyZXNzKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7CiAgICAgICAgICAgIGlmIChkdXJhdGlvbiA9PT0gdm9pZCAwKSB7CiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgICRlbAogICAgICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgICAgICAkZWwuZmluZCgnW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXScpLmVhY2gocGFyYWxsYXhFbCA9PiB7CiAgICAgICAgICAgICAgICBjb25zdCAkcGFyYWxsYXhFbCA9ICQocGFyYWxsYXhFbCk7CiAgICAgICAgICAgICAgICBsZXQgcGFyYWxsYXhEdXJhdGlvbiA9IHBhcnNlSW50KCRwYXJhbGxheEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LWR1cmF0aW9uJyksIDEwKSB8fCBkdXJhdGlvbjsKICAgICAgICAgICAgICAgIGlmIChkdXJhdGlvbiA9PT0gMCkgcGFyYWxsYXhEdXJhdGlvbiA9IDA7CiAgICAgICAgICAgICAgICAkcGFyYWxsYXhFbC50cmFuc2l0aW9uKHBhcmFsbGF4RHVyYXRpb24pOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvbignYmVmb3JlSW5pdCcsICgpID0+IHsKICAgICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjsKICAgICAgICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTsKICAgICAgICAgICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlOwogICAgICAgIH0pOwogICAgICAgIG9uKCdpbml0JywgKCkgPT4gewogICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuOwogICAgICAgICAgICBzZXRUcmFuc2xhdGUoKTsKICAgICAgICB9KTsKICAgICAgICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4gewogICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuOwogICAgICAgICAgICBzZXRUcmFuc2xhdGUoKTsKICAgICAgICB9KTsKICAgICAgICBvbignc2V0VHJhbnNpdGlvbicsIChfc3dpcGVyLCBkdXJhdGlvbikgPT4gewogICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuOwogICAgICAgICAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTsKICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBab29tKF9yZWYpIHsKICAgICAgICBsZXQgewogICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgIGV4dGVuZFBhcmFtcywKICAgICAgICAgICAgb24sCiAgICAgICAgICAgIGVtaXQKICAgICAgICB9ID0gX3JlZjsKICAgICAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTsKICAgICAgICBleHRlbmRQYXJhbXMoewogICAgICAgICAgICB6b29tOiB7CiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSwKICAgICAgICAgICAgICAgIG1heFJhdGlvOiAzLAogICAgICAgICAgICAgICAgbWluUmF0aW86IDEsCiAgICAgICAgICAgICAgICB0b2dnbGU6IHRydWUsCiAgICAgICAgICAgICAgICBjb250YWluZXJDbGFzczogJ3N3aXBlci16b29tLWNvbnRhaW5lcicsCiAgICAgICAgICAgICAgICB6b29tZWRTbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXpvb21lZCcKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHN3aXBlci56b29tID0gewogICAgICAgICAgICBlbmFibGVkOiBmYWxzZQogICAgICAgIH07CiAgICAgICAgbGV0IGN1cnJlbnRTY2FsZSA9IDE7CiAgICAgICAgbGV0IGlzU2NhbGluZyA9IGZhbHNlOwogICAgICAgIGxldCBnZXN0dXJlc0VuYWJsZWQ7CiAgICAgICAgbGV0IGZha2VHZXN0dXJlVG91Y2hlZDsKICAgICAgICBsZXQgZmFrZUdlc3R1cmVNb3ZlZDsKICAgICAgICBjb25zdCBnZXN0dXJlID0gewogICAgICAgICAgICAkc2xpZGVFbDogdW5kZWZpbmVkLAogICAgICAgICAgICBzbGlkZVdpZHRoOiB1bmRlZmluZWQsCiAgICAgICAgICAgIHNsaWRlSGVpZ2h0OiB1bmRlZmluZWQsCiAgICAgICAgICAgICRpbWFnZUVsOiB1bmRlZmluZWQsCiAgICAgICAgICAgICRpbWFnZVdyYXBFbDogdW5kZWZpbmVkLAogICAgICAgICAgICBtYXhSYXRpbzogMwogICAgICAgIH07CiAgICAgICAgY29uc3QgaW1hZ2UgPSB7CiAgICAgICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLAogICAgICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsCiAgICAgICAgICAgIGN1cnJlbnRYOiB1bmRlZmluZWQsCiAgICAgICAgICAgIGN1cnJlbnRZOiB1bmRlZmluZWQsCiAgICAgICAgICAgIG1pblg6IHVuZGVmaW5lZCwKICAgICAgICAgICAgbWluWTogdW5kZWZpbmVkLAogICAgICAgICAgICBtYXhYOiB1bmRlZmluZWQsCiAgICAgICAgICAgIG1heFk6IHVuZGVmaW5lZCwKICAgICAgICAgICAgd2lkdGg6IHVuZGVmaW5lZCwKICAgICAgICAgICAgaGVpZ2h0OiB1bmRlZmluZWQsCiAgICAgICAgICAgIHN0YXJ0WDogdW5kZWZpbmVkLAogICAgICAgICAgICBzdGFydFk6IHVuZGVmaW5lZCwKICAgICAgICAgICAgdG91Y2hlc1N0YXJ0OiB7fSwKICAgICAgICAgICAgdG91Y2hlc0N1cnJlbnQ6IHt9CiAgICAgICAgfTsKICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IHsKICAgICAgICAgICAgeDogdW5kZWZpbmVkLAogICAgICAgICAgICB5OiB1bmRlZmluZWQsCiAgICAgICAgICAgIHByZXZQb3NpdGlvblg6IHVuZGVmaW5lZCwKICAgICAgICAgICAgcHJldlBvc2l0aW9uWTogdW5kZWZpbmVkLAogICAgICAgICAgICBwcmV2VGltZTogdW5kZWZpbmVkCiAgICAgICAgfTsKICAgICAgICBsZXQgc2NhbGUgPSAxOwogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzd2lwZXIuem9vbSwgJ3NjYWxlJywgewogICAgICAgICAgICBnZXQoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGU7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBzZXQodmFsdWUpIHsKICAgICAgICAgICAgICAgIGlmIChzY2FsZSAhPT0gdmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWFnZUVsID0gZ2VzdHVyZS4kaW1hZ2VFbCA/IGdlc3R1cmUuJGltYWdlRWxbMF0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2xpZGVFbCA9IGdlc3R1cmUuJHNsaWRlRWwgPyBnZXN0dXJlLiRzbGlkZUVsWzBdIDogdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgICAgIGVtaXQoJ3pvb21DaGFuZ2UnLCB2YWx1ZSwgaW1hZ2VFbCwgc2xpZGVFbCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc2NhbGUgPSB2YWx1ZTsKICAgICAgICAgICAgfQoKICAgICAgICB9KTsKCiAgICAgICAgZnVuY3Rpb24gZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKSB7CiAgICAgICAgICAgIGlmIChlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikgcmV0dXJuIDE7CiAgICAgICAgICAgIGNvbnN0IHgxID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYOwogICAgICAgICAgICBjb25zdCB5MSA9IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWTsKICAgICAgICAgICAgY29uc3QgeDIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVg7CiAgICAgICAgICAgIGNvbnN0IHkyID0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VZOwogICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeDIgLSB4MSkgKiogMiArICh5MiAtIHkxKSAqKiAyKTsKICAgICAgICAgICAgcmV0dXJuIGRpc3RhbmNlOwogICAgICAgIH0gLy8gRXZlbnRzCgoKICAgICAgICBmdW5jdGlvbiBvbkdlc3R1cmVTdGFydChlKSB7CiAgICAgICAgICAgIGNvbnN0IHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDsKICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tOwogICAgICAgICAgICBmYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTsKICAgICAgICAgICAgZmFrZUdlc3R1cmVNb3ZlZCA9IGZhbHNlOwoKICAgICAgICAgICAgaWYgKCFzdXBwb3J0Lmdlc3R1cmVzKSB7CiAgICAgICAgICAgICAgICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09PSAndG91Y2hzdGFydCcgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZmFrZUdlc3R1cmVUb3VjaGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGdlc3R1cmUuc2NhbGVTdGFydCA9IGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCB8fCAhZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCk7CiAgICAgICAgICAgICAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGggPT09IDApIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7CiAgICAgICAgICAgICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YCkuZXEoMCkuZmluZCgncGljdHVyZSwgaW1nLCBzdmcsIGNhbnZhcywgLnN3aXBlci16b29tLXRhcmdldCcpLmVxKDApOwogICAgICAgICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudChgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApOwogICAgICAgICAgICAgICAgZ2VzdHVyZS5tYXhSYXRpbyA9IGdlc3R1cmUuJGltYWdlV3JhcEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87CgogICAgICAgICAgICAgICAgaWYgKGdlc3R1cmUuJGltYWdlV3JhcEVsLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VFbCkgewogICAgICAgICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDApOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpc1NjYWxpbmcgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gb25HZXN0dXJlQ2hhbmdlKGUpIHsKICAgICAgICAgICAgY29uc3Qgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0OwogICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207CiAgICAgICAgICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTsKCiAgICAgICAgICAgIGlmICghc3VwcG9ydC5nZXN0dXJlcykgewogICAgICAgICAgICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNobW92ZScgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmYWtlR2VzdHVyZU1vdmVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGdlc3R1cmUuc2NhbGVNb3ZlID0gZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICBpZiAoZS50eXBlID09PSAnZ2VzdHVyZWNoYW5nZScpIG9uR2VzdHVyZVN0YXJ0KGUpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3VwcG9ydC5nZXN0dXJlcykgewogICAgICAgICAgICAgICAgem9vbS5zY2FsZSA9IGUuc2NhbGUgKiBjdXJyZW50U2NhbGU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS5zY2FsZU1vdmUgLyBnZXN0dXJlLnNjYWxlU3RhcnQgKiBjdXJyZW50U2NhbGU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh6b29tLnNjYWxlID4gZ2VzdHVyZS5tYXhSYXRpbykgewogICAgICAgICAgICAgICAgem9vbS5zY2FsZSA9IGdlc3R1cmUubWF4UmF0aW8gLSAxICsgKHpvb20uc2NhbGUgLSBnZXN0dXJlLm1heFJhdGlvICsgMSkgKiogMC41OwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoem9vbS5zY2FsZSA8IHBhcmFtcy5taW5SYXRpbykgewogICAgICAgICAgICAgICAgem9vbS5zY2FsZSA9IHBhcmFtcy5taW5SYXRpbyArIDEgLSAocGFyYW1zLm1pblJhdGlvIC0gem9vbS5zY2FsZSArIDEpICoqIDAuNTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgke3pvb20uc2NhbGV9KWApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gb25HZXN0dXJlRW5kKGUpIHsKICAgICAgICAgICAgY29uc3QgZGV2aWNlID0gc3dpcGVyLmRldmljZTsKICAgICAgICAgICAgY29uc3Qgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0OwogICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207CiAgICAgICAgICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTsKCiAgICAgICAgICAgIGlmICghc3VwcG9ydC5nZXN0dXJlcykgewogICAgICAgICAgICAgICAgaWYgKCFmYWtlR2VzdHVyZVRvdWNoZWQgfHwgIWZha2VHZXN0dXJlTW92ZWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoZW5kJyB8fCBlLnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgZS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPCAyICYmICFkZXZpY2UuYW5kcm9pZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGZha2VHZXN0dXJlTW92ZWQgPSBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47CiAgICAgICAgICAgIHpvb20uc2NhbGUgPSBNYXRoLm1heChNYXRoLm1pbih6b29tLnNjYWxlLCBnZXN0dXJlLm1heFJhdGlvKSwgcGFyYW1zLm1pblJhdGlvKTsKICAgICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7em9vbS5zY2FsZX0pYCk7CiAgICAgICAgICAgIGN1cnJlbnRTY2FsZSA9IHpvb20uc2NhbGU7CiAgICAgICAgICAgIGlzU2NhbGluZyA9IGZhbHNlOwogICAgICAgICAgICBpZiAoem9vbS5zY2FsZSA9PT0gMSkgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7CiAgICAgICAgICAgIGNvbnN0IGRldmljZSA9IHN3aXBlci5kZXZpY2U7CiAgICAgICAgICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuOwogICAgICAgICAgICBpZiAoaW1hZ2UuaXNUb3VjaGVkKSByZXR1cm47CiAgICAgICAgICAgIGlmIChkZXZpY2UuYW5kcm9pZCAmJiBlLmNhbmNlbGFibGUpIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gdHJ1ZTsKICAgICAgICAgICAgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7CiAgICAgICAgICAgIGltYWdlLnRvdWNoZXNTdGFydC55ID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gb25Ub3VjaE1vdmUoZSkgewogICAgICAgICAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207CiAgICAgICAgICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuOwogICAgICAgICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlOwogICAgICAgICAgICBpZiAoIWltYWdlLmlzVG91Y2hlZCB8fCAhZ2VzdHVyZS4kc2xpZGVFbCkgcmV0dXJuOwoKICAgICAgICAgICAgaWYgKCFpbWFnZS5pc01vdmVkKSB7CiAgICAgICAgICAgICAgICBpbWFnZS53aWR0aCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0V2lkdGg7CiAgICAgICAgICAgICAgICBpbWFnZS5oZWlnaHQgPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldEhlaWdodDsKICAgICAgICAgICAgICAgIGltYWdlLnN0YXJ0WCA9IGdldFRyYW5zbGF0ZShnZXN0dXJlLiRpbWFnZVdyYXBFbFswXSwgJ3gnKSB8fCAwOwogICAgICAgICAgICAgICAgaW1hZ2Uuc3RhcnRZID0gZ2V0VHJhbnNsYXRlKGdlc3R1cmUuJGltYWdlV3JhcEVsWzBdLCAneScpIHx8IDA7CiAgICAgICAgICAgICAgICBnZXN0dXJlLnNsaWRlV2lkdGggPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldFdpZHRoOwogICAgICAgICAgICAgICAgZ2VzdHVyZS5zbGlkZUhlaWdodCA9IGdlc3R1cmUuJHNsaWRlRWxbMF0ub2Zmc2V0SGVpZ2h0OwogICAgICAgICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigwKTsKICAgICAgICAgICAgfSAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnCgoKICAgICAgICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7CiAgICAgICAgICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7CiAgICAgICAgICAgIGlmIChzY2FsZWRXaWR0aCA8IGdlc3R1cmUuc2xpZGVXaWR0aCAmJiBzY2FsZWRIZWlnaHQgPCBnZXN0dXJlLnNsaWRlSGVpZ2h0KSByZXR1cm47CiAgICAgICAgICAgIGltYWdlLm1pblggPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTsKICAgICAgICAgICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YOwogICAgICAgICAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTsKICAgICAgICAgICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZOwogICAgICAgICAgICBpbWFnZS50b3VjaGVzQ3VycmVudC54ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7CiAgICAgICAgICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTsKCiAgICAgICAgICAgIGlmICghaW1hZ2UuaXNNb3ZlZCAmJiAhaXNTY2FsaW5nKSB7CiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIChNYXRoLmZsb29yKGltYWdlLm1pblgpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WCkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA8IGltYWdlLnRvdWNoZXNTdGFydC54IHx8IE1hdGguZmxvb3IoaW1hZ2UubWF4WCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LngpKSB7CiAgICAgICAgICAgICAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIChNYXRoLmZsb29yKGltYWdlLm1pblkpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WSkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA8IGltYWdlLnRvdWNoZXNTdGFydC55IHx8IE1hdGguZmxvb3IoaW1hZ2UubWF4WSkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRZKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC55ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LnkpKSB7CiAgICAgICAgICAgICAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZS5jYW5jZWxhYmxlKSB7CiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgIGltYWdlLmlzTW92ZWQgPSB0cnVlOwogICAgICAgICAgICBpbWFnZS5jdXJyZW50WCA9IGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSBpbWFnZS50b3VjaGVzU3RhcnQueCArIGltYWdlLnN0YXJ0WDsKICAgICAgICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnkgKyBpbWFnZS5zdGFydFk7CgogICAgICAgICAgICBpZiAoaW1hZ2UuY3VycmVudFggPCBpbWFnZS5taW5YKSB7CiAgICAgICAgICAgICAgICBpbWFnZS5jdXJyZW50WCA9IGltYWdlLm1pblggKyAxIC0gKGltYWdlLm1pblggLSBpbWFnZS5jdXJyZW50WCArIDEpICoqIDAuODsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGltYWdlLmN1cnJlbnRYID4gaW1hZ2UubWF4WCkgewogICAgICAgICAgICAgICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS5tYXhYIC0gMSArIChpbWFnZS5jdXJyZW50WCAtIGltYWdlLm1heFggKyAxKSAqKiAwLjg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChpbWFnZS5jdXJyZW50WSA8IGltYWdlLm1pblkpIHsKICAgICAgICAgICAgICAgIGltYWdlLmN1cnJlbnRZID0gaW1hZ2UubWluWSArIDEgLSAoaW1hZ2UubWluWSAtIGltYWdlLmN1cnJlbnRZICsgMSkgKiogMC44OwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoaW1hZ2UuY3VycmVudFkgPiBpbWFnZS5tYXhZKSB7CiAgICAgICAgICAgICAgICBpbWFnZS5jdXJyZW50WSA9IGltYWdlLm1heFkgLSAxICsgKGltYWdlLmN1cnJlbnRZIC0gaW1hZ2UubWF4WSArIDEpICoqIDAuODsKICAgICAgICAgICAgfSAvLyBWZWxvY2l0eQoKCiAgICAgICAgICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWCkgdmVsb2NpdHkucHJldlBvc2l0aW9uWCA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lng7CiAgICAgICAgICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7CiAgICAgICAgICAgIGlmICghdmVsb2NpdHkucHJldlRpbWUpIHZlbG9jaXR5LnByZXZUaW1lID0gRGF0ZS5ub3coKTsKICAgICAgICAgICAgdmVsb2NpdHkueCA9IChpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWCkgLyAoRGF0ZS5ub3coKSAtIHZlbG9jaXR5LnByZXZUaW1lKSAvIDI7CiAgICAgICAgICAgIHZlbG9jaXR5LnkgPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyOwogICAgICAgICAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIDwgMikgdmVsb2NpdHkueCA9IDA7CiAgICAgICAgICAgIGlmIChNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgPCAyKSB2ZWxvY2l0eS55ID0gMDsKICAgICAgICAgICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWCA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lng7CiAgICAgICAgICAgIHZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55OwogICAgICAgICAgICB2ZWxvY2l0eS5wcmV2VGltZSA9IERhdGUubm93KCk7CiAgICAgICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtpbWFnZS5jdXJyZW50WH1weCwgJHtpbWFnZS5jdXJyZW50WX1weCwwKWApOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHsKICAgICAgICAgICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tOwogICAgICAgICAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjsKCiAgICAgICAgICAgIGlmICghaW1hZ2UuaXNUb3VjaGVkIHx8ICFpbWFnZS5pc01vdmVkKSB7CiAgICAgICAgICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGltYWdlLmlzTW92ZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7CiAgICAgICAgICAgIGltYWdlLmlzTW92ZWQgPSBmYWxzZTsKICAgICAgICAgICAgbGV0IG1vbWVudHVtRHVyYXRpb25YID0gMzAwOwogICAgICAgICAgICBsZXQgbW9tZW50dW1EdXJhdGlvblkgPSAzMDA7CiAgICAgICAgICAgIGNvbnN0IG1vbWVudHVtRGlzdGFuY2VYID0gdmVsb2NpdHkueCAqIG1vbWVudHVtRHVyYXRpb25YOwogICAgICAgICAgICBjb25zdCBuZXdQb3NpdGlvblggPSBpbWFnZS5jdXJyZW50WCArIG1vbWVudHVtRGlzdGFuY2VYOwogICAgICAgICAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlWSA9IHZlbG9jaXR5LnkgKiBtb21lbnR1bUR1cmF0aW9uWTsKICAgICAgICAgICAgY29uc3QgbmV3UG9zaXRpb25ZID0gaW1hZ2UuY3VycmVudFkgKyBtb21lbnR1bURpc3RhbmNlWTsgLy8gRml4IGR1cmF0aW9uCgogICAgICAgICAgICBpZiAodmVsb2NpdHkueCAhPT0gMCkgbW9tZW50dW1EdXJhdGlvblggPSBNYXRoLmFicygobmV3UG9zaXRpb25YIC0gaW1hZ2UuY3VycmVudFgpIC8gdmVsb2NpdHkueCk7CiAgICAgICAgICAgIGlmICh2ZWxvY2l0eS55ICE9PSAwKSBtb21lbnR1bUR1cmF0aW9uWSA9IE1hdGguYWJzKChuZXdQb3NpdGlvblkgLSBpbWFnZS5jdXJyZW50WSkgLyB2ZWxvY2l0eS55KTsKICAgICAgICAgICAgY29uc3QgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGgubWF4KG1vbWVudHVtRHVyYXRpb25YLCBtb21lbnR1bUR1cmF0aW9uWSk7CiAgICAgICAgICAgIGltYWdlLmN1cnJlbnRYID0gbmV3UG9zaXRpb25YOwogICAgICAgICAgICBpbWFnZS5jdXJyZW50WSA9IG5ld1Bvc2l0aW9uWTsgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZwoKICAgICAgICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7CiAgICAgICAgICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7CiAgICAgICAgICAgIGltYWdlLm1pblggPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTsKICAgICAgICAgICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YOwogICAgICAgICAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTsKICAgICAgICAgICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZOwogICAgICAgICAgICBpbWFnZS5jdXJyZW50WCA9IE1hdGgubWF4KE1hdGgubWluKGltYWdlLmN1cnJlbnRYLCBpbWFnZS5tYXhYKSwgaW1hZ2UubWluWCk7CiAgICAgICAgICAgIGltYWdlLmN1cnJlbnRZID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFksIGltYWdlLm1heFkpLCBpbWFnZS5taW5ZKTsKICAgICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7aW1hZ2UuY3VycmVudFh9cHgsICR7aW1hZ2UuY3VycmVudFl9cHgsMClgKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHsKICAgICAgICAgICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tOwoKICAgICAgICAgICAgaWYgKGdlc3R1cmUuJHNsaWRlRWwgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkgewogICAgICAgICAgICAgICAgaWYgKGdlc3R1cmUuJGltYWdlRWwpIHsKICAgICAgICAgICAgICAgICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKGdlc3R1cmUuJGltYWdlV3JhcEVsKSB7CiAgICAgICAgICAgICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCknKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB6b29tLnNjYWxlID0gMTsKICAgICAgICAgICAgICAgIGN1cnJlbnRTY2FsZSA9IDE7CiAgICAgICAgICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gdW5kZWZpbmVkOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB6b29tSW4oZSkgewogICAgICAgICAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207CiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTsKCiAgICAgICAgICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkgewogICAgICAgICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQpIHsKICAgICAgICAgICAgICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gJChlLnRhcmdldCkuY2xvc2VzdChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkgewogICAgICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3N9YCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZChgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApLmVxKDApLmZpbmQoJ3BpY3R1cmUsIGltZywgc3ZnLCBjYW52YXMsIC5zd2lwZXItem9vbS10YXJnZXQnKS5lcSgwKTsKICAgICAgICAgICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gZ2VzdHVyZS4kaW1hZ2VFbC5wYXJlbnQoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwIHx8ICFnZXN0dXJlLiRpbWFnZVdyYXBFbCB8fCBnZXN0dXJlLiRpbWFnZVdyYXBFbC5sZW5ndGggPT09IDApIHJldHVybjsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHsKICAgICAgICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJzsKICAgICAgICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudG91Y2hBY3Rpb24gPSAnbm9uZSc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGdlc3R1cmUuJHNsaWRlRWwuYWRkQ2xhc3MoYCR7cGFyYW1zLnpvb21lZFNsaWRlQ2xhc3N9YCk7CiAgICAgICAgICAgIGxldCB0b3VjaFg7CiAgICAgICAgICAgIGxldCB0b3VjaFk7CiAgICAgICAgICAgIGxldCBvZmZzZXRYOwogICAgICAgICAgICBsZXQgb2Zmc2V0WTsKICAgICAgICAgICAgbGV0IGRpZmZYOwogICAgICAgICAgICBsZXQgZGlmZlk7CiAgICAgICAgICAgIGxldCB0cmFuc2xhdGVYOwogICAgICAgICAgICBsZXQgdHJhbnNsYXRlWTsKICAgICAgICAgICAgbGV0IGltYWdlV2lkdGg7CiAgICAgICAgICAgIGxldCBpbWFnZUhlaWdodDsKICAgICAgICAgICAgbGV0IHNjYWxlZFdpZHRoOwogICAgICAgICAgICBsZXQgc2NhbGVkSGVpZ2h0OwogICAgICAgICAgICBsZXQgdHJhbnNsYXRlTWluWDsKICAgICAgICAgICAgbGV0IHRyYW5zbGF0ZU1pblk7CiAgICAgICAgICAgIGxldCB0cmFuc2xhdGVNYXhYOwogICAgICAgICAgICBsZXQgdHJhbnNsYXRlTWF4WTsKICAgICAgICAgICAgbGV0IHNsaWRlV2lkdGg7CiAgICAgICAgICAgIGxldCBzbGlkZUhlaWdodDsKCiAgICAgICAgICAgIGlmICh0eXBlb2YgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPT09ICd1bmRlZmluZWQnICYmIGUpIHsKICAgICAgICAgICAgICAgIHRvdWNoWCA9IGUudHlwZSA9PT0gJ3RvdWNoZW5kJyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYOwogICAgICAgICAgICAgICAgdG91Y2hZID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0b3VjaFggPSBpbWFnZS50b3VjaGVzU3RhcnQueDsKICAgICAgICAgICAgICAgIHRvdWNoWSA9IGltYWdlLnRvdWNoZXNTdGFydC55OwogICAgICAgICAgICB9CgogICAgICAgICAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbzsKICAgICAgICAgICAgY3VycmVudFNjYWxlID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbzsKCiAgICAgICAgICAgIGlmIChlKSB7CiAgICAgICAgICAgICAgICBzbGlkZVdpZHRoID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aDsKICAgICAgICAgICAgICAgIHNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7CiAgICAgICAgICAgICAgICBvZmZzZXRYID0gZ2VzdHVyZS4kc2xpZGVFbC5vZmZzZXQoKS5sZWZ0ICsgd2luZG93LnNjcm9sbFg7CiAgICAgICAgICAgICAgICBvZmZzZXRZID0gZ2VzdHVyZS4kc2xpZGVFbC5vZmZzZXQoKS50b3AgKyB3aW5kb3cuc2Nyb2xsWTsKICAgICAgICAgICAgICAgIGRpZmZYID0gb2Zmc2V0WCArIHNsaWRlV2lkdGggLyAyIC0gdG91Y2hYOwogICAgICAgICAgICAgICAgZGlmZlkgPSBvZmZzZXRZICsgc2xpZGVIZWlnaHQgLyAyIC0gdG91Y2hZOwogICAgICAgICAgICAgICAgaW1hZ2VXaWR0aCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0V2lkdGg7CiAgICAgICAgICAgICAgICBpbWFnZUhlaWdodCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0SGVpZ2h0OwogICAgICAgICAgICAgICAgc2NhbGVkV2lkdGggPSBpbWFnZVdpZHRoICogem9vbS5zY2FsZTsKICAgICAgICAgICAgICAgIHNjYWxlZEhlaWdodCA9IGltYWdlSGVpZ2h0ICogem9vbS5zY2FsZTsKICAgICAgICAgICAgICAgIHRyYW5zbGF0ZU1pblggPSBNYXRoLm1pbihzbGlkZVdpZHRoIC8gMiAtIHNjYWxlZFdpZHRoIC8gMiwgMCk7CiAgICAgICAgICAgICAgICB0cmFuc2xhdGVNaW5ZID0gTWF0aC5taW4oc2xpZGVIZWlnaHQgLyAyIC0gc2NhbGVkSGVpZ2h0IC8gMiwgMCk7CiAgICAgICAgICAgICAgICB0cmFuc2xhdGVNYXhYID0gLXRyYW5zbGF0ZU1pblg7CiAgICAgICAgICAgICAgICB0cmFuc2xhdGVNYXhZID0gLXRyYW5zbGF0ZU1pblk7CiAgICAgICAgICAgICAgICB0cmFuc2xhdGVYID0gZGlmZlggKiB6b29tLnNjYWxlOwogICAgICAgICAgICAgICAgdHJhbnNsYXRlWSA9IGRpZmZZICogem9vbS5zY2FsZTsKCiAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRlWCA8IHRyYW5zbGF0ZU1pblgpIHsKICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVYID0gdHJhbnNsYXRlTWluWDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRlWCA+IHRyYW5zbGF0ZU1heFgpIHsKICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVYID0gdHJhbnNsYXRlTWF4WDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRlWSA8IHRyYW5zbGF0ZU1pblkpIHsKICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVZID0gdHJhbnNsYXRlTWluWTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRlWSA+IHRyYW5zbGF0ZU1heFkpIHsKICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVZID0gdHJhbnNsYXRlTWF4WTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVggPSAwOwogICAgICAgICAgICAgICAgdHJhbnNsYXRlWSA9IDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlWH1weCwgJHt0cmFuc2xhdGVZfXB4LDApYCk7CiAgICAgICAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7em9vbS5zY2FsZX0pYCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB6b29tT3V0KCkgewogICAgICAgICAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207CiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTsKCiAgICAgICAgICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkgewogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCkgewogICAgICAgICAgICAgICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfWApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSBnZXN0dXJlLiRzbGlkZUVsLmZpbmQoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKS5lcSgwKS5maW5kKCdwaWN0dXJlLCBpbWcsIHN2ZywgY2FudmFzLCAuc3dpcGVyLXpvb20tdGFyZ2V0JykuZXEoMCk7CiAgICAgICAgICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCB8fCAhZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgfHwgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwubGVuZ3RoID09PSAwKSByZXR1cm47CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJyc7CiAgICAgICAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRvdWNoQWN0aW9uID0gJyc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHpvb20uc2NhbGUgPSAxOwogICAgICAgICAgICBjdXJyZW50U2NhbGUgPSAxOwogICAgICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCknKTsKICAgICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTsKICAgICAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbC5yZW1vdmVDbGFzcyhgJHtwYXJhbXMuem9vbWVkU2xpZGVDbGFzc31gKTsKICAgICAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDsKICAgICAgICB9IC8vIFRvZ2dsZSBab29tCgoKICAgICAgICBmdW5jdGlvbiB6b29tVG9nZ2xlKGUpIHsKICAgICAgICAgICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tOwoKICAgICAgICAgICAgaWYgKHpvb20uc2NhbGUgJiYgem9vbS5zY2FsZSAhPT0gMSkgewogICAgICAgICAgICAgICAgLy8gWm9vbSBPdXQKICAgICAgICAgICAgICAgIHpvb21PdXQoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIFpvb20gSW4KICAgICAgICAgICAgICAgIHpvb21JbihlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0TGlzdGVuZXJzKCkgewogICAgICAgICAgICBjb25zdCBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7CiAgICAgICAgICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsKICAgICAgICAgICAgICAgIHBhc3NpdmU6IHRydWUsCiAgICAgICAgICAgICAgICBjYXB0dXJlOiBmYWxzZQogICAgICAgICAgICB9IDogZmFsc2U7CiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUgPSBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciA/IHsKICAgICAgICAgICAgICAgIHBhc3NpdmU6IGZhbHNlLAogICAgICAgICAgICAgICAgY2FwdHVyZTogdHJ1ZQogICAgICAgICAgICB9IDogdHJ1ZTsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHBhc3NpdmVMaXN0ZW5lciwKICAgICAgICAgICAgICAgIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldFNsaWRlU2VsZWN0b3IoKSB7CiAgICAgICAgICAgIHJldHVybiBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWA7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB0b2dnbGVHZXN0dXJlcyhtZXRob2QpIHsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgcGFzc2l2ZUxpc3RlbmVyCiAgICAgICAgICAgIH0gPSBnZXRMaXN0ZW5lcnMoKTsKICAgICAgICAgICAgY29uc3Qgc2xpZGVTZWxlY3RvciA9IGdldFNsaWRlU2VsZWN0b3IoKTsKICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbbWV0aG9kXSgnZ2VzdHVyZXN0YXJ0Jywgc2xpZGVTZWxlY3Rvciwgb25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7CiAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsW21ldGhvZF0oJ2dlc3R1cmVjaGFuZ2UnLCBzbGlkZVNlbGVjdG9yLCBvbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmVMaXN0ZW5lcik7CiAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsW21ldGhvZF0oJ2dlc3R1cmVlbmQnLCBzbGlkZVNlbGVjdG9yLCBvbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBlbmFibGVHZXN0dXJlcygpIHsKICAgICAgICAgICAgaWYgKGdlc3R1cmVzRW5hYmxlZCkgcmV0dXJuOwogICAgICAgICAgICBnZXN0dXJlc0VuYWJsZWQgPSB0cnVlOwogICAgICAgICAgICB0b2dnbGVHZXN0dXJlcygnb24nKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGRpc2FibGVHZXN0dXJlcygpIHsKICAgICAgICAgICAgaWYgKCFnZXN0dXJlc0VuYWJsZWQpIHJldHVybjsKICAgICAgICAgICAgZ2VzdHVyZXNFbmFibGVkID0gZmFsc2U7CiAgICAgICAgICAgIHRvZ2dsZUdlc3R1cmVzKCdvZmYnKTsKICAgICAgICB9IC8vIEF0dGFjaC9EZXRhY2ggRXZlbnRzCgoKICAgICAgICBmdW5jdGlvbiBlbmFibGUoKSB7CiAgICAgICAgICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTsKICAgICAgICAgICAgaWYgKHpvb20uZW5hYmxlZCkgcmV0dXJuOwogICAgICAgICAgICB6b29tLmVuYWJsZWQgPSB0cnVlOwogICAgICAgICAgICBjb25zdCBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgIHBhc3NpdmVMaXN0ZW5lciwKICAgICAgICAgICAgICAgIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUKICAgICAgICAgICAgfSA9IGdldExpc3RlbmVycygpOwogICAgICAgICAgICBjb25zdCBzbGlkZVNlbGVjdG9yID0gZ2V0U2xpZGVTZWxlY3RvcigpOyAvLyBTY2FsZSBpbWFnZQoKICAgICAgICAgICAgaWYgKHN1cHBvcnQuZ2VzdHVyZXMpIHsKICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCwgZW5hYmxlR2VzdHVyZXMsIHBhc3NpdmVMaXN0ZW5lcik7CiAgICAgICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCBkaXNhYmxlR2VzdHVyZXMsIHBhc3NpdmVMaXN0ZW5lcik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcpIHsKICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCwgc2xpZGVTZWxlY3Rvciwgb25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7CiAgICAgICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgc2xpZGVTZWxlY3Rvciwgb25HZXN0dXJlQ2hhbmdlLCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlKTsKICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHNsaWRlU2VsZWN0b3IsIG9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTsKCiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLmNhbmNlbCkgewogICAgICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5jYW5jZWwsIHNsaWRlU2VsZWN0b3IsIG9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSAvLyBNb3ZlIGltYWdlCgoKICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIGAuJHtzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3N9YCwgb25Ub3VjaE1vdmUsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZGlzYWJsZSgpIHsKICAgICAgICAgICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tOwogICAgICAgICAgICBpZiAoIXpvb20uZW5hYmxlZCkgcmV0dXJuOwogICAgICAgICAgICBjb25zdCBzdXBwb3J0ID0gc3dpcGVyLnN1cHBvcnQ7CiAgICAgICAgICAgIHpvb20uZW5hYmxlZCA9IGZhbHNlOwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBwYXNzaXZlTGlzdGVuZXIsCiAgICAgICAgICAgICAgICBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlCiAgICAgICAgICAgIH0gPSBnZXRMaXN0ZW5lcnMoKTsKICAgICAgICAgICAgY29uc3Qgc2xpZGVTZWxlY3RvciA9IGdldFNsaWRlU2VsZWN0b3IoKTsgLy8gU2NhbGUgaW1hZ2UKCiAgICAgICAgICAgIGlmIChzdXBwb3J0Lmdlc3R1cmVzKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBlbmFibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTsKICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCBkaXNhYmxlR2VzdHVyZXMsIHBhc3NpdmVMaXN0ZW5lcik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcpIHsKICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQsIHNsaWRlU2VsZWN0b3IsIG9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpOwogICAgICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBzbGlkZVNlbGVjdG9yLCBvbkdlc3R1cmVDaGFuZ2UsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpOwogICAgICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHNsaWRlU2VsZWN0b3IsIG9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTsKCiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLmNhbmNlbCkgewogICAgICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsLCBzbGlkZVNlbGVjdG9yLCBvbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gLy8gTW92ZSBpbWFnZQoKCiAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgYC4ke3N3aXBlci5wYXJhbXMuem9vbS5jb250YWluZXJDbGFzc31gLCBvblRvdWNoTW92ZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7CiAgICAgICAgfQoKICAgICAgICBvbignaW5pdCcsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7CiAgICAgICAgICAgICAgICBlbmFibGUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIG9uKCdkZXN0cm95JywgKCkgPT4gewogICAgICAgICAgICBkaXNhYmxlKCk7CiAgICAgICAgfSk7CiAgICAgICAgb24oJ3RvdWNoU3RhcnQnLCAoX3MsIGUpID0+IHsKICAgICAgICAgICAgaWYgKCFzd2lwZXIuem9vbS5lbmFibGVkKSByZXR1cm47CiAgICAgICAgICAgIG9uVG91Y2hTdGFydChlKTsKICAgICAgICB9KTsKICAgICAgICBvbigndG91Y2hFbmQnLCAoX3MsIGUpID0+IHsKICAgICAgICAgICAgaWYgKCFzd2lwZXIuem9vbS5lbmFibGVkKSByZXR1cm47CiAgICAgICAgICAgIG9uVG91Y2hFbmQoKTsKICAgICAgICB9KTsKICAgICAgICBvbignZG91YmxlVGFwJywgKF9zLCBlKSA9PiB7CiAgICAgICAgICAgIGlmICghc3dpcGVyLmFuaW1hdGluZyAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS50b2dnbGUpIHsKICAgICAgICAgICAgICAgIHpvb21Ub2dnbGUoZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbigndHJhbnNpdGlvbkVuZCcsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQpIHsKICAgICAgICAgICAgICAgIG9uVHJhbnNpdGlvbkVuZCgpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgb24oJ3NsaWRlQ2hhbmdlJywgKCkgPT4gewogICAgICAgICAgICBpZiAoc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHsKICAgICAgICAgICAgICAgIG9uVHJhbnNpdGlvbkVuZCgpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIuem9vbSwgewogICAgICAgICAgICBlbmFibGUsCiAgICAgICAgICAgIGRpc2FibGUsCiAgICAgICAgICAgIGluOiB6b29tSW4sCiAgICAgICAgICAgIG91dDogem9vbU91dCwKICAgICAgICAgICAgdG9nZ2xlOiB6b29tVG9nZ2xlCiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gTGF6eShfcmVmKSB7CiAgICAgICAgbGV0IHsKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICBleHRlbmRQYXJhbXMsCiAgICAgICAgICAgIG9uLAogICAgICAgICAgICBlbWl0CiAgICAgICAgfSA9IF9yZWY7CiAgICAgICAgZXh0ZW5kUGFyYW1zKHsKICAgICAgICAgICAgbGF6eTogewogICAgICAgICAgICAgICAgY2hlY2tJblZpZXc6IGZhbHNlLAogICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsCiAgICAgICAgICAgICAgICBsb2FkUHJldk5leHQ6IGZhbHNlLAogICAgICAgICAgICAgICAgbG9hZFByZXZOZXh0QW1vdW50OiAxLAogICAgICAgICAgICAgICAgbG9hZE9uVHJhbnNpdGlvblN0YXJ0OiBmYWxzZSwKICAgICAgICAgICAgICAgIHNjcm9sbGluZ0VsZW1lbnQ6ICcnLAogICAgICAgICAgICAgICAgZWxlbWVudENsYXNzOiAnc3dpcGVyLWxhenknLAogICAgICAgICAgICAgICAgbG9hZGluZ0NsYXNzOiAnc3dpcGVyLWxhenktbG9hZGluZycsCiAgICAgICAgICAgICAgICBsb2FkZWRDbGFzczogJ3N3aXBlci1sYXp5LWxvYWRlZCcsCiAgICAgICAgICAgICAgICBwcmVsb2FkZXJDbGFzczogJ3N3aXBlci1sYXp5LXByZWxvYWRlcicKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHN3aXBlci5sYXp5ID0ge307CiAgICAgICAgbGV0IHNjcm9sbEhhbmRsZXJBdHRhY2hlZCA9IGZhbHNlOwogICAgICAgIGxldCBpbml0aWFsSW1hZ2VMb2FkZWQgPSBmYWxzZTsKCiAgICAgICAgZnVuY3Rpb24gbG9hZEluU2xpZGUoaW5kZXgsIGxvYWRJbkR1cGxpY2F0ZSkgewogICAgICAgICAgICBpZiAobG9hZEluRHVwbGljYXRlID09PSB2b2lkIDApIHsKICAgICAgICAgICAgICAgIGxvYWRJbkR1cGxpY2F0ZSA9IHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubGF6eTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjsKICAgICAgICAgICAgaWYgKHN3aXBlci5zbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47CiAgICAgICAgICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkOwogICAgICAgICAgICBjb25zdCAkc2xpZGVFbCA9IGlzVmlydHVhbCA/IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PSIke2luZGV4fSJdYCkgOiBzd2lwZXIuc2xpZGVzLmVxKGluZGV4KTsKICAgICAgICAgICAgY29uc3QgJGltYWdlcyA9ICRzbGlkZUVsLmZpbmQoYC4ke3BhcmFtcy5lbGVtZW50Q2xhc3N9Om5vdCguJHtwYXJhbXMubG9hZGVkQ2xhc3N9KTpub3QoLiR7cGFyYW1zLmxvYWRpbmdDbGFzc30pYCk7CgogICAgICAgICAgICBpZiAoJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmVsZW1lbnRDbGFzcykgJiYgISRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5sb2FkZWRDbGFzcykgJiYgISRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpKSB7CiAgICAgICAgICAgICAgICAkaW1hZ2VzLnB1c2goJHNsaWRlRWxbMF0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJGltYWdlcy5sZW5ndGggPT09IDApIHJldHVybjsKICAgICAgICAgICAgJGltYWdlcy5lYWNoKGltYWdlRWwgPT4gewogICAgICAgICAgICAgICAgY29uc3QgJGltYWdlRWwgPSAkKGltYWdlRWwpOwogICAgICAgICAgICAgICAgJGltYWdlRWwuYWRkQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcyk7CiAgICAgICAgICAgICAgICBjb25zdCBiYWNrZ3JvdW5kID0gJGltYWdlRWwuYXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7CiAgICAgICAgICAgICAgICBjb25zdCBzcmMgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLXNyYycpOwogICAgICAgICAgICAgICAgY29uc3Qgc3Jjc2V0ID0gJGltYWdlRWwuYXR0cignZGF0YS1zcmNzZXQnKTsKICAgICAgICAgICAgICAgIGNvbnN0IHNpemVzID0gJGltYWdlRWwuYXR0cignZGF0YS1zaXplcycpOwogICAgICAgICAgICAgICAgY29uc3QgJHBpY3R1cmVFbCA9ICRpbWFnZUVsLnBhcmVudCgncGljdHVyZScpOwogICAgICAgICAgICAgICAgc3dpcGVyLmxvYWRJbWFnZSgkaW1hZ2VFbFswXSwgc3JjIHx8IGJhY2tncm91bmQsIHNyY3NldCwgc2l6ZXMsIGZhbHNlLCAoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzd2lwZXIgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlciA9PT0gbnVsbCB8fCAhc3dpcGVyIHx8IHN3aXBlciAmJiAhc3dpcGVyLnBhcmFtcyB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47CgogICAgICAgICAgICAgICAgICAgIGlmIChiYWNrZ3JvdW5kKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRpbWFnZUVsLmNzcygnYmFja2dyb3VuZC1pbWFnZScsIGB1cmwoIiR7YmFja2dyb3VuZH0iKWApOwogICAgICAgICAgICAgICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLWJhY2tncm91bmQnKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3Jjc2V0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzcmNzZXQnLCBzcmNzZXQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zcmNzZXQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpemVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzaXplcycsIHNpemVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc2l6ZXMnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRwaWN0dXJlRWwubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGljdHVyZUVsLmNoaWxkcmVuKCdzb3VyY2UnKS5lYWNoKHNvdXJjZUVsID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCAkc291cmNlID0gJChzb3VyY2VFbCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc291cmNlLmF0dHIoJ2RhdGEtc3Jjc2V0JykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNvdXJjZS5hdHRyKCdzcmNzZXQnLCAkc291cmNlLmF0dHIoJ2RhdGEtc3Jjc2V0JykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc291cmNlLnJlbW92ZUF0dHIoJ2RhdGEtc3Jjc2V0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcmMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NyYycsIHNyYyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLXNyYycpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkaW1hZ2VFbC5hZGRDbGFzcyhwYXJhbXMubG9hZGVkQ2xhc3MpLnJlbW92ZUNsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpOwogICAgICAgICAgICAgICAgICAgICRzbGlkZUVsLmZpbmQoYC4ke3BhcmFtcy5wcmVsb2FkZXJDbGFzc31gKS5yZW1vdmUoKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBsb2FkSW5EdXBsaWNhdGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2xpZGVPcmlnaW5hbEluZGV4ID0gJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2xpZGVFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmlnaW5hbFNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD0iJHtzbGlkZU9yaWdpbmFsSW5kZXh9Il06bm90KC4ke3N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkSW5TbGlkZShvcmlnaW5hbFNsaWRlLmluZGV4KCksIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGR1cGxpY2F0ZWRTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PSIke3NsaWRlT3JpZ2luYWxJbmRleH0iXWApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEluU2xpZGUoZHVwbGljYXRlZFNsaWRlLmluZGV4KCksIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZW1pdCgnbGF6eUltYWdlUmVhZHknLCAkc2xpZGVFbFswXSwgJGltYWdlRWxbMF0pOwoKICAgICAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBlbWl0KCdsYXp5SW1hZ2VMb2FkJywgJHNsaWRlRWxbMF0sICRpbWFnZUVsWzBdKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBsb2FkKCkgewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICAkd3JhcHBlckVsLAogICAgICAgICAgICAgICAgcGFyYW1zOiBzd2lwZXJQYXJhbXMsCiAgICAgICAgICAgICAgICBzbGlkZXMsCiAgICAgICAgICAgICAgICBhY3RpdmVJbmRleAogICAgICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgICAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXJQYXJhbXMudmlydHVhbC5lbmFibGVkOwogICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXJQYXJhbXMubGF6eTsKICAgICAgICAgICAgbGV0IHNsaWRlc1BlclZpZXcgPSBzd2lwZXJQYXJhbXMuc2xpZGVzUGVyVmlldzsKCiAgICAgICAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHsKICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXcgPSAwOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBzbGlkZUV4aXN0KGluZGV4KSB7CiAgICAgICAgICAgICAgICBpZiAoaXNWaXJ0dWFsKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlclBhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD0iJHtpbmRleH0iXWApLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNsaWRlc1tpbmRleF0pIHJldHVybiB0cnVlOwoKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gc2xpZGVJbmRleChzbGlkZUVsKSB7CiAgICAgICAgICAgICAgICBpZiAoaXNWaXJ0dWFsKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoc2xpZGVFbCkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gJChzbGlkZUVsKS5pbmRleCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIWluaXRpYWxJbWFnZUxvYWRlZCkgaW5pdGlhbEltYWdlTG9hZGVkID0gdHJ1ZTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHsKICAgICAgICAgICAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlclBhcmFtcy5zbGlkZVZpc2libGVDbGFzc31gKS5lYWNoKHNsaWRlRWwgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaXNWaXJ0dWFsID8gJChzbGlkZUVsKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIDogJChzbGlkZUVsKS5pbmRleCgpOwogICAgICAgICAgICAgICAgICAgIGxvYWRJblNsaWRlKGluZGV4KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgaWYgKHNsaWRlc1BlclZpZXcgPiAxKSB7CiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXg7IGkgPCBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXc7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZUV4aXN0KGkpKSBsb2FkSW5TbGlkZShpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxvYWRJblNsaWRlKGFjdGl2ZUluZGV4KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHBhcmFtcy5sb2FkUHJldk5leHQpIHsKICAgICAgICAgICAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID4gMSB8fCBwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50ICYmIHBhcmFtcy5sb2FkUHJldk5leHRBbW91bnQgPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgYW1vdW50ID0gcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudDsKICAgICAgICAgICAgICAgICAgICBjb25zdCBzcHYgPSBNYXRoLmNlaWwoc2xpZGVzUGVyVmlldyk7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF4SW5kZXggPSBNYXRoLm1pbihhY3RpdmVJbmRleCArIHNwdiArIE1hdGgubWF4KGFtb3VudCwgc3B2KSwgc2xpZGVzLmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCAtIE1hdGgubWF4KHNwdiwgYW1vdW50KSwgMCk7IC8vIE5leHQgU2xpZGVzCgogICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIHNwdjsgaSA8IG1heEluZGV4OyBpICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSkpIGxvYWRJblNsaWRlKGkpOwogICAgICAgICAgICAgICAgICAgIH0gLy8gUHJldiBTbGlkZXMKCgogICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBtaW5JbmRleDsgaSA8IGFjdGl2ZUluZGV4OyBpICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSkpIGxvYWRJblNsaWRlKGkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dFNsaWRlID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyUGFyYW1zLnNsaWRlTmV4dENsYXNzfWApOwogICAgICAgICAgICAgICAgICAgIGlmIChuZXh0U2xpZGUubGVuZ3RoID4gMCkgbG9hZEluU2xpZGUoc2xpZGVJbmRleChuZXh0U2xpZGUpKTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2U2xpZGUgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXJQYXJhbXMuc2xpZGVQcmV2Q2xhc3N9YCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZTbGlkZS5sZW5ndGggPiAwKSBsb2FkSW5TbGlkZShzbGlkZUluZGV4KHByZXZTbGlkZSkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjaGVja0luVmlld09uTG9hZCgpIHsKICAgICAgICAgICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7CiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjsKICAgICAgICAgICAgY29uc3QgJHNjcm9sbEVsZW1lbnQgPSBzd2lwZXIucGFyYW1zLmxhenkuc2Nyb2xsaW5nRWxlbWVudCA/ICQoc3dpcGVyLnBhcmFtcy5sYXp5LnNjcm9sbGluZ0VsZW1lbnQpIDogJCh3aW5kb3cpOwogICAgICAgICAgICBjb25zdCBpc1dpbmRvdyA9ICRzY3JvbGxFbGVtZW50WzBdID09PSB3aW5kb3c7CiAgICAgICAgICAgIGNvbnN0IHNjcm9sbEVsZW1lbnRXaWR0aCA9IGlzV2luZG93ID8gd2luZG93LmlubmVyV2lkdGggOiAkc2Nyb2xsRWxlbWVudFswXS5vZmZzZXRXaWR0aDsKICAgICAgICAgICAgY29uc3Qgc2Nyb2xsRWxlbWVudEhlaWdodCA9IGlzV2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogJHNjcm9sbEVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0OwogICAgICAgICAgICBjb25zdCBzd2lwZXJPZmZzZXQgPSBzd2lwZXIuJGVsLm9mZnNldCgpOwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBydGxUcmFuc2xhdGU6IHJ0bAogICAgICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgICAgICBsZXQgaW5WaWV3ID0gZmFsc2U7CiAgICAgICAgICAgIGlmIChydGwpIHN3aXBlck9mZnNldC5sZWZ0IC09IHN3aXBlci4kZWxbMF0uc2Nyb2xsTGVmdDsKICAgICAgICAgICAgY29uc3Qgc3dpcGVyQ29vcmQgPSBbW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyLndpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVyLmhlaWdodF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlci53aWR0aCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlci5oZWlnaHRdXTsKCiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyQ29vcmQubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gc3dpcGVyQ29vcmRbaV07CgogICAgICAgICAgICAgICAgaWYgKHBvaW50WzBdID49IDAgJiYgcG9pbnRbMF0gPD0gc2Nyb2xsRWxlbWVudFdpZHRoICYmIHBvaW50WzFdID49IDAgJiYgcG9pbnRbMV0gPD0gc2Nyb2xsRWxlbWVudEhlaWdodCkgewogICAgICAgICAgICAgICAgICAgIGlmIChwb2ludFswXSA9PT0gMCAmJiBwb2ludFsxXSA9PT0gMCkgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKCiAgICAgICAgICAgICAgICAgICAgaW5WaWV3ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgcGFzc2l2ZUxpc3RlbmVyID0gc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgc3dpcGVyLnN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsKICAgICAgICAgICAgICAgIHBhc3NpdmU6IHRydWUsCiAgICAgICAgICAgICAgICBjYXB0dXJlOiBmYWxzZQogICAgICAgICAgICB9IDogZmFsc2U7CgogICAgICAgICAgICBpZiAoaW5WaWV3KSB7CiAgICAgICAgICAgICAgICBsb2FkKCk7CiAgICAgICAgICAgICAgICAkc2Nyb2xsRWxlbWVudC5vZmYoJ3Njcm9sbCcsIGNoZWNrSW5WaWV3T25Mb2FkLCBwYXNzaXZlTGlzdGVuZXIpOwogICAgICAgICAgICB9IGVsc2UgaWYgKCFzY3JvbGxIYW5kbGVyQXR0YWNoZWQpIHsKICAgICAgICAgICAgICAgIHNjcm9sbEhhbmRsZXJBdHRhY2hlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAkc2Nyb2xsRWxlbWVudC5vbignc2Nyb2xsJywgY2hlY2tJblZpZXdPbkxvYWQsIHBhc3NpdmVMaXN0ZW5lcik7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIG9uKCdiZWZvcmVJbml0JywgKCkgPT4gewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMgPSBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIG9uKCdpbml0JywgKCkgPT4gewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHsKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuY2hlY2tJblZpZXcpIHsKICAgICAgICAgICAgICAgICAgICBjaGVja0luVmlld09uTG9hZCgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsb2FkKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbignc2Nyb2xsJywgKCkgPT4gewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUuc3RpY2t5KSB7CiAgICAgICAgICAgICAgICBsb2FkKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbignc2Nyb2xsYmFyRHJhZ01vdmUgcmVzaXplIF9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJywgKCkgPT4gewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHsKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuY2hlY2tJblZpZXcpIHsKICAgICAgICAgICAgICAgICAgICBjaGVja0luVmlld09uTG9hZCgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsb2FkKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbigndHJhbnNpdGlvblN0YXJ0JywgKCkgPT4gewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHsKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0IHx8ICFzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0ICYmICFpbml0aWFsSW1hZ2VMb2FkZWQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmNoZWNrSW5WaWV3KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrSW5WaWV3T25Mb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgbG9hZCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIG9uKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4gewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgIXN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQpIHsKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuY2hlY2tJblZpZXcpIHsKICAgICAgICAgICAgICAgICAgICBjaGVja0luVmlld09uTG9hZCgpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsb2FkKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbignc2xpZGVDaGFuZ2UnLCAoKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgIGxhenksCiAgICAgICAgICAgICAgICBjc3NNb2RlLAogICAgICAgICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzcywKICAgICAgICAgICAgICAgIHRvdWNoUmVsZWFzZU9uRWRnZXMsCiAgICAgICAgICAgICAgICByZXNpc3RhbmNlUmF0aW8KICAgICAgICAgICAgfSA9IHN3aXBlci5wYXJhbXM7CgogICAgICAgICAgICBpZiAobGF6eS5lbmFibGVkICYmIChjc3NNb2RlIHx8IHdhdGNoU2xpZGVzUHJvZ3Jlc3MgJiYgKHRvdWNoUmVsZWFzZU9uRWRnZXMgfHwgcmVzaXN0YW5jZVJhdGlvID09PSAwKSkpIHsKICAgICAgICAgICAgICAgIGxvYWQoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIG9uKCdkZXN0cm95JywgKCkgPT4gewogICAgICAgICAgICBpZiAoIXN3aXBlci4kZWwpIHJldHVybjsKICAgICAgICAgICAgc3dpcGVyLiRlbC5maW5kKGAuJHtzd2lwZXIucGFyYW1zLmxhenkubG9hZGluZ0NsYXNzfWApLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubGF6eS5sb2FkaW5nQ2xhc3MpOwogICAgICAgIH0pOwogICAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLmxhenksIHsKICAgICAgICAgICAgbG9hZCwKICAgICAgICAgICAgbG9hZEluU2xpZGUKICAgICAgICB9KTsKICAgIH0KCiAgICAvKiBlc2xpbnQgbm8tYml0d2lzZTogWyJlcnJvciIsIHsgImFsbG93IjogWyI+PiJdIH1dICovCiAgICBmdW5jdGlvbiBDb250cm9sbGVyKF9yZWYpIHsKICAgICAgICBsZXQgewogICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgIGV4dGVuZFBhcmFtcywKICAgICAgICAgICAgb24KICAgICAgICB9ID0gX3JlZjsKICAgICAgICBleHRlbmRQYXJhbXMoewogICAgICAgICAgICBjb250cm9sbGVyOiB7CiAgICAgICAgICAgICAgICBjb250cm9sOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICBpbnZlcnNlOiBmYWxzZSwKICAgICAgICAgICAgICAgIGJ5OiAnc2xpZGUnIC8vIG9yICdjb250YWluZXInCgogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIgPSB7CiAgICAgICAgICAgIGNvbnRyb2w6IHVuZGVmaW5lZAogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIExpbmVhclNwbGluZSh4LCB5KSB7CiAgICAgICAgICAgIGNvbnN0IGJpbmFyeVNlYXJjaCA9IGZ1bmN0aW9uIHNlYXJjaCgpIHsKICAgICAgICAgICAgICAgIGxldCBtYXhJbmRleDsKICAgICAgICAgICAgICAgIGxldCBtaW5JbmRleDsKICAgICAgICAgICAgICAgIGxldCBndWVzczsKICAgICAgICAgICAgICAgIHJldHVybiAoYXJyYXksIHZhbCkgPT4gewogICAgICAgICAgICAgICAgICAgIG1pbkluZGV4ID0gLTE7CiAgICAgICAgICAgICAgICAgICAgbWF4SW5kZXggPSBhcnJheS5sZW5ndGg7CgogICAgICAgICAgICAgICAgICAgIHdoaWxlIChtYXhJbmRleCAtIG1pbkluZGV4ID4gMSkgewogICAgICAgICAgICAgICAgICAgICAgICBndWVzcyA9IG1heEluZGV4ICsgbWluSW5kZXggPj4gMTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnJheVtndWVzc10gPD0gdmFsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5JbmRleCA9IGd1ZXNzOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4SW5kZXggPSBndWVzczsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1heEluZGV4OwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSgpOwoKICAgICAgICAgICAgdGhpcy54ID0geDsKICAgICAgICAgICAgdGhpcy55ID0geTsKICAgICAgICAgICAgdGhpcy5sYXN0SW5kZXggPSB4Lmxlbmd0aCAtIDE7IC8vIEdpdmVuIGFuIHggdmFsdWUgKHgyKSwgcmV0dXJuIHRoZSBleHBlY3RlZCB5MiB2YWx1ZToKICAgICAgICAgICAgLy8gKHgxLHkxKSBpcyB0aGUga25vd24gcG9pbnQgYmVmb3JlIGdpdmVuIHZhbHVlLAogICAgICAgICAgICAvLyAoeDMseTMpIGlzIHRoZSBrbm93biBwb2ludCBhZnRlciBnaXZlbiB2YWx1ZS4KCiAgICAgICAgICAgIGxldCBpMTsKICAgICAgICAgICAgbGV0IGkzOwoKICAgICAgICAgICAgdGhpcy5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHgyKSB7CiAgICAgICAgICAgICAgICBpZiAoIXgyKSByZXR1cm4gMDsgLy8gR2V0IHRoZSBpbmRleGVzIG9mIHgxIGFuZCB4MyAodGhlIGFycmF5IGluZGV4ZXMgYmVmb3JlIGFuZCBhZnRlciBnaXZlbiB4Mik6CgogICAgICAgICAgICAgICAgaTMgPSBiaW5hcnlTZWFyY2godGhpcy54LCB4Mik7CiAgICAgICAgICAgICAgICBpMSA9IGkzIC0gMTsgLy8gV2UgaGF2ZSBvdXIgaW5kZXhlcyBpMSAmIGkzLCBzbyB3ZSBjYW4gY2FsY3VsYXRlIGFscmVhZHk6CiAgICAgICAgICAgICAgICAvLyB5MiA6PSAoKHgy4oiSeDEpIMOXICh5M+KIknkxKSkgw7cgKHgz4oiSeDEpICsgeTEKCiAgICAgICAgICAgICAgICByZXR1cm4gKHgyIC0gdGhpcy54W2kxXSkgKiAodGhpcy55W2kzXSAtIHRoaXMueVtpMV0pIC8gKHRoaXMueFtpM10gLSB0aGlzLnhbaTFdKSArIHRoaXMueVtpMV07CiAgICAgICAgICAgIH07CgogICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICB9IC8vIHh4eDogZm9yIG5vdyBpIHdpbGwganVzdCBzYXZlIG9uZSBzcGxpbmUgZnVuY3Rpb24gdG8gdG8KCgogICAgICAgIGZ1bmN0aW9uIGdldEludGVycG9sYXRlRnVuY3Rpb24oYykgewogICAgICAgICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLnNwbGluZSkgewogICAgICAgICAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gc3dpcGVyLnBhcmFtcy5sb29wID8gbmV3IExpbmVhclNwbGluZShzd2lwZXIuc2xpZGVzR3JpZCwgYy5zbGlkZXNHcmlkKSA6IG5ldyBMaW5lYXJTcGxpbmUoc3dpcGVyLnNuYXBHcmlkLCBjLnNuYXBHcmlkKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKF90LCBieUNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgY29uc3QgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7CiAgICAgICAgICAgIGxldCBtdWx0aXBsaWVyOwogICAgICAgICAgICBsZXQgY29udHJvbGxlZFRyYW5zbGF0ZTsKICAgICAgICAgICAgY29uc3QgU3dpcGVyID0gc3dpcGVyLmNvbnN0cnVjdG9yOwoKICAgICAgICAgICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjKSB7CiAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgY3JlYXRlIGFuIEludGVycG9sYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBzbmFwR3JpZHMKICAgICAgICAgICAgICAgIC8vIHggaXMgdGhlIEdyaWQgb2YgdGhlIHNjcm9sbGVkIHNjcm9sbGVyIGFuZCB5IHdpbGwgYmUgdGhlIGNvbnRyb2xsZWQgc2Nyb2xsZXIKICAgICAgICAgICAgICAgIC8vIGl0IG1ha2VzIHNlbnNlIHRvIGNyZWF0ZSB0aGlzIG9ubHkgb25jZSBhbmQgcmVjYWxsIGl0IGZvciB0aGUgaW50ZXJwb2xhdGlvbgogICAgICAgICAgICAgICAgLy8gdGhlIGZ1bmN0aW9uIGRvZXMgYSBsb3Qgb2YgdmFsdWUgY2FjaGluZyBmb3IgcGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGU7CgogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ3NsaWRlJykgewogICAgICAgICAgICAgICAgICAgIGdldEludGVycG9sYXRlRnVuY3Rpb24oYyk7IC8vIGkgYW0gbm90IHN1cmUgd2h5IHRoZSB2YWx1ZXMgaGF2ZSB0byBiZSBtdWx0aXBsaWNhdGVkIHRoaXMgd2F5LCB0cmllZCB0byBpbnZlcnQgdGhlIHNuYXBHcmlkCiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGl0IGRpZCBub3Qgd29yayBvdXQKCiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IC1zd2lwZXIuY29udHJvbGxlci5zcGxpbmUuaW50ZXJwb2xhdGUoLXRyYW5zbGF0ZSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCFjb250cm9sbGVkVHJhbnNsYXRlIHx8IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ2NvbnRhaW5lcicpIHsKICAgICAgICAgICAgICAgICAgICBtdWx0aXBsaWVyID0gKGMubWF4VHJhbnNsYXRlKCkgLSBjLm1pblRyYW5zbGF0ZSgpKSAvIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpOwogICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAqIG11bHRpcGxpZXIgKyBjLm1pblRyYW5zbGF0ZSgpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuaW52ZXJzZSkgewogICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSBjLm1heFRyYW5zbGF0ZSgpIC0gY29udHJvbGxlZFRyYW5zbGF0ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjLnVwZGF0ZVByb2dyZXNzKGNvbnRyb2xsZWRUcmFuc2xhdGUpOwogICAgICAgICAgICAgICAgYy5zZXRUcmFuc2xhdGUoY29udHJvbGxlZFRyYW5zbGF0ZSwgc3dpcGVyKTsKICAgICAgICAgICAgICAgIGMudXBkYXRlQWN0aXZlSW5kZXgoKTsKICAgICAgICAgICAgICAgIGMudXBkYXRlU2xpZGVzQ2xhc3NlcygpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkgewogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250cm9sbGVkLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZWRbaV0gIT09IGJ5Q29udHJvbGxlciAmJiBjb250cm9sbGVkW2ldIGluc3RhbmNlb2YgU3dpcGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZFtpXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7CiAgICAgICAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGNvbnRyb2xsZWQpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgY29uc3QgU3dpcGVyID0gc3dpcGVyLmNvbnN0cnVjdG9yOwogICAgICAgICAgICBjb25zdCBjb250cm9sbGVkID0gc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbDsKICAgICAgICAgICAgbGV0IGk7CgogICAgICAgICAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjKSB7CiAgICAgICAgICAgICAgICBjLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIHN3aXBlcik7CgogICAgICAgICAgICAgICAgaWYgKGR1cmF0aW9uICE9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYy50cmFuc2l0aW9uU3RhcnQoKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKGMucGFyYW1zLmF1dG9IZWlnaHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFRpY2soKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYy51cGRhdGVBdXRvSGVpZ2h0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgYy4kd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRyb2xsZWQpIHJldHVybjsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjLnBhcmFtcy5sb29wICYmIHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ3NsaWRlJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5sb29wRml4KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGMudHJhbnNpdGlvbkVuZCgpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkgewogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRyb2xsZWQubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlZFtpXSAhPT0gYnlDb250cm9sbGVyICYmIGNvbnRyb2xsZWRbaV0gaW5zdGFuY2VvZiBTd2lwZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZFtpXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7CiAgICAgICAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlU3BsaW5lKCkgewogICAgICAgICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjsKCiAgICAgICAgICAgIGlmIChzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIG9uKCdiZWZvcmVJbml0JywgKCkgPT4gewogICAgICAgICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sID0gc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2w7CiAgICAgICAgfSk7CiAgICAgICAgb24oJ3VwZGF0ZScsICgpID0+IHsKICAgICAgICAgICAgcmVtb3ZlU3BsaW5lKCk7CiAgICAgICAgfSk7CiAgICAgICAgb24oJ3Jlc2l6ZScsICgpID0+IHsKICAgICAgICAgICAgcmVtb3ZlU3BsaW5lKCk7CiAgICAgICAgfSk7CiAgICAgICAgb24oJ29ic2VydmVyVXBkYXRlJywgKCkgPT4gewogICAgICAgICAgICByZW1vdmVTcGxpbmUoKTsKICAgICAgICB9KTsKICAgICAgICBvbignc2V0VHJhbnNsYXRlJywgKF9zLCB0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikgPT4gewogICAgICAgICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjsKICAgICAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTsKICAgICAgICB9KTsKICAgICAgICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcikgPT4gewogICAgICAgICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjsKICAgICAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKTsKICAgICAgICB9KTsKICAgICAgICBPYmplY3QuYXNzaWduKHN3aXBlci5jb250cm9sbGVyLCB7CiAgICAgICAgICAgIHNldFRyYW5zbGF0ZSwKICAgICAgICAgICAgc2V0VHJhbnNpdGlvbgogICAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIEExMXkoX3JlZikgewogICAgICAgIGxldCB7CiAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgZXh0ZW5kUGFyYW1zLAogICAgICAgICAgICBvbgogICAgICAgIH0gPSBfcmVmOwogICAgICAgIGV4dGVuZFBhcmFtcyh7CiAgICAgICAgICAgIGExMXk6IHsKICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsCiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25DbGFzczogJ3N3aXBlci1ub3RpZmljYXRpb24nLAogICAgICAgICAgICAgICAgcHJldlNsaWRlTWVzc2FnZTogJ1ByZXZpb3VzIHNsaWRlJywKICAgICAgICAgICAgICAgIG5leHRTbGlkZU1lc3NhZ2U6ICdOZXh0IHNsaWRlJywKICAgICAgICAgICAgICAgIGZpcnN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGUnLAogICAgICAgICAgICAgICAgbGFzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGxhc3Qgc2xpZGUnLAogICAgICAgICAgICAgICAgcGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2U6ICdHbyB0byBzbGlkZSB7e2luZGV4fX0nLAogICAgICAgICAgICAgICAgc2xpZGVMYWJlbE1lc3NhZ2U6ICd7e2luZGV4fX0gLyB7e3NsaWRlc0xlbmd0aH19JywKICAgICAgICAgICAgICAgIGNvbnRhaW5lck1lc3NhZ2U6IG51bGwsCiAgICAgICAgICAgICAgICBjb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlOiBudWxsLAogICAgICAgICAgICAgICAgaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2U6IG51bGwsCiAgICAgICAgICAgICAgICBzbGlkZVJvbGU6ICdncm91cCcsCiAgICAgICAgICAgICAgICBpZDogbnVsbAogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgbGV0IGxpdmVSZWdpb24gPSBudWxsOwoKICAgICAgICBmdW5jdGlvbiBub3RpZnkobWVzc2FnZSkgewogICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb24gPSBsaXZlUmVnaW9uOwogICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uLmxlbmd0aCA9PT0gMCkgcmV0dXJuOwogICAgICAgICAgICBub3RpZmljYXRpb24uaHRtbCgnJyk7CiAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5odG1sKG1lc3NhZ2UpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0UmFuZG9tTnVtYmVyKHNpemUpIHsKICAgICAgICAgICAgaWYgKHNpemUgPT09IHZvaWQgMCkgewogICAgICAgICAgICAgICAgc2l6ZSA9IDE2OwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCByYW5kb21DaGFyID0gKCkgPT4gTWF0aC5yb3VuZCgxNiAqIE1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDE2KTsKCiAgICAgICAgICAgIHJldHVybiAneCcucmVwZWF0KHNpemUpLnJlcGxhY2UoL3gvZywgcmFuZG9tQ2hhcik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBtYWtlRWxGb2N1c2FibGUoJGVsKSB7CiAgICAgICAgICAgICRlbC5hdHRyKCd0YWJJbmRleCcsICcwJyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBtYWtlRWxOb3RGb2N1c2FibGUoJGVsKSB7CiAgICAgICAgICAgICRlbC5hdHRyKCd0YWJJbmRleCcsICctMScpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYWRkRWxSb2xlKCRlbCwgcm9sZSkgewogICAgICAgICAgICAkZWwuYXR0cigncm9sZScsIHJvbGUpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYWRkRWxSb2xlRGVzY3JpcHRpb24oJGVsLCBkZXNjcmlwdGlvbikgewogICAgICAgICAgICAkZWwuYXR0cignYXJpYS1yb2xlZGVzY3JpcHRpb24nLCBkZXNjcmlwdGlvbik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhZGRFbENvbnRyb2xzKCRlbCwgY29udHJvbHMpIHsKICAgICAgICAgICAgJGVsLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBjb250cm9scyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhZGRFbExhYmVsKCRlbCwgbGFiZWwpIHsKICAgICAgICAgICAgJGVsLmF0dHIoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBhZGRFbElkKCRlbCwgaWQpIHsKICAgICAgICAgICAgJGVsLmF0dHIoJ2lkJywgaWQpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYWRkRWxMaXZlKCRlbCwgbGl2ZSkgewogICAgICAgICAgICAkZWwuYXR0cignYXJpYS1saXZlJywgbGl2ZSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBkaXNhYmxlRWwoJGVsKSB7CiAgICAgICAgICAgICRlbC5hdHRyKCdhcmlhLWRpc2FibGVkJywgdHJ1ZSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBlbmFibGVFbCgkZWwpIHsKICAgICAgICAgICAgJGVsLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBvbkVudGVyT3JTcGFjZUtleShlKSB7CiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgIT09IDEzICYmIGUua2V5Q29kZSAhPT0gMzIpIHJldHVybjsKICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5OwogICAgICAgICAgICBjb25zdCAkdGFyZ2V0RWwgPSAkKGUudGFyZ2V0KTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSkgewogICAgICAgICAgICAgICAgaWYgKCEoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHsKICAgICAgICAgICAgICAgICAgICBub3RpZnkocGFyYW1zLmxhc3RTbGlkZU1lc3NhZ2UpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBub3RpZnkocGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCAmJiAkdGFyZ2V0RWwuaXMoc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCkpIHsKICAgICAgICAgICAgICAgIGlmICghKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkgewogICAgICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgbm90aWZ5KHBhcmFtcy5maXJzdFNsaWRlTWVzc2FnZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG5vdGlmeShwYXJhbXMucHJldlNsaWRlTWVzc2FnZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiAkdGFyZ2V0RWwuaXMoY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkpIHsKICAgICAgICAgICAgICAgICR0YXJnZXRFbFswXS5jbGljaygpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1cGRhdGVOYXZpZ2F0aW9uKCkgewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wIHx8IHN3aXBlci5wYXJhbXMucmV3aW5kIHx8ICFzd2lwZXIubmF2aWdhdGlvbikgcmV0dXJuOwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICAkbmV4dEVsLAogICAgICAgICAgICAgICAgJHByZXZFbAogICAgICAgICAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247CgogICAgICAgICAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHsKICAgICAgICAgICAgICAgICAgICBkaXNhYmxlRWwoJHByZXZFbCk7CiAgICAgICAgICAgICAgICAgICAgbWFrZUVsTm90Rm9jdXNhYmxlKCRwcmV2RWwpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBlbmFibGVFbCgkcHJldkVsKTsKICAgICAgICAgICAgICAgICAgICBtYWtlRWxGb2N1c2FibGUoJHByZXZFbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5pc0VuZCkgewogICAgICAgICAgICAgICAgICAgIGRpc2FibGVFbCgkbmV4dEVsKTsKICAgICAgICAgICAgICAgICAgICBtYWtlRWxOb3RGb2N1c2FibGUoJG5leHRFbCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGVuYWJsZUVsKCRuZXh0RWwpOwogICAgICAgICAgICAgICAgICAgIG1ha2VFbEZvY3VzYWJsZSgkbmV4dEVsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaGFzUGFnaW5hdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGg7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBoYXNDbGlja2FibGVQYWdpbmF0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gaGFzUGFnaW5hdGlvbigpICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGU7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1cGRhdGVQYWdpbmF0aW9uKCkgewogICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7CiAgICAgICAgICAgIGlmICghaGFzUGFnaW5hdGlvbigpKSByZXR1cm47CiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZWFjaChidWxsZXRFbCA9PiB7CiAgICAgICAgICAgICAgICBjb25zdCAkYnVsbGV0RWwgPSAkKGJ1bGxldEVsKTsKCiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSkgewogICAgICAgICAgICAgICAgICAgIG1ha2VFbEZvY3VzYWJsZSgkYnVsbGV0RWwpOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5yZW5kZXJCdWxsZXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkRWxSb2xlKCRidWxsZXRFbCwgJ2J1dHRvbicpOwogICAgICAgICAgICAgICAgICAgICAgICBhZGRFbExhYmVsKCRidWxsZXRFbCwgcGFyYW1zLnBhZ2luYXRpb25CdWxsZXRNZXNzYWdlLnJlcGxhY2UoL1x7XHtpbmRleFx9XH0vLCAkYnVsbGV0RWwuaW5kZXgoKSArIDEpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCRidWxsZXRFbC5pcyhgLiR7c3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldEFjdGl2ZUNsYXNzfWApKSB7CiAgICAgICAgICAgICAgICAgICAgJGJ1bGxldEVsLmF0dHIoJ2FyaWEtY3VycmVudCcsICd0cnVlJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICRidWxsZXRFbC5yZW1vdmVBdHRyKCdhcmlhLWN1cnJlbnQnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBpbml0TmF2RWwgPSAoJGVsLCB3cmFwcGVySWQsIG1lc3NhZ2UpID0+IHsKICAgICAgICAgICAgbWFrZUVsRm9jdXNhYmxlKCRlbCk7CgogICAgICAgICAgICBpZiAoJGVsWzBdLnRhZ05hbWUgIT09ICdCVVRUT04nKSB7CiAgICAgICAgICAgICAgICBhZGRFbFJvbGUoJGVsLCAnYnV0dG9uJyk7CiAgICAgICAgICAgICAgICAkZWwub24oJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGFkZEVsTGFiZWwoJGVsLCBtZXNzYWdlKTsKICAgICAgICAgICAgYWRkRWxDb250cm9scygkZWwsIHdyYXBwZXJJZCk7CiAgICAgICAgfTsKCiAgICAgICAgY29uc3QgaGFuZGxlRm9jdXMgPSBlID0+IHsKICAgICAgICAgICAgY29uc3Qgc2xpZGVFbCA9IGUudGFyZ2V0LmNsb3Nlc3QoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKTsKICAgICAgICAgICAgaWYgKCFzbGlkZUVsIHx8ICFzd2lwZXIuc2xpZGVzLmluY2x1ZGVzKHNsaWRlRWwpKSByZXR1cm47CiAgICAgICAgICAgIGNvbnN0IGlzQWN0aXZlID0gc3dpcGVyLnNsaWRlcy5pbmRleE9mKHNsaWRlRWwpID09PSBzd2lwZXIuYWN0aXZlSW5kZXg7CiAgICAgICAgICAgIGNvbnN0IGlzVmlzaWJsZSA9IHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyAmJiBzd2lwZXIudmlzaWJsZVNsaWRlcyAmJiBzd2lwZXIudmlzaWJsZVNsaWRlcy5pbmNsdWRlcyhzbGlkZUVsKTsKICAgICAgICAgICAgaWYgKGlzQWN0aXZlIHx8IGlzVmlzaWJsZSkgcmV0dXJuOwoKICAgICAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkgewogICAgICAgICAgICAgICAgc3dpcGVyLmVsLnNjcm9sbExlZnQgPSAwOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc3dpcGVyLmVsLnNjcm9sbFRvcCA9IDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMuaW5kZXhPZihzbGlkZUVsKSwgMCk7CiAgICAgICAgfTsKCiAgICAgICAgY29uc3QgaW5pdFNsaWRlcyA9ICgpID0+IHsKICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5OwoKICAgICAgICAgICAgaWYgKHBhcmFtcy5pdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZSkgewogICAgICAgICAgICAgICAgYWRkRWxSb2xlRGVzY3JpcHRpb24oJChzd2lwZXIuc2xpZGVzKSwgcGFyYW1zLml0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHBhcmFtcy5zbGlkZVJvbGUpIHsKICAgICAgICAgICAgICAgIGFkZEVsUm9sZSgkKHN3aXBlci5zbGlkZXMpLCBwYXJhbXMuc2xpZGVSb2xlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnBhcmFtcy5sb29wID8gc3dpcGVyLnNsaWRlcy5maWx0ZXIoZWwgPT4gIWVsLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKS5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDsKCiAgICAgICAgICAgIGlmIChwYXJhbXMuc2xpZGVMYWJlbE1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZXMuZWFjaCgoc2xpZGVFbCwgaW5kZXgpID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zdCAkc2xpZGVFbCA9ICQoc2xpZGVFbCk7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHBhcnNlSW50KCRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKSA6IGluZGV4OwogICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyaWFMYWJlbE1lc3NhZ2UgPSBwYXJhbXMuc2xpZGVMYWJlbE1lc3NhZ2UucmVwbGFjZSgvXHtce2luZGV4XH1cfS8sIHNsaWRlSW5kZXggKyAxKS5yZXBsYWNlKC9ce1x7c2xpZGVzTGVuZ3RoXH1cfS8sIHNsaWRlc0xlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgYWRkRWxMYWJlbCgkc2xpZGVFbCwgYXJpYUxhYmVsTWVzc2FnZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGNvbnN0IGluaXQgPSAoKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTsKICAgICAgICAgICAgc3dpcGVyLiRlbC5hcHBlbmQobGl2ZVJlZ2lvbik7IC8vIENvbnRhaW5lcgoKICAgICAgICAgICAgY29uc3QgJGNvbnRhaW5lckVsID0gc3dpcGVyLiRlbDsKCiAgICAgICAgICAgIGlmIChwYXJhbXMuY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZSkgewogICAgICAgICAgICAgICAgYWRkRWxSb2xlRGVzY3JpcHRpb24oJGNvbnRhaW5lckVsLCBwYXJhbXMuY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChwYXJhbXMuY29udGFpbmVyTWVzc2FnZSkgewogICAgICAgICAgICAgICAgYWRkRWxMYWJlbCgkY29udGFpbmVyRWwsIHBhcmFtcy5jb250YWluZXJNZXNzYWdlKTsKICAgICAgICAgICAgfSAvLyBXcmFwcGVyCgoKICAgICAgICAgICAgY29uc3QgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsOwogICAgICAgICAgICBjb25zdCB3cmFwcGVySWQgPSBwYXJhbXMuaWQgfHwgJHdyYXBwZXJFbC5hdHRyKCdpZCcpIHx8IGBzd2lwZXItd3JhcHBlci0ke2dldFJhbmRvbU51bWJlcigxNil9YDsKICAgICAgICAgICAgY29uc3QgbGl2ZSA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkgJiYgc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5lbmFibGVkID8gJ29mZicgOiAncG9saXRlJzsKICAgICAgICAgICAgYWRkRWxJZCgkd3JhcHBlckVsLCB3cmFwcGVySWQpOwogICAgICAgICAgICBhZGRFbExpdmUoJHdyYXBwZXJFbCwgbGl2ZSk7IC8vIFNsaWRlCgogICAgICAgICAgICBpbml0U2xpZGVzKCk7IC8vIE5hdmlnYXRpb24KCiAgICAgICAgICAgIGxldCAkbmV4dEVsOwogICAgICAgICAgICBsZXQgJHByZXZFbDsKCiAgICAgICAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSB7CiAgICAgICAgICAgICAgICAkbmV4dEVsID0gc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpIHsKICAgICAgICAgICAgICAgICRwcmV2RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCkgewogICAgICAgICAgICAgICAgaW5pdE5hdkVsKCRuZXh0RWwsIHdyYXBwZXJJZCwgcGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCkgewogICAgICAgICAgICAgICAgaW5pdE5hdkVsKCRwcmV2RWwsIHdyYXBwZXJJZCwgcGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpOwogICAgICAgICAgICB9IC8vIFBhZ2luYXRpb24KCgogICAgICAgICAgICBpZiAoaGFzQ2xpY2thYmxlUGFnaW5hdGlvbigpKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwub24oJ2tleWRvd24nLCBjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpLCBvbkVudGVyT3JTcGFjZUtleSk7CiAgICAgICAgICAgIH0gLy8gVGFiIGZvY3VzCgoKICAgICAgICAgICAgc3dpcGVyLiRlbC5vbignZm9jdXMnLCBoYW5kbGVGb2N1cywgdHJ1ZSk7CiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgICAgICAgaWYgKGxpdmVSZWdpb24gJiYgbGl2ZVJlZ2lvbi5sZW5ndGggPiAwKSBsaXZlUmVnaW9uLnJlbW92ZSgpOwogICAgICAgICAgICBsZXQgJG5leHRFbDsKICAgICAgICAgICAgbGV0ICRwcmV2RWw7CgogICAgICAgICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkgewogICAgICAgICAgICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7CiAgICAgICAgICAgICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRuZXh0RWwpIHsKICAgICAgICAgICAgICAgICRuZXh0RWwub2ZmKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoJHByZXZFbCkgewogICAgICAgICAgICAgICAgJHByZXZFbC5vZmYoJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSk7CiAgICAgICAgICAgIH0gLy8gUGFnaW5hdGlvbgoKCiAgICAgICAgICAgIGlmIChoYXNDbGlja2FibGVQYWdpbmF0aW9uKCkpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5vZmYoJ2tleWRvd24nLCBjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpLCBvbkVudGVyT3JTcGFjZUtleSk7CiAgICAgICAgICAgIH0gLy8gVGFiIGZvY3VzCgoKICAgICAgICAgICAgc3dpcGVyLiRlbC5vZmYoJ2ZvY3VzJywgaGFuZGxlRm9jdXMsIHRydWUpOwogICAgICAgIH0KCiAgICAgICAgb24oJ2JlZm9yZUluaXQnLCAoKSA9PiB7CiAgICAgICAgICAgIGxpdmVSZWdpb24gPSAkKGA8c3BhbiBjbGFzcz0iJHtzd2lwZXIucGFyYW1zLmExMXkubm90aWZpY2F0aW9uQ2xhc3N9IiBhcmlhLWxpdmU9ImFzc2VydGl2ZSIgYXJpYS1hdG9taWM9InRydWUiPjwvc3Bhbj5gKTsKICAgICAgICB9KTsKICAgICAgICBvbignYWZ0ZXJJbml0JywgKCkgPT4gewogICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47CiAgICAgICAgICAgIGluaXQoKTsKICAgICAgICB9KTsKICAgICAgICBvbignc2xpZGVzTGVuZ3RoQ2hhbmdlIHNuYXBHcmlkTGVuZ3RoQ2hhbmdlIHNsaWRlc0dyaWRMZW5ndGhDaGFuZ2UnLCAoKSA9PiB7CiAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjsKICAgICAgICAgICAgaW5pdFNsaWRlcygpOwogICAgICAgIH0pOwogICAgICAgIG9uKCdmcm9tRWRnZSB0b0VkZ2UgYWZ0ZXJJbml0IGxvY2sgdW5sb2NrJywgKCkgPT4gewogICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47CiAgICAgICAgICAgIHVwZGF0ZU5hdmlnYXRpb24oKTsKICAgICAgICB9KTsKICAgICAgICBvbigncGFnaW5hdGlvblVwZGF0ZScsICgpID0+IHsKICAgICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuOwogICAgICAgICAgICB1cGRhdGVQYWdpbmF0aW9uKCk7CiAgICAgICAgfSk7CiAgICAgICAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7CiAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjsKICAgICAgICAgICAgZGVzdHJveSgpOwogICAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIEhpc3RvcnkoX3JlZikgewogICAgICAgIGxldCB7CiAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgZXh0ZW5kUGFyYW1zLAogICAgICAgICAgICBvbgogICAgICAgIH0gPSBfcmVmOwogICAgICAgIGV4dGVuZFBhcmFtcyh7CiAgICAgICAgICAgIGhpc3Rvcnk6IHsKICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgcm9vdDogJycsCiAgICAgICAgICAgICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLAogICAgICAgICAgICAgICAga2V5OiAnc2xpZGVzJywKICAgICAgICAgICAgICAgIGtlZXBRdWVyeTogZmFsc2UKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGxldCBpbml0aWFsaXplZCA9IGZhbHNlOwogICAgICAgIGxldCBwYXRocyA9IHt9OwoKICAgICAgICBjb25zdCBzbHVnaWZ5ID0gdGV4dCA9PiB7CiAgICAgICAgICAgIHJldHVybiB0ZXh0LnRvU3RyaW5nKCkucmVwbGFjZSgvXHMrL2csICctJykucmVwbGFjZSgvW15cdy1dKy9nLCAnJykucmVwbGFjZSgvLS0rL2csICctJykucmVwbGFjZSgvXi0rLywgJycpLnJlcGxhY2UoLy0rJC8sICcnKTsKICAgICAgICB9OwoKICAgICAgICBjb25zdCBnZXRQYXRoVmFsdWVzID0gdXJsT3ZlcnJpZGUgPT4gewogICAgICAgICAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTsKICAgICAgICAgICAgbGV0IGxvY2F0aW9uOwoKICAgICAgICAgICAgaWYgKHVybE92ZXJyaWRlKSB7CiAgICAgICAgICAgICAgICBsb2NhdGlvbiA9IG5ldyBVUkwodXJsT3ZlcnJpZGUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IHBhdGhBcnJheSA9IGxvY2F0aW9uLnBhdGhuYW1lLnNsaWNlKDEpLnNwbGl0KCcvJykuZmlsdGVyKHBhcnQgPT4gcGFydCAhPT0gJycpOwogICAgICAgICAgICBjb25zdCB0b3RhbCA9IHBhdGhBcnJheS5sZW5ndGg7CiAgICAgICAgICAgIGNvbnN0IGtleSA9IHBhdGhBcnJheVt0b3RhbCAtIDJdOwogICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhdGhBcnJheVt0b3RhbCAtIDFdOwogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAga2V5LAogICAgICAgICAgICAgICAgdmFsdWUKICAgICAgICAgICAgfTsKICAgICAgICB9OwoKICAgICAgICBjb25zdCBzZXRIaXN0b3J5ID0gKGtleSwgaW5kZXgpID0+IHsKICAgICAgICAgICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7CiAgICAgICAgICAgIGlmICghaW5pdGlhbGl6ZWQgfHwgIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSByZXR1cm47CiAgICAgICAgICAgIGxldCBsb2NhdGlvbjsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVybCkgewogICAgICAgICAgICAgICAgbG9jYXRpb24gPSBuZXcgVVJMKHN3aXBlci5wYXJhbXMudXJsKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpOwogICAgICAgICAgICBsZXQgdmFsdWUgPSBzbHVnaWZ5KHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpKTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3Rvcnkucm9vdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBsZXQgcm9vdCA9IHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yb290OwogICAgICAgICAgICAgICAgaWYgKHJvb3Rbcm9vdC5sZW5ndGggLSAxXSA9PT0gJy8nKSByb290ID0gcm9vdC5zbGljZSgwLCByb290Lmxlbmd0aCAtIDEpOwogICAgICAgICAgICAgICAgdmFsdWUgPSBgJHtyb290fS8ke2tleX0vJHt2YWx1ZX1gOwogICAgICAgICAgICB9IGVsc2UgaWYgKCFsb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhrZXkpKSB7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IGAke2tleX0vJHt2YWx1ZX1gOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmtlZXBRdWVyeSkgewogICAgICAgICAgICAgICAgdmFsdWUgKz0gbG9jYXRpb24uc2VhcmNoOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB3aW5kb3cuaGlzdG9yeS5zdGF0ZTsKCiAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUgJiYgY3VycmVudFN0YXRlLnZhbHVlID09PSB2YWx1ZSkgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkgewogICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZQogICAgICAgICAgICAgICAgfSwgbnVsbCwgdmFsdWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZQogICAgICAgICAgICAgICAgfSwgbnVsbCwgdmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgY29uc3Qgc2Nyb2xsVG9TbGlkZSA9IChzcGVlZCwgdmFsdWUsIHJ1bkNhbGxiYWNrcykgPT4gewogICAgICAgICAgICBpZiAodmFsdWUpIHsKICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlSGlzdG9yeSA9IHNsdWdpZnkoc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5JykpOwoKICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVIaXN0b3J5ID09PSB2YWx1ZSAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHNsaWRlLmluZGV4KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGNvbnN0IHNldEhpc3RvcnlQb3BTdGF0ZSA9ICgpID0+IHsKICAgICAgICAgICAgcGF0aHMgPSBnZXRQYXRoVmFsdWVzKHN3aXBlci5wYXJhbXMudXJsKTsKICAgICAgICAgICAgc2Nyb2xsVG9TbGlkZShzd2lwZXIucGFyYW1zLnNwZWVkLCBwYXRocy52YWx1ZSwgZmFsc2UpOwogICAgICAgIH07CgogICAgICAgIGNvbnN0IGluaXQgPSAoKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpOwogICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeSkgcmV0dXJuOwoKICAgICAgICAgICAgaWYgKCF3aW5kb3cuaGlzdG9yeSB8fCAhd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlOwogICAgICAgICAgICBwYXRocyA9IGdldFBhdGhWYWx1ZXMoc3dpcGVyLnBhcmFtcy51cmwpOwogICAgICAgICAgICBpZiAoIXBhdGhzLmtleSAmJiAhcGF0aHMudmFsdWUpIHJldHVybjsKICAgICAgICAgICAgc2Nyb2xsVG9TbGlkZSgwLCBwYXRocy52YWx1ZSwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpOwoKICAgICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7CiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzZXRIaXN0b3J5UG9wU3RhdGUpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgY29uc3QgZGVzdHJveSA9ICgpID0+IHsKICAgICAgICAgICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7CgogICAgICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHsKICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHNldEhpc3RvcnlQb3BTdGF0ZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvbignaW5pdCcsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSB7CiAgICAgICAgICAgICAgICBpbml0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbignZGVzdHJveScsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSB7CiAgICAgICAgICAgICAgICBkZXN0cm95KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbigndHJhbnNpdGlvbkVuZCBfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZScsICgpID0+IHsKICAgICAgICAgICAgaWYgKGluaXRpYWxpemVkKSB7CiAgICAgICAgICAgICAgICBzZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbignc2xpZGVDaGFuZ2UnLCAoKSA9PiB7CiAgICAgICAgICAgIGlmIChpbml0aWFsaXplZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHsKICAgICAgICAgICAgICAgIHNldEhpc3Rvcnkoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmtleSwgc3dpcGVyLmFjdGl2ZUluZGV4KTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIGZ1bmN0aW9uIEhhc2hOYXZpZ2F0aW9uKF9yZWYpIHsKICAgICAgICBsZXQgewogICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgIGV4dGVuZFBhcmFtcywKICAgICAgICAgICAgZW1pdCwKICAgICAgICAgICAgb24KICAgICAgICB9ID0gX3JlZjsKICAgICAgICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTsKICAgICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7CiAgICAgICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7CiAgICAgICAgZXh0ZW5kUGFyYW1zKHsKICAgICAgICAgICAgaGFzaE5hdmlnYXRpb246IHsKICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSwKICAgICAgICAgICAgICAgIHdhdGNoU3RhdGU6IGZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgY29uc3Qgb25IYXNoQ2hhbmdlID0gKCkgPT4gewogICAgICAgICAgICBlbWl0KCdoYXNoQ2hhbmdlJyk7CiAgICAgICAgICAgIGNvbnN0IG5ld0hhc2ggPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJyk7CiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVNsaWRlSGFzaCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLWhhc2gnKTsKCiAgICAgICAgICAgIGlmIChuZXdIYXNoICE9PSBhY3RpdmVTbGlkZUhhc2gpIHsKICAgICAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1oYXNoPSIke25ld0hhc2h9Il1gKS5pbmRleCgpOwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjsKICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4KTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGNvbnN0IHNldEhhc2ggPSAoKSA9PiB7CiAgICAgICAgICAgIGlmICghaW5pdGlhbGl6ZWQgfHwgIXN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkgcmV0dXJuOwoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlICYmIHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkgewogICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIGAjJHtzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCkuYXR0cignZGF0YS1oYXNoJyl9YCB8fCAnJyk7CiAgICAgICAgICAgICAgICBlbWl0KCdoYXNoU2V0Jyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTsKICAgICAgICAgICAgICAgIGNvbnN0IGhhc2ggPSBzbGlkZS5hdHRyKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhhc2ggPSBoYXNoIHx8ICcnOwogICAgICAgICAgICAgICAgZW1pdCgnaGFzaFNldCcpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgY29uc3QgaW5pdCA9ICgpID0+IHsKICAgICAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgfHwgc3dpcGVyLnBhcmFtcy5oaXN0b3J5ICYmIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSByZXR1cm47CiAgICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTsKICAgICAgICAgICAgY29uc3QgaGFzaCA9IGRvY3VtZW50LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTsKCiAgICAgICAgICAgIGlmIChoYXNoKSB7CiAgICAgICAgICAgICAgICBjb25zdCBzcGVlZCA9IDA7CgogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2xpZGVIYXNoID0gc2xpZGUuYXR0cignZGF0YS1oYXNoJykgfHwgc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5Jyk7CgogICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZUhhc2ggPT09IGhhc2ggJiYgIXNsaWRlLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBzbGlkZS5pbmRleCgpOwogICAgICAgICAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUpIHsKICAgICAgICAgICAgICAgICQod2luZG93KS5vbignaGFzaGNoYW5nZScsIG9uSGFzaENoYW5nZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBjb25zdCBkZXN0cm95ID0gKCkgPT4gewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlKSB7CiAgICAgICAgICAgICAgICAkKHdpbmRvdykub2ZmKCdoYXNoY2hhbmdlJywgb25IYXNoQ2hhbmdlKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9uKCdpbml0JywgKCkgPT4gewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7CiAgICAgICAgICAgICAgICBpbml0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbignZGVzdHJveScsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkgewogICAgICAgICAgICAgICAgZGVzdHJveSgpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgb24oJ3RyYW5zaXRpb25FbmQgX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnLCAoKSA9PiB7CiAgICAgICAgICAgIGlmIChpbml0aWFsaXplZCkgewogICAgICAgICAgICAgICAgc2V0SGFzaCgpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgb24oJ3NsaWRlQ2hhbmdlJywgKCkgPT4gewogICAgICAgICAgICBpZiAoaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7CiAgICAgICAgICAgICAgICBzZXRIYXNoKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCiAgICAvKiBlc2xpbnQgbm8tdW5kZXJzY29yZS1kYW5nbGU6ICJvZmYiICovCiAgICBmdW5jdGlvbiBBdXRvcGxheShfcmVmKSB7CiAgICAgICAgbGV0IHsKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICBleHRlbmRQYXJhbXMsCiAgICAgICAgICAgIG9uLAogICAgICAgICAgICBlbWl0CiAgICAgICAgfSA9IF9yZWY7CiAgICAgICAgbGV0IHRpbWVvdXQ7CiAgICAgICAgc3dpcGVyLmF1dG9wbGF5ID0gewogICAgICAgICAgICBydW5uaW5nOiBmYWxzZSwKICAgICAgICAgICAgcGF1c2VkOiBmYWxzZQogICAgICAgIH07CiAgICAgICAgZXh0ZW5kUGFyYW1zKHsKICAgICAgICAgICAgYXV0b3BsYXk6IHsKICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgZGVsYXk6IDMwMDAsCiAgICAgICAgICAgICAgICB3YWl0Rm9yVHJhbnNpdGlvbjogdHJ1ZSwKICAgICAgICAgICAgICAgIGRpc2FibGVPbkludGVyYWN0aW9uOiB0cnVlLAogICAgICAgICAgICAgICAgc3RvcE9uTGFzdFNsaWRlOiBmYWxzZSwKICAgICAgICAgICAgICAgIHJldmVyc2VEaXJlY3Rpb246IGZhbHNlLAogICAgICAgICAgICAgICAgcGF1c2VPbk1vdXNlRW50ZXI6IGZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgZnVuY3Rpb24gcnVuKCkgewogICAgICAgICAgICBpZiAoIXN3aXBlci5zaXplKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCAkYWN0aXZlU2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTsKICAgICAgICAgICAgbGV0IGRlbGF5ID0gc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTsKCiAgICAgICAgICAgIGlmICgkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpKSB7CiAgICAgICAgICAgICAgICBkZWxheSA9ICRhY3RpdmVTbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLWF1dG9wbGF5JykgfHwgc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpOwogICAgICAgICAgICB0aW1lb3V0ID0gbmV4dFRpY2soKCkgPT4gewogICAgICAgICAgICAgICAgbGV0IGF1dG9wbGF5UmVzdWx0OwoKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnJldmVyc2VEaXJlY3Rpb24pIHsKICAgICAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlUHJldihzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgZW1pdCgnYXV0b3BsYXknKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIuaXNCZWdpbm5pbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXlSZXN1bHQgPSBzd2lwZXIuc2xpZGVQcmV2KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICBlbWl0KCdhdXRvcGxheScpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCBzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgZW1pdCgnYXV0b3BsYXknKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBzdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpOwogICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlTmV4dChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICBlbWl0KCdhdXRvcGxheScpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLmlzRW5kKSB7CiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXlSZXN1bHQgPSBzd2lwZXIuc2xpZGVOZXh0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZSkgewogICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5UmVzdWx0ID0gc3dpcGVyLnNsaWRlVG8oMCwgc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgZW1pdCgnYXV0b3BsYXknKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgc3RvcCgpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJ1bigpOyBlbHNlIGlmIChhdXRvcGxheVJlc3VsdCA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICBydW4oKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgZGVsYXkpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc3RhcnQoKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgdGltZW91dCAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nID0gdHJ1ZTsKICAgICAgICAgICAgZW1pdCgnYXV0b3BsYXlTdGFydCcpOwogICAgICAgICAgICBydW4oKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzdG9wKCkgewogICAgICAgICAgICBpZiAoIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGlmICh0eXBlb2YgdGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTsKCiAgICAgICAgICAgIGlmICh0aW1lb3V0KSB7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7CiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gdW5kZWZpbmVkOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IGZhbHNlOwogICAgICAgICAgICBlbWl0KCdhdXRvcGxheVN0b3AnKTsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBwYXVzZShzcGVlZCkgewogICAgICAgICAgICBpZiAoIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47CiAgICAgICAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSByZXR1cm47CiAgICAgICAgICAgIGlmICh0aW1lb3V0KSBjbGVhclRpbWVvdXQodGltZW91dCk7CiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSB0cnVlOwoKICAgICAgICAgICAgaWYgKHNwZWVkID09PSAwIHx8ICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LndhaXRGb3JUcmFuc2l0aW9uKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7CiAgICAgICAgICAgICAgICBydW4oKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIFsndHJhbnNpdGlvbmVuZCcsICd3ZWJraXRUcmFuc2l0aW9uRW5kJ10uZm9yRWFjaChldmVudCA9PiB7CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25UcmFuc2l0aW9uRW5kKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBvblZpc2liaWxpdHlDaGFuZ2UoKSB7CiAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTsKCiAgICAgICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7CiAgICAgICAgICAgICAgICBwYXVzZSgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAndmlzaWJsZScgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkgewogICAgICAgICAgICAgICAgcnVuKCk7CiAgICAgICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChlKSB7CiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci4kd3JhcHBlckVsKSByZXR1cm47CiAgICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gc3dpcGVyLiR3cmFwcGVyRWxbMF0pIHJldHVybjsKICAgICAgICAgICAgWyd0cmFuc2l0aW9uZW5kJywgJ3dlYmtpdFRyYW5zaXRpb25FbmQnXS5mb3JFYWNoKGV2ZW50ID0+IHsKICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uVHJhbnNpdGlvbkVuZCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7CgogICAgICAgICAgICBpZiAoIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7CiAgICAgICAgICAgICAgICBzdG9wKCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBydW4oKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gb25Nb3VzZUVudGVyKCkgewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikgewogICAgICAgICAgICAgICAgc3RvcCgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZW1pdCgnYXV0b3BsYXlQYXVzZScpOwogICAgICAgICAgICAgICAgcGF1c2UoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgWyd0cmFuc2l0aW9uZW5kJywgJ3dlYmtpdFRyYW5zaXRpb25FbmQnXS5mb3JFYWNoKGV2ZW50ID0+IHsKICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uVHJhbnNpdGlvbkVuZCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gb25Nb3VzZUxlYXZlKCkgewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikgewogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7CiAgICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5UmVzdW1lJyk7CiAgICAgICAgICAgIHJ1bigpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYXR0YWNoTW91c2VFdmVudHMoKSB7CiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnBhdXNlT25Nb3VzZUVudGVyKSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuJGVsLm9uKCdtb3VzZWVudGVyJywgb25Nb3VzZUVudGVyKTsKICAgICAgICAgICAgICAgIHN3aXBlci4kZWwub24oJ21vdXNlbGVhdmUnLCBvbk1vdXNlTGVhdmUpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBkZXRhY2hNb3VzZUV2ZW50cygpIHsKICAgICAgICAgICAgc3dpcGVyLiRlbC5vZmYoJ21vdXNlZW50ZXInLCBvbk1vdXNlRW50ZXIpOwogICAgICAgICAgICBzd2lwZXIuJGVsLm9mZignbW91c2VsZWF2ZScsIG9uTW91c2VMZWF2ZSk7CiAgICAgICAgfQoKICAgICAgICBvbignaW5pdCcsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCkgewogICAgICAgICAgICAgICAgc3RhcnQoKTsKICAgICAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpOwogICAgICAgICAgICAgICAgYXR0YWNoTW91c2VFdmVudHMoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIG9uKCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCAoX3MsIHNwZWVkLCBpbnRlcm5hbCkgPT4gewogICAgICAgICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHsKICAgICAgICAgICAgICAgIGlmIChpbnRlcm5hbCB8fCAhc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikgewogICAgICAgICAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZShzcGVlZCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHN0b3AoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIG9uKCdzbGlkZXJGaXJzdE1vdmUnLCAoKSA9PiB7CiAgICAgICAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykgewogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHsKICAgICAgICAgICAgICAgICAgICBzdG9wKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHBhdXNlKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbigndG91Y2hFbmQnLCAoKSA9PiB7CiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCAmJiAhc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikgewogICAgICAgICAgICAgICAgcnVuKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvbignZGVzdHJveScsICgpID0+IHsKICAgICAgICAgICAgZGV0YWNoTW91c2VFdmVudHMoKTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykgewogICAgICAgICAgICAgICAgc3RvcCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7CiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpOwogICAgICAgIH0pOwogICAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLmF1dG9wbGF5LCB7CiAgICAgICAgICAgIHBhdXNlLAogICAgICAgICAgICBydW4sCiAgICAgICAgICAgIHN0YXJ0LAogICAgICAgICAgICBzdG9wCiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gVGh1bWIoX3JlZikgewogICAgICAgIGxldCB7CiAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgZXh0ZW5kUGFyYW1zLAogICAgICAgICAgICBvbgogICAgICAgIH0gPSBfcmVmOwogICAgICAgIGV4dGVuZFBhcmFtcyh7CiAgICAgICAgICAgIHRodW1iczogewogICAgICAgICAgICAgICAgc3dpcGVyOiBudWxsLAogICAgICAgICAgICAgICAgbXVsdGlwbGVBY3RpdmVUaHVtYnM6IHRydWUsCiAgICAgICAgICAgICAgICBhdXRvU2Nyb2xsT2Zmc2V0OiAwLAogICAgICAgICAgICAgICAgc2xpZGVUaHVtYkFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXRodW1iLWFjdGl2ZScsCiAgICAgICAgICAgICAgICB0aHVtYnNDb250YWluZXJDbGFzczogJ3N3aXBlci10aHVtYnMnCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTsKICAgICAgICBsZXQgc3dpcGVyQ3JlYXRlZCA9IGZhbHNlOwogICAgICAgIHN3aXBlci50aHVtYnMgPSB7CiAgICAgICAgICAgIHN3aXBlcjogbnVsbAogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIG9uVGh1bWJDbGljaygpIHsKICAgICAgICAgICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7CiAgICAgICAgICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjsKICAgICAgICAgICAgY29uc3QgY2xpY2tlZEluZGV4ID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRJbmRleDsKICAgICAgICAgICAgY29uc3QgY2xpY2tlZFNsaWRlID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRTbGlkZTsKICAgICAgICAgICAgaWYgKGNsaWNrZWRTbGlkZSAmJiAkKGNsaWNrZWRTbGlkZSkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzKSkgcmV0dXJuOwogICAgICAgICAgICBpZiAodHlwZW9mIGNsaWNrZWRJbmRleCA9PT0gJ3VuZGVmaW5lZCcgfHwgY2xpY2tlZEluZGV4ID09PSBudWxsKSByZXR1cm47CiAgICAgICAgICAgIGxldCBzbGlkZVRvSW5kZXg7CgogICAgICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7CiAgICAgICAgICAgICAgICBzbGlkZVRvSW5kZXggPSBwYXJzZUludCgkKHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNsaWRlVG9JbmRleCA9IGNsaWNrZWRJbmRleDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgewogICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDsKCiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKCiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDsKICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29uc3QgcHJldkluZGV4ID0gc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLnByZXZBbGwoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD0iJHtzbGlkZVRvSW5kZXh9Il1gKS5lcSgwKS5pbmRleCgpOwogICAgICAgICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLm5leHRBbGwoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD0iJHtzbGlkZVRvSW5kZXh9Il1gKS5lcSgwKS5pbmRleCgpOwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcmV2SW5kZXggPT09ICd1bmRlZmluZWQnKSBzbGlkZVRvSW5kZXggPSBuZXh0SW5kZXg7IGVsc2UgaWYgKHR5cGVvZiBuZXh0SW5kZXggPT09ICd1bmRlZmluZWQnKSBzbGlkZVRvSW5kZXggPSBwcmV2SW5kZXg7IGVsc2UgaWYgKG5leHRJbmRleCAtIGN1cnJlbnRJbmRleCA8IGN1cnJlbnRJbmRleCAtIHByZXZJbmRleCkgc2xpZGVUb0luZGV4ID0gbmV4dEluZGV4OyBlbHNlIHNsaWRlVG9JbmRleCA9IHByZXZJbmRleDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgIHRodW1iczogdGh1bWJzUGFyYW1zCiAgICAgICAgICAgIH0gPSBzd2lwZXIucGFyYW1zOwogICAgICAgICAgICBpZiAoaW5pdGlhbGl6ZWQpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlOwogICAgICAgICAgICBjb25zdCBTd2lwZXJDbGFzcyA9IHN3aXBlci5jb25zdHJ1Y3RvcjsKCiAgICAgICAgICAgIGlmICh0aHVtYnNQYXJhbXMuc3dpcGVyIGluc3RhbmNlb2YgU3dpcGVyQ2xhc3MpIHsKICAgICAgICAgICAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gdGh1bWJzUGFyYW1zLnN3aXBlcjsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnRodW1icy5zd2lwZXIub3JpZ2luYWxQYXJhbXMsIHsKICAgICAgICAgICAgICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnRodW1icy5zd2lwZXIucGFyYW1zLCB7CiAgICAgICAgICAgICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodGh1bWJzUGFyYW1zLnN3aXBlcikpIHsKICAgICAgICAgICAgICAgIGNvbnN0IHRodW1ic1N3aXBlclBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIHRodW1ic1BhcmFtcy5zd2lwZXIpOwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aHVtYnNTd2lwZXJQYXJhbXMsIHsKICAgICAgICAgICAgICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gbmV3IFN3aXBlckNsYXNzKHRodW1ic1N3aXBlclBhcmFtcyk7CiAgICAgICAgICAgICAgICBzd2lwZXJDcmVhdGVkID0gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIuJGVsLmFkZENsYXNzKHN3aXBlci5wYXJhbXMudGh1bWJzLnRodW1ic0NvbnRhaW5lckNsYXNzKTsKICAgICAgICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIub24oJ3RhcCcsIG9uVGh1bWJDbGljayk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdXBkYXRlKGluaXRpYWwpIHsKICAgICAgICAgICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7CiAgICAgICAgICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjsKICAgICAgICAgICAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gdGh1bWJzU3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7IC8vIEFjdGl2YXRlIHRodW1icwoKICAgICAgICAgICAgbGV0IHRodW1ic1RvQWN0aXZhdGUgPSAxOwogICAgICAgICAgICBjb25zdCB0aHVtYkFjdGl2ZUNsYXNzID0gc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzOwoKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHsKICAgICAgICAgICAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy50aHVtYnMubXVsdGlwbGVBY3RpdmVUaHVtYnMpIHsKICAgICAgICAgICAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSAxOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aHVtYnNUb0FjdGl2YXRlID0gTWF0aC5mbG9vcih0aHVtYnNUb0FjdGl2YXRlKTsKICAgICAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5yZW1vdmVDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTsKCiAgICAgICAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3AgfHwgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHRodW1ic1N3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7CiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRodW1ic1RvQWN0aXZhdGU7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgICAgIHRodW1ic1N3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9IiR7c3dpcGVyLnJlYWxJbmRleCArIGl9Il1gKS5hZGRDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGh1bWJzVG9BY3RpdmF0ZTsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShzd2lwZXIucmVhbEluZGV4ICsgaSkuYWRkQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IGF1dG9TY3JvbGxPZmZzZXQgPSBzd2lwZXIucGFyYW1zLnRodW1icy5hdXRvU2Nyb2xsT2Zmc2V0OwogICAgICAgICAgICBjb25zdCB1c2VPZmZzZXQgPSBhdXRvU2Nyb2xsT2Zmc2V0ICYmICF0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3A7CgogICAgICAgICAgICBpZiAoc3dpcGVyLnJlYWxJbmRleCAhPT0gdGh1bWJzU3dpcGVyLnJlYWxJbmRleCB8fCB1c2VPZmZzZXQpIHsKICAgICAgICAgICAgICAgIGxldCBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7CiAgICAgICAgICAgICAgICBsZXQgbmV3VGh1bWJzSW5kZXg7CiAgICAgICAgICAgICAgICBsZXQgZGlyZWN0aW9uOwoKICAgICAgICAgICAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3ApIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLmhhc0NsYXNzKHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGh1bWJzU3dpcGVyLmxvb3BGaXgoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCgogICAgICAgICAgICAgICAgICAgICAgICB0aHVtYnNTd2lwZXIuX2NsaWVudExlZnQgPSB0aHVtYnNTd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0OwogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7CiAgICAgICAgICAgICAgICAgICAgfSAvLyBGaW5kIGFjdHVhbCB0aHVtYnMgaW5kZXggdG8gc2xpZGUgdG8KCgogICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5zbGlkZXMuZXEoY3VycmVudFRodW1ic0luZGV4KS5wcmV2QWxsKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9IiR7c3dpcGVyLnJlYWxJbmRleH0iXWApLmVxKDApLmluZGV4KCk7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLm5leHRBbGwoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD0iJHtzd2lwZXIucmVhbEluZGV4fSJdYCkuZXEoMCkuaW5kZXgoKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcmV2VGh1bWJzSW5kZXggPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV4dFRodW1ic0luZGV4OwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5leHRUaHVtYnNJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBwcmV2VGh1bWJzSW5kZXg7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuZXh0VGh1bWJzSW5kZXggLSBjdXJyZW50VGh1bWJzSW5kZXggPT09IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxID8gbmV4dFRodW1ic0luZGV4IDogY3VycmVudFRodW1ic0luZGV4OwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmV4dFRodW1ic0luZGV4IC0gY3VycmVudFRodW1ic0luZGV4IDwgY3VycmVudFRodW1ic0luZGV4IC0gcHJldlRodW1ic0luZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV4dFRodW1ic0luZGV4OwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gcHJldlRodW1ic0luZGV4OwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gc3dpcGVyLmFjdGl2ZUluZGV4ID4gc3dpcGVyLnByZXZpb3VzSW5kZXggPyAnbmV4dCcgOiAncHJldic7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gc3dpcGVyLnJlYWxJbmRleDsKICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBuZXdUaHVtYnNJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICh1c2VPZmZzZXQpIHsKICAgICAgICAgICAgICAgICAgICBuZXdUaHVtYnNJbmRleCArPSBkaXJlY3Rpb24gPT09ICduZXh0JyA/IGF1dG9TY3JvbGxPZmZzZXQgOiAtMSAqIGF1dG9TY3JvbGxPZmZzZXQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHRodW1ic1N3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyAmJiB0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMuaW5kZXhPZihuZXdUaHVtYnNJbmRleCkgPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1RodW1ic0luZGV4ID4gY3VycmVudFRodW1ic0luZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyAxOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCArIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpIC0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXggJiYgdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSk7CgogICAgICAgICAgICAgICAgICAgIHRodW1ic1N3aXBlci5zbGlkZVRvKG5ld1RodW1ic0luZGV4LCBpbml0aWFsID8gMCA6IHVuZGVmaW5lZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIG9uKCdiZWZvcmVJbml0JywgKCkgPT4gewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICB0aHVtYnMKICAgICAgICAgICAgfSA9IHN3aXBlci5wYXJhbXM7CiAgICAgICAgICAgIGlmICghdGh1bWJzIHx8ICF0aHVtYnMuc3dpcGVyKSByZXR1cm47CiAgICAgICAgICAgIGluaXQoKTsKICAgICAgICAgICAgdXBkYXRlKHRydWUpOwogICAgICAgIH0pOwogICAgICAgIG9uKCdzbGlkZUNoYW5nZSB1cGRhdGUgcmVzaXplIG9ic2VydmVyVXBkYXRlJywgKCkgPT4gewogICAgICAgICAgICB1cGRhdGUoKTsKICAgICAgICB9KTsKICAgICAgICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24pID0+IHsKICAgICAgICAgICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7CiAgICAgICAgICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjsKICAgICAgICAgICAgdGh1bWJzU3dpcGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24pOwogICAgICAgIH0pOwogICAgICAgIG9uKCdiZWZvcmVEZXN0cm95JywgKCkgPT4gewogICAgICAgICAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjsKICAgICAgICAgICAgaWYgKCF0aHVtYnNTd2lwZXIgfHwgdGh1bWJzU3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuOwoKICAgICAgICAgICAgaWYgKHN3aXBlckNyZWF0ZWQpIHsKICAgICAgICAgICAgICAgIHRodW1ic1N3aXBlci5kZXN0cm95KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBPYmplY3QuYXNzaWduKHN3aXBlci50aHVtYnMsIHsKICAgICAgICAgICAgaW5pdCwKICAgICAgICAgICAgdXBkYXRlCiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gZnJlZU1vZGUoX3JlZikgewogICAgICAgIGxldCB7CiAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgZXh0ZW5kUGFyYW1zLAogICAgICAgICAgICBlbWl0LAogICAgICAgICAgICBvbmNlCiAgICAgICAgfSA9IF9yZWY7CiAgICAgICAgZXh0ZW5kUGFyYW1zKHsKICAgICAgICAgICAgZnJlZU1vZGU6IHsKICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgbW9tZW50dW06IHRydWUsCiAgICAgICAgICAgICAgICBtb21lbnR1bVJhdGlvOiAxLAogICAgICAgICAgICAgICAgbW9tZW50dW1Cb3VuY2U6IHRydWUsCiAgICAgICAgICAgICAgICBtb21lbnR1bUJvdW5jZVJhdGlvOiAxLAogICAgICAgICAgICAgICAgbW9tZW50dW1WZWxvY2l0eVJhdGlvOiAxLAogICAgICAgICAgICAgICAgc3RpY2t5OiBmYWxzZSwKICAgICAgICAgICAgICAgIG1pbmltdW1WZWxvY2l0eTogMC4wMgogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIGZ1bmN0aW9uIG9uVG91Y2hTdGFydCgpIHsKICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpOwogICAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7CiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApOwogICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMDsKICAgICAgICAgICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hFbmQoewogICAgICAgICAgICAgICAgY3VycmVudFBvczogc3dpcGVyLnJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKCkgewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICB0b3VjaEV2ZW50c0RhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICB0b3VjaGVzCiAgICAgICAgICAgIH0gPSBzd2lwZXI7IC8vIFZlbG9jaXR5CgogICAgICAgICAgICBpZiAoZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgZGF0YS52ZWxvY2l0aWVzLnB1c2goewogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzdGFydFgnIDogJ3N0YXJ0WSddLAogICAgICAgICAgICAgICAgICAgIHRpbWU6IGRhdGEudG91Y2hTdGFydFRpbWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7CiAgICAgICAgICAgICAgICBwb3NpdGlvbjogdG91Y2hlc1tzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnY3VycmVudFgnIDogJ2N1cnJlbnRZJ10sCiAgICAgICAgICAgICAgICB0aW1lOiBub3coKQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG9uVG91Y2hFbmQoX3JlZjIpIHsKICAgICAgICAgICAgbGV0IHsKICAgICAgICAgICAgICAgIGN1cnJlbnRQb3MKICAgICAgICAgICAgfSA9IF9yZWYyOwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBwYXJhbXMsCiAgICAgICAgICAgICAgICAkd3JhcHBlckVsLAogICAgICAgICAgICAgICAgcnRsVHJhbnNsYXRlOiBydGwsCiAgICAgICAgICAgICAgICBzbmFwR3JpZCwKICAgICAgICAgICAgICAgIHRvdWNoRXZlbnRzRGF0YTogZGF0YQogICAgICAgICAgICB9ID0gc3dpcGVyOyAvLyBUaW1lIGRpZmYKCiAgICAgICAgICAgIGNvbnN0IHRvdWNoRW5kVGltZSA9IG5vdygpOwogICAgICAgICAgICBjb25zdCB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7CgogICAgICAgICAgICBpZiAoY3VycmVudFBvcyA8IC1zd2lwZXIubWluVHJhbnNsYXRlKCkpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChjdXJyZW50UG9zID4gLXN3aXBlci5tYXhUcmFuc2xhdGUoKSkgewogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5zbGlkZXMubGVuZ3RoIDwgc25hcEdyaWQubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc25hcEdyaWQubGVuZ3RoIC0gMSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtKSB7CiAgICAgICAgICAgICAgICBpZiAoZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA+IDEpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0TW92ZUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IHZlbG9jaXR5RXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBsYXN0TW92ZUV2ZW50LnBvc2l0aW9uIC0gdmVsb2NpdHlFdmVudC5wb3NpdGlvbjsKICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lID0gbGFzdE1vdmVFdmVudC50aW1lIC0gdmVsb2NpdHlFdmVudC50aW1lOwogICAgICAgICAgICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IGRpc3RhbmNlIC8gdGltZTsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgLz0gMjsKCiAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgPCBwYXJhbXMuZnJlZU1vZGUubWluaW11bVZlbG9jaXR5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7CiAgICAgICAgICAgICAgICAgICAgfSAvLyB0aGlzIGltcGxpZXMgdGhhdCB0aGUgdXNlciBzdG9wcGVkIG1vdmluZyBhIGZpbmdlciB0aGVuIHJlbGVhc2VkLgogICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIHdvdWxkIGJlIG5vIGV2ZW50cyB3aXRoIGRpc3RhbmNlIHplcm8sIHNvIHRoZSBsYXN0IGV2ZW50IGlzIHN0YWxlLgoKCiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWUgPiAxNTAgfHwgbm93KCkgLSBsYXN0TW92ZUV2ZW50LnRpbWUgPiAzMDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ICo9IHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bVZlbG9jaXR5UmF0aW87CiAgICAgICAgICAgICAgICBkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMDsKICAgICAgICAgICAgICAgIGxldCBtb21lbnR1bUR1cmF0aW9uID0gMTAwMCAqIHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bVJhdGlvOwogICAgICAgICAgICAgICAgY29uc3QgbW9tZW50dW1EaXN0YW5jZSA9IHN3aXBlci52ZWxvY2l0eSAqIG1vbWVudHVtRHVyYXRpb247CiAgICAgICAgICAgICAgICBsZXQgbmV3UG9zaXRpb24gPSBzd2lwZXIudHJhbnNsYXRlICsgbW9tZW50dW1EaXN0YW5jZTsKICAgICAgICAgICAgICAgIGlmIChydGwpIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uOwogICAgICAgICAgICAgICAgbGV0IGRvQm91bmNlID0gZmFsc2U7CiAgICAgICAgICAgICAgICBsZXQgYWZ0ZXJCb3VuY2VQb3NpdGlvbjsKICAgICAgICAgICAgICAgIGNvbnN0IGJvdW5jZUFtb3VudCA9IE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgKiAyMCAqIHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bUJvdW5jZVJhdGlvOwogICAgICAgICAgICAgICAgbGV0IG5lZWRzTG9vcEZpeDsKCiAgICAgICAgICAgICAgICBpZiAobmV3UG9zaXRpb24gPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtQm91bmNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiArIHN3aXBlci5tYXhUcmFuc2xhdGUoKSA8IC1ib3VuY2VBbW91bnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50OwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBkb0JvdW5jZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuZXdQb3NpdGlvbiA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkgewogICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGUubW9tZW50dW1Cb3VuY2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpID4gYm91bmNlQW1vdW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArIGJvdW5jZUFtb3VudDsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlLnN0aWNreSkgewogICAgICAgICAgICAgICAgICAgIGxldCBuZXh0U2xpZGU7CgogICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc25hcEdyaWQubGVuZ3RoOyBqICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNuYXBHcmlkW2pdID4gLW5ld1Bvc2l0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0U2xpZGUgPSBqOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGVdIC0gbmV3UG9zaXRpb24pIDwgTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlIC0gMV0gLSBuZXdQb3NpdGlvbikgfHwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGVdOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlIC0gMV07CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAobmVlZHNMb29wRml4KSB7CiAgICAgICAgICAgICAgICAgICAgb25jZSgndHJhbnNpdGlvbkVuZCcsICgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gLy8gRml4IGR1cmF0aW9uCgoKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIudmVsb2NpdHkgIT09IDApIHsKICAgICAgICAgICAgICAgICAgICBpZiAocnRsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygoLW5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygobmV3UG9zaXRpb24gLSBzd2lwZXIudHJhbnNsYXRlKSAvIHN3aXBlci52ZWxvY2l0eSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlLnN0aWNreSkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBmcmVlTW9kZS5zdGlja3kgaXMgYWN0aXZlIGFuZCB0aGUgdXNlciBlbmRzIGEgc3dpcGUgd2l0aCBhIHNsb3ctdmVsb2NpdHkKICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnQsIHRoZW4gZHVyYXRpb25zIGNhbiBiZSAyMCsgc2Vjb25kcyB0byBzbGlkZSBvbmUgKG9yIHplcm8hKSBzbGlkZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0J3MgZWFzeSB0byBzZWUgdGhpcyB3aGVuIHNpbXVsYXRpbmcgdG91Y2ggd2l0aCBtb3VzZSBldmVudHMuIFRvIGZpeCB0aGlzLAogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW1pdCBzaW5nbGUtc2xpZGUgc3dpcGVzIHRvIHRoZSBkZWZhdWx0IHNsaWRlIGR1cmF0aW9uLiBUaGlzIGFsc28gaGFzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAvLyBuaWNlIHNpZGUgZWZmZWN0IG9mIG1hdGNoaW5nIHNsaWRlIHNwZWVkIGlmIHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGJlZm9yZQogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaWZ0aW5nIGZpbmdlciBvciBtb3VzZSB2cy4gbW92aW5nIHNsb3dseSBiZWZvcmUgbGlmdGluZyB0aGUgZmluZ2VyL21vdXNlLgogICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgZmFzdGVyIHN3aXBlcywgYWxzbyBhcHBseSBsaW1pdHMgKGFsYmVpdCBoaWdoZXIgb25lcykuCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vdmVEaXN0YW5jZSA9IE1hdGguYWJzKChydGwgPyAtbmV3UG9zaXRpb24gOiBuZXdQb3NpdGlvbikgLSBzd2lwZXIudHJhbnNsYXRlKTsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFNsaWRlU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLmFjdGl2ZUluZGV4XTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb3ZlRGlzdGFuY2UgPCBjdXJyZW50U2xpZGVTaXplKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vdmVEaXN0YW5jZSA8IDIgKiBjdXJyZW50U2xpZGVTaXplKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkICogMS41OwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZCAqIDIuNTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlLnN0aWNreSkgewogICAgICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtQm91bmNlICYmIGRvQm91bmNlKSB7CiAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGFmdGVyQm91bmNlUG9zaXRpb24pOwogICAgICAgICAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pOwogICAgICAgICAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pOwogICAgICAgICAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UpIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgZW1pdCgnbW9tZW50dW1Cb3VuY2UnKTsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24ocGFyYW1zLnNwZWVkKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKGFmdGVyQm91bmNlUG9zaXRpb24pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnZlbG9jaXR5KSB7CiAgICAgICAgICAgICAgICAgICAgZW1pdCgnX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnKTsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pOwogICAgICAgICAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pOwogICAgICAgICAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pOwogICAgICAgICAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpOwogICAgICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGUuc3RpY2t5KSB7CiAgICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGUpIHsKICAgICAgICAgICAgICAgIGVtaXQoJ19mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghcGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtIHx8IHRpbWVEaWZmID49IHBhcmFtcy5sb25nU3dpcGVzTXMpIHsKICAgICAgICAgICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpOwogICAgICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7CiAgICAgICAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBPYmplY3QuYXNzaWduKHN3aXBlciwgewogICAgICAgICAgICBmcmVlTW9kZTogewogICAgICAgICAgICAgICAgb25Ub3VjaFN0YXJ0LAogICAgICAgICAgICAgICAgb25Ub3VjaE1vdmUsCiAgICAgICAgICAgICAgICBvblRvdWNoRW5kCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBHcmlkKF9yZWYpIHsKICAgICAgICBsZXQgewogICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgIGV4dGVuZFBhcmFtcwogICAgICAgIH0gPSBfcmVmOwogICAgICAgIGV4dGVuZFBhcmFtcyh7CiAgICAgICAgICAgIGdyaWQ6IHsKICAgICAgICAgICAgICAgIHJvd3M6IDEsCiAgICAgICAgICAgICAgICBmaWxsOiAnY29sdW1uJwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgbGV0IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7CiAgICAgICAgbGV0IHNsaWRlc1BlclJvdzsKICAgICAgICBsZXQgbnVtRnVsbENvbHVtbnM7CgogICAgICAgIGNvbnN0IGluaXRTbGlkZXMgPSBzbGlkZXNMZW5ndGggPT4gewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3CiAgICAgICAgICAgIH0gPSBzd2lwZXIucGFyYW1zOwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICByb3dzLAogICAgICAgICAgICAgICAgZmlsbAogICAgICAgICAgICB9ID0gc3dpcGVyLnBhcmFtcy5ncmlkOwogICAgICAgICAgICBzbGlkZXNQZXJSb3cgPSBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIC8gcm93czsKICAgICAgICAgICAgbnVtRnVsbENvbHVtbnMgPSBNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHJvd3MpOwoKICAgICAgICAgICAgaWYgKE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcm93cykgPT09IHNsaWRlc0xlbmd0aCAvIHJvd3MpIHsKICAgICAgICAgICAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBzbGlkZXNMZW5ndGg7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHJvd3MpICogcm93czsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBmaWxsID09PSAncm93JykgewogICAgICAgICAgICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGgubWF4KHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MsIHNsaWRlc1BlclZpZXcgKiByb3dzKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGNvbnN0IHVwZGF0ZVNsaWRlID0gKGksIHNsaWRlLCBzbGlkZXNMZW5ndGgsIGdldERpcmVjdGlvbkxhYmVsKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgIHNsaWRlc1Blckdyb3VwLAogICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuCiAgICAgICAgICAgIH0gPSBzd2lwZXIucGFyYW1zOwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICByb3dzLAogICAgICAgICAgICAgICAgZmlsbAogICAgICAgICAgICB9ID0gc3dpcGVyLnBhcmFtcy5ncmlkOyAvLyBTZXQgc2xpZGVzIG9yZGVyCgogICAgICAgICAgICBsZXQgbmV3U2xpZGVPcmRlckluZGV4OwogICAgICAgICAgICBsZXQgY29sdW1uOwogICAgICAgICAgICBsZXQgcm93OwoKICAgICAgICAgICAgaWYgKGZpbGwgPT09ICdyb3cnICYmIHNsaWRlc1Blckdyb3VwID4gMSkgewogICAgICAgICAgICAgICAgY29uc3QgZ3JvdXBJbmRleCA9IE1hdGguZmxvb3IoaSAvIChzbGlkZXNQZXJHcm91cCAqIHJvd3MpKTsKICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlSW5kZXhJbkdyb3VwID0gaSAtIHJvd3MgKiBzbGlkZXNQZXJHcm91cCAqIGdyb3VwSW5kZXg7CiAgICAgICAgICAgICAgICBjb25zdCBjb2x1bW5zSW5Hcm91cCA9IGdyb3VwSW5kZXggPT09IDAgPyBzbGlkZXNQZXJHcm91cCA6IE1hdGgubWluKE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gZ3JvdXBJbmRleCAqIHJvd3MgKiBzbGlkZXNQZXJHcm91cCkgLyByb3dzKSwgc2xpZGVzUGVyR3JvdXApOwogICAgICAgICAgICAgICAgcm93ID0gTWF0aC5mbG9vcihzbGlkZUluZGV4SW5Hcm91cCAvIGNvbHVtbnNJbkdyb3VwKTsKICAgICAgICAgICAgICAgIGNvbHVtbiA9IHNsaWRlSW5kZXhJbkdyb3VwIC0gcm93ICogY29sdW1uc0luR3JvdXAgKyBncm91cEluZGV4ICogc2xpZGVzUGVyR3JvdXA7CiAgICAgICAgICAgICAgICBuZXdTbGlkZU9yZGVySW5kZXggPSBjb2x1bW4gKyByb3cgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIC8gcm93czsKICAgICAgICAgICAgICAgIHNsaWRlLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgJy13ZWJraXQtb3JkZXInOiBuZXdTbGlkZU9yZGVySW5kZXgsCiAgICAgICAgICAgICAgICAgICAgb3JkZXI6IG5ld1NsaWRlT3JkZXJJbmRleAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZmlsbCA9PT0gJ2NvbHVtbicpIHsKICAgICAgICAgICAgICAgIGNvbHVtbiA9IE1hdGguZmxvb3IoaSAvIHJvd3MpOwogICAgICAgICAgICAgICAgcm93ID0gaSAtIGNvbHVtbiAqIHJvd3M7CgogICAgICAgICAgICAgICAgaWYgKGNvbHVtbiA+IG51bUZ1bGxDb2x1bW5zIHx8IGNvbHVtbiA9PT0gbnVtRnVsbENvbHVtbnMgJiYgcm93ID09PSByb3dzIC0gMSkgewogICAgICAgICAgICAgICAgICAgIHJvdyArPSAxOwoKICAgICAgICAgICAgICAgICAgICBpZiAocm93ID49IHJvd3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcm93ID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uICs9IDE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcm93ID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyUm93KTsKICAgICAgICAgICAgICAgIGNvbHVtbiA9IGkgLSByb3cgKiBzbGlkZXNQZXJSb3c7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNsaWRlLmNzcyhnZXREaXJlY3Rpb25MYWJlbCgnbWFyZ2luLXRvcCcpLCByb3cgIT09IDAgPyBzcGFjZUJldHdlZW4gJiYgYCR7c3BhY2VCZXR3ZWVufXB4YCA6ICcnKTsKICAgICAgICB9OwoKICAgICAgICBjb25zdCB1cGRhdGVXcmFwcGVyU2l6ZSA9IChzbGlkZVNpemUsIHNuYXBHcmlkLCBnZXREaXJlY3Rpb25MYWJlbCkgPT4gewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW4sCiAgICAgICAgICAgICAgICBjZW50ZXJlZFNsaWRlcywKICAgICAgICAgICAgICAgIHJvdW5kTGVuZ3RocwogICAgICAgICAgICB9ID0gc3dpcGVyLnBhcmFtczsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgcm93cwogICAgICAgICAgICB9ID0gc3dpcGVyLnBhcmFtcy5ncmlkOwogICAgICAgICAgICBzd2lwZXIudmlydHVhbFNpemUgPSAoc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuKSAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7CiAgICAgICAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGguY2VpbChzd2lwZXIudmlydHVhbFNpemUgLyByb3dzKSAtIHNwYWNlQmV0d2VlbjsKICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKHsKICAgICAgICAgICAgICAgIFtnZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV06IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGAKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHsKICAgICAgICAgICAgICAgIHNuYXBHcmlkLnNwbGljZSgwLCBzbmFwR3JpZC5sZW5ndGgpOwogICAgICAgICAgICAgICAgY29uc3QgbmV3U2xpZGVzR3JpZCA9IFtdOwoKICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTsKICAgICAgICAgICAgICAgICAgICBpZiAocm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pOwogICAgICAgICAgICAgICAgICAgIGlmIChzbmFwR3JpZFtpXSA8IHN3aXBlci52aXJ0dWFsU2l6ZSArIHNuYXBHcmlkWzBdKSBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHNuYXBHcmlkLnB1c2goLi4ubmV3U2xpZGVzR3JpZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBzd2lwZXIuZ3JpZCA9IHsKICAgICAgICAgICAgaW5pdFNsaWRlcywKICAgICAgICAgICAgdXBkYXRlU2xpZGUsCiAgICAgICAgICAgIHVwZGF0ZVdyYXBwZXJTaXplCiAgICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBhcHBlbmRTbGlkZShzbGlkZXMpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgJHdyYXBwZXJFbCwKICAgICAgICAgICAgcGFyYW1zCiAgICAgICAgfSA9IHN3aXBlcjsKCiAgICAgICAgaWYgKHBhcmFtcy5sb29wKSB7CiAgICAgICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykgewogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW2ldKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlcyk7CiAgICAgICAgfQoKICAgICAgICBpZiAocGFyYW1zLmxvb3ApIHsKICAgICAgICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTsKICAgICAgICB9CgogICAgICAgIGlmICghcGFyYW1zLm9ic2VydmVyKSB7CiAgICAgICAgICAgIHN3aXBlci51cGRhdGUoKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcHJlcGVuZFNsaWRlKHNsaWRlcykgewogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgewogICAgICAgICAgICBwYXJhbXMsCiAgICAgICAgICAgICR3cmFwcGVyRWwsCiAgICAgICAgICAgIGFjdGl2ZUluZGV4CiAgICAgICAgfSA9IHN3aXBlcjsKCiAgICAgICAgaWYgKHBhcmFtcy5sb29wKSB7CiAgICAgICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpOwogICAgICAgIH0KCiAgICAgICAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxOwoKICAgICAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7CiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICBpZiAoc2xpZGVzW2ldKSAkd3JhcHBlckVsLnByZXBlbmQoc2xpZGVzW2ldKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIHNsaWRlcy5sZW5ndGg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlcyk7CiAgICAgICAgfQoKICAgICAgICBpZiAocGFyYW1zLmxvb3ApIHsKICAgICAgICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTsKICAgICAgICB9CgogICAgICAgIGlmICghcGFyYW1zLm9ic2VydmVyKSB7CiAgICAgICAgICAgIHN3aXBlci51cGRhdGUoKTsKICAgICAgICB9CgogICAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7CiAgICB9CgogICAgZnVuY3Rpb24gYWRkU2xpZGUoaW5kZXgsIHNsaWRlcykgewogICAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7CiAgICAgICAgY29uc3QgewogICAgICAgICAgICAkd3JhcHBlckVsLAogICAgICAgICAgICBwYXJhbXMsCiAgICAgICAgICAgIGFjdGl2ZUluZGV4CiAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICBsZXQgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDsKCiAgICAgICAgaWYgKHBhcmFtcy5sb29wKSB7CiAgICAgICAgICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7CiAgICAgICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpOwogICAgICAgICAgICBzd2lwZXIuc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCk7CiAgICAgICAgfQoKICAgICAgICBjb25zdCBiYXNlTGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7CgogICAgICAgIGlmIChpbmRleCA8PSAwKSB7CiAgICAgICAgICAgIHN3aXBlci5wcmVwZW5kU2xpZGUoc2xpZGVzKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKGluZGV4ID49IGJhc2VMZW5ndGgpIHsKICAgICAgICAgICAgc3dpcGVyLmFwcGVuZFNsaWRlKHNsaWRlcyk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIDEgOiBhY3RpdmVJbmRleEJ1ZmZlcjsKICAgICAgICBjb25zdCBzbGlkZXNCdWZmZXIgPSBbXTsKCiAgICAgICAgZm9yIChsZXQgaSA9IGJhc2VMZW5ndGggLSAxOyBpID49IGluZGV4OyBpIC09IDEpIHsKICAgICAgICAgICAgY29uc3QgY3VycmVudFNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShpKTsKICAgICAgICAgICAgY3VycmVudFNsaWRlLnJlbW92ZSgpOwogICAgICAgICAgICBzbGlkZXNCdWZmZXIudW5zaGlmdChjdXJyZW50U2xpZGUpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykgewogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW2ldKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyBzbGlkZXMubGVuZ3RoIDogYWN0aXZlSW5kZXhCdWZmZXI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTsKICAgICAgICB9CgogICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzQnVmZmVyLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc0J1ZmZlcltpXSk7CiAgICAgICAgfQoKICAgICAgICBpZiAocGFyYW1zLmxvb3ApIHsKICAgICAgICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTsKICAgICAgICB9CgogICAgICAgIGlmICghcGFyYW1zLm9ic2VydmVyKSB7CiAgICAgICAgICAgIHN3aXBlci51cGRhdGUoKTsKICAgICAgICB9CgogICAgICAgIGlmIChwYXJhbXMubG9vcCkgewogICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7CiAgICAgICAgY29uc3Qgc3dpcGVyID0gdGhpczsKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHBhcmFtcywKICAgICAgICAgICAgJHdyYXBwZXJFbCwKICAgICAgICAgICAgYWN0aXZlSW5kZXgKICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgIGxldCBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4OwoKICAgICAgICBpZiAocGFyYW1zLmxvb3ApIHsKICAgICAgICAgICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlczsKICAgICAgICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7CiAgICAgICAgICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKTsKICAgICAgICB9CgogICAgICAgIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyOwogICAgICAgIGxldCBpbmRleFRvUmVtb3ZlOwoKICAgICAgICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlc0luZGV4ZXMpIHsKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNJbmRleGVzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlc1tpXTsKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXM7CiAgICAgICAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpOwogICAgICAgICAgICBpZiAoaW5kZXhUb1JlbW92ZSA8IG5ld0FjdGl2ZUluZGV4KSBuZXdBY3RpdmVJbmRleCAtPSAxOwogICAgICAgICAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTsKICAgICAgICB9CgogICAgICAgIGlmIChwYXJhbXMubG9vcCkgewogICAgICAgICAgICBzd2lwZXIubG9vcENyZWF0ZSgpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCFwYXJhbXMub2JzZXJ2ZXIpIHsKICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZSgpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHBhcmFtcy5sb29wKSB7CiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHJlbW92ZUFsbFNsaWRlcygpIHsKICAgICAgICBjb25zdCBzd2lwZXIgPSB0aGlzOwogICAgICAgIGNvbnN0IHNsaWRlc0luZGV4ZXMgPSBbXTsKCiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgIHNsaWRlc0luZGV4ZXMucHVzaChpKTsKICAgICAgICB9CgogICAgICAgIHN3aXBlci5yZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBNYW5pcHVsYXRpb24oX3JlZikgewogICAgICAgIGxldCB7CiAgICAgICAgICAgIHN3aXBlcgogICAgICAgIH0gPSBfcmVmOwogICAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7CiAgICAgICAgICAgIGFwcGVuZFNsaWRlOiBhcHBlbmRTbGlkZS5iaW5kKHN3aXBlciksCiAgICAgICAgICAgIHByZXBlbmRTbGlkZTogcHJlcGVuZFNsaWRlLmJpbmQoc3dpcGVyKSwKICAgICAgICAgICAgYWRkU2xpZGU6IGFkZFNsaWRlLmJpbmQoc3dpcGVyKSwKICAgICAgICAgICAgcmVtb3ZlU2xpZGU6IHJlbW92ZVNsaWRlLmJpbmQoc3dpcGVyKSwKICAgICAgICAgICAgcmVtb3ZlQWxsU2xpZGVzOiByZW1vdmVBbGxTbGlkZXMuYmluZChzd2lwZXIpCiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gZWZmZWN0SW5pdChwYXJhbXMpIHsKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIGVmZmVjdCwKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICBvbiwKICAgICAgICAgICAgc2V0VHJhbnNsYXRlLAogICAgICAgICAgICBzZXRUcmFuc2l0aW9uLAogICAgICAgICAgICBvdmVyd3JpdGVQYXJhbXMsCiAgICAgICAgICAgIHBlcnNwZWN0aXZlLAogICAgICAgICAgICByZWNyZWF0ZVNoYWRvd3MsCiAgICAgICAgICAgIGdldEVmZmVjdFBhcmFtcwogICAgICAgIH0gPSBwYXJhbXM7CiAgICAgICAgb24oJ2JlZm9yZUluaXQnLCAoKSA9PiB7CiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47CiAgICAgICAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7ZWZmZWN0fWApOwoKICAgICAgICAgICAgaWYgKHBlcnNwZWN0aXZlICYmIHBlcnNwZWN0aXZlKCkpIHsKICAgICAgICAgICAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfTNkYCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCA9IG92ZXJ3cml0ZVBhcmFtcyA/IG92ZXJ3cml0ZVBhcmFtcygpIDoge307CiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zUmVzdWx0KTsKICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCk7CiAgICAgICAgfSk7CiAgICAgICAgb24oJ3NldFRyYW5zbGF0ZScsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjsKICAgICAgICAgICAgc2V0VHJhbnNsYXRlKCk7CiAgICAgICAgfSk7CiAgICAgICAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7CiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47CiAgICAgICAgICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pOwogICAgICAgIH0pOwogICAgICAgIG9uKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4gewogICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuOwoKICAgICAgICAgICAgaWYgKHJlY3JlYXRlU2hhZG93cykgewogICAgICAgICAgICAgICAgaWYgKCFnZXRFZmZlY3RQYXJhbXMgfHwgIWdldEVmZmVjdFBhcmFtcygpLnNsaWRlU2hhZG93cykgcmV0dXJuOyAvLyByZW1vdmUgc2hhZG93cwoKICAgICAgICAgICAgICAgIHN3aXBlci5zbGlkZXMuZWFjaChzbGlkZUVsID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zdCAkc2xpZGVFbCA9IHN3aXBlci4kKHNsaWRlRWwpOwogICAgICAgICAgICAgICAgICAgICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgfSk7IC8vIGNyZWF0ZSBuZXcgb25lCgogICAgICAgICAgICAgICAgcmVjcmVhdGVTaGFkb3dzKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBsZXQgcmVxdWlyZVVwZGF0ZU9uVmlydHVhbDsKICAgICAgICBvbigndmlydHVhbFVwZGF0ZScsICgpID0+IHsKICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjsKCiAgICAgICAgICAgIGlmICghc3dpcGVyLnNsaWRlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgPSB0cnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gewogICAgICAgICAgICAgICAgaWYgKHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgJiYgc3dpcGVyLnNsaWRlcyAmJiBzd2lwZXIuc2xpZGVzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIHNldFRyYW5zbGF0ZSgpOwogICAgICAgICAgICAgICAgICAgIHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgPSBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gZWZmZWN0VGFyZ2V0KGVmZmVjdFBhcmFtcywgJHNsaWRlRWwpIHsKICAgICAgICBpZiAoZWZmZWN0UGFyYW1zLnRyYW5zZm9ybUVsKSB7CiAgICAgICAgICAgIHJldHVybiAkc2xpZGVFbC5maW5kKGVmZmVjdFBhcmFtcy50cmFuc2Zvcm1FbCkuY3NzKHsKICAgICAgICAgICAgICAgICdiYWNrZmFjZS12aXNpYmlsaXR5JzogJ2hpZGRlbicsCiAgICAgICAgICAgICAgICAnLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5JzogJ2hpZGRlbicKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJHNsaWRlRWw7CiAgICB9CgogICAgZnVuY3Rpb24gZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoX3JlZikgewogICAgICAgIGxldCB7CiAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgZHVyYXRpb24sCiAgICAgICAgICAgIHRyYW5zZm9ybUVsLAogICAgICAgICAgICBhbGxTbGlkZXMKICAgICAgICB9ID0gX3JlZjsKICAgICAgICBjb25zdCB7CiAgICAgICAgICAgIHNsaWRlcywKICAgICAgICAgICAgYWN0aXZlSW5kZXgsCiAgICAgICAgICAgICR3cmFwcGVyRWwKICAgICAgICB9ID0gc3dpcGVyOwoKICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIGR1cmF0aW9uICE9PSAwKSB7CiAgICAgICAgICAgIGxldCBldmVudFRyaWdnZXJlZCA9IGZhbHNlOwogICAgICAgICAgICBsZXQgJHRyYW5zaXRpb25FbmRUYXJnZXQ7CgogICAgICAgICAgICBpZiAoYWxsU2xpZGVzKSB7CiAgICAgICAgICAgICAgICAkdHJhbnNpdGlvbkVuZFRhcmdldCA9IHRyYW5zZm9ybUVsID8gc2xpZGVzLmZpbmQodHJhbnNmb3JtRWwpIDogc2xpZGVzOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJHRyYW5zaXRpb25FbmRUYXJnZXQgPSB0cmFuc2Zvcm1FbCA/IHNsaWRlcy5lcShhY3RpdmVJbmRleCkuZmluZCh0cmFuc2Zvcm1FbCkgOiBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkdHJhbnNpdGlvbkVuZFRhcmdldC50cmFuc2l0aW9uRW5kKCgpID0+IHsKICAgICAgICAgICAgICAgIGlmIChldmVudFRyaWdnZXJlZCkgcmV0dXJuOwogICAgICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuOwogICAgICAgICAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlOwogICAgICAgICAgICAgICAgY29uc3QgdHJpZ2dlckV2ZW50cyA9IFsnd2Via2l0VHJhbnNpdGlvbkVuZCcsICd0cmFuc2l0aW9uZW5kJ107CgogICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlnZ2VyRXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgJHdyYXBwZXJFbC50cmlnZ2VyKHRyaWdnZXJFdmVudHNbaV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gRWZmZWN0RmFkZShfcmVmKSB7CiAgICAgICAgbGV0IHsKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICBleHRlbmRQYXJhbXMsCiAgICAgICAgICAgIG9uCiAgICAgICAgfSA9IF9yZWY7CiAgICAgICAgZXh0ZW5kUGFyYW1zKHsKICAgICAgICAgICAgZmFkZUVmZmVjdDogewogICAgICAgICAgICAgICAgY3Jvc3NGYWRlOiBmYWxzZSwKICAgICAgICAgICAgICAgIHRyYW5zZm9ybUVsOiBudWxsCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4gewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBzbGlkZXMKICAgICAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5mYWRlRWZmZWN0OwoKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgICAgIGNvbnN0ICRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShpKTsKICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0OwogICAgICAgICAgICAgICAgbGV0IHR4ID0gLW9mZnNldDsKICAgICAgICAgICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB0eCAtPSBzd2lwZXIudHJhbnNsYXRlOwogICAgICAgICAgICAgICAgbGV0IHR5ID0gMDsKCiAgICAgICAgICAgICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkgewogICAgICAgICAgICAgICAgICAgIHR5ID0gdHg7CiAgICAgICAgICAgICAgICAgICAgdHggPSAwOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlT3BhY2l0eSA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdC5jcm9zc0ZhZGUgPyBNYXRoLm1heCgxIC0gTWF0aC5hYnMoJHNsaWRlRWxbMF0ucHJvZ3Jlc3MpLCAwKSA6IDEgKyBNYXRoLm1pbihNYXRoLm1heCgkc2xpZGVFbFswXS5wcm9ncmVzcywgLTEpLCAwKTsKICAgICAgICAgICAgICAgIGNvbnN0ICR0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsICRzbGlkZUVsKTsKICAgICAgICAgICAgICAgICR0YXJnZXRFbC5jc3MoewogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IHNsaWRlT3BhY2l0eQogICAgICAgICAgICAgICAgfSkudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAwcHgpYCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4gewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1FbAogICAgICAgICAgICB9ID0gc3dpcGVyLnBhcmFtcy5mYWRlRWZmZWN0OwogICAgICAgICAgICBjb25zdCAkdHJhbnNpdGlvbkVsZW1lbnRzID0gdHJhbnNmb3JtRWwgPyBzd2lwZXIuc2xpZGVzLmZpbmQodHJhbnNmb3JtRWwpIDogc3dpcGVyLnNsaWRlczsKICAgICAgICAgICAgJHRyYW5zaXRpb25FbGVtZW50cy50cmFuc2l0aW9uKGR1cmF0aW9uKTsKICAgICAgICAgICAgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoewogICAgICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICAgICAgZHVyYXRpb24sCiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1FbCwKICAgICAgICAgICAgICAgIGFsbFNsaWRlczogdHJ1ZQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBlZmZlY3RJbml0KHsKICAgICAgICAgICAgZWZmZWN0OiAnZmFkZScsCiAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgb24sCiAgICAgICAgICAgIHNldFRyYW5zbGF0ZSwKICAgICAgICAgICAgc2V0VHJhbnNpdGlvbiwKICAgICAgICAgICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoewogICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSwKICAgICAgICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLAogICAgICAgICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSwKICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCwKICAgICAgICAgICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICFzd2lwZXIucGFyYW1zLmNzc01vZGUKICAgICAgICAgICAgfSkKICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBFZmZlY3RDdWJlKF9yZWYpIHsKICAgICAgICBsZXQgewogICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgIGV4dGVuZFBhcmFtcywKICAgICAgICAgICAgb24KICAgICAgICB9ID0gX3JlZjsKICAgICAgICBleHRlbmRQYXJhbXMoewogICAgICAgICAgICBjdWJlRWZmZWN0OiB7CiAgICAgICAgICAgICAgICBzbGlkZVNoYWRvd3M6IHRydWUsCiAgICAgICAgICAgICAgICBzaGFkb3c6IHRydWUsCiAgICAgICAgICAgICAgICBzaGFkb3dPZmZzZXQ6IDIwLAogICAgICAgICAgICAgICAgc2hhZG93U2NhbGU6IDAuOTQKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBjb25zdCBjcmVhdGVTbGlkZVNoYWRvd3MgPSAoJHNsaWRlRWwsIHByb2dyZXNzLCBpc0hvcml6b250YWwpID0+IHsKICAgICAgICAgICAgbGV0IHNoYWRvd0JlZm9yZSA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpOwogICAgICAgICAgICBsZXQgc2hhZG93QWZ0ZXIgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7CgogICAgICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgc2hhZG93QmVmb3JlID0gJChgPGRpdiBjbGFzcz0ic3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnfSI+PC9kaXY+YCk7CiAgICAgICAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QmVmb3JlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgc2hhZG93QWZ0ZXIgPSAkKGA8ZGl2IGNsYXNzPSJzd2lwZXItc2xpZGUtc2hhZG93LSR7aXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nfSI+PC9kaXY+YCk7CiAgICAgICAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QWZ0ZXIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCkgc2hhZG93QmVmb3JlWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtcHJvZ3Jlc3MsIDApOwogICAgICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoKSBzaGFkb3dBZnRlclswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgocHJvZ3Jlc3MsIDApOwogICAgICAgIH07CgogICAgICAgIGNvbnN0IHJlY3JlYXRlU2hhZG93cyA9ICgpID0+IHsKICAgICAgICAgICAgLy8gY3JlYXRlIG5ldyBvbmVzCiAgICAgICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHN3aXBlci5pc0hvcml6b250YWwoKTsKICAgICAgICAgICAgc3dpcGVyLnNsaWRlcy5lYWNoKHNsaWRlRWwgPT4gewogICAgICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbihzbGlkZUVsLnByb2dyZXNzLCAxKSwgLTEpOwogICAgICAgICAgICAgICAgY3JlYXRlU2xpZGVTaGFkb3dzKCQoc2xpZGVFbCksIHByb2dyZXNzLCBpc0hvcml6b250YWwpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgICRlbCwKICAgICAgICAgICAgICAgICR3cmFwcGVyRWwsCiAgICAgICAgICAgICAgICBzbGlkZXMsCiAgICAgICAgICAgICAgICB3aWR0aDogc3dpcGVyV2lkdGgsCiAgICAgICAgICAgICAgICBoZWlnaHQ6IHN3aXBlckhlaWdodCwKICAgICAgICAgICAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsLAogICAgICAgICAgICAgICAgc2l6ZTogc3dpcGVyU2l6ZSwKICAgICAgICAgICAgICAgIGJyb3dzZXIKICAgICAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jdWJlRWZmZWN0OwogICAgICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7CiAgICAgICAgICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkOwogICAgICAgICAgICBsZXQgd3JhcHBlclJvdGF0ZSA9IDA7CiAgICAgICAgICAgIGxldCAkY3ViZVNoYWRvd0VsOwoKICAgICAgICAgICAgaWYgKHBhcmFtcy5zaGFkb3cpIHsKICAgICAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHsKICAgICAgICAgICAgICAgICAgICAkY3ViZVNoYWRvd0VsID0gJHdyYXBwZXJFbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7CgogICAgICAgICAgICAgICAgICAgIGlmICgkY3ViZVNoYWRvd0VsLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAkY3ViZVNoYWRvd0VsID0gJCgnPGRpdiBjbGFzcz0ic3dpcGVyLWN1YmUtc2hhZG93Ij48L2Rpdj4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkY3ViZVNoYWRvd0VsLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogYCR7c3dpcGVyV2lkdGh9cHhgCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpOwoKICAgICAgICAgICAgICAgICAgICBpZiAoJGN1YmVTaGFkb3dFbC5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICQoJzxkaXYgY2xhc3M9InN3aXBlci1jdWJlLXNoYWRvdyI+PC9kaXY+Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICRlbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgY29uc3QgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7CiAgICAgICAgICAgICAgICBsZXQgc2xpZGVJbmRleCA9IGk7CgogICAgICAgICAgICAgICAgaWYgKGlzVmlydHVhbCkgewogICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBwYXJzZUludCgkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbGV0IHNsaWRlQW5nbGUgPSBzbGlkZUluZGV4ICogOTA7CiAgICAgICAgICAgICAgICBsZXQgcm91bmQgPSBNYXRoLmZsb29yKHNsaWRlQW5nbGUgLyAzNjApOwoKICAgICAgICAgICAgICAgIGlmIChydGwpIHsKICAgICAgICAgICAgICAgICAgICBzbGlkZUFuZ2xlID0gLXNsaWRlQW5nbGU7CiAgICAgICAgICAgICAgICAgICAgcm91bmQgPSBNYXRoLmZsb29yKC1zbGlkZUFuZ2xlIC8gMzYwKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpOwogICAgICAgICAgICAgICAgbGV0IHR4ID0gMDsKICAgICAgICAgICAgICAgIGxldCB0eSA9IDA7CiAgICAgICAgICAgICAgICBsZXQgdHogPSAwOwoKICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICUgNCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIHR4ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7CiAgICAgICAgICAgICAgICAgICAgdHogPSAwOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDEpICUgNCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIHR4ID0gMDsKICAgICAgICAgICAgICAgICAgICB0eiA9IC1yb3VuZCAqIDQgKiBzd2lwZXJTaXplOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDIpICUgNCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIHR4ID0gc3dpcGVyU2l6ZSArIHJvdW5kICogNCAqIHN3aXBlclNpemU7CiAgICAgICAgICAgICAgICAgICAgdHogPSBzd2lwZXJTaXplOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDMpICUgNCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIHR4ID0gLXN3aXBlclNpemU7CiAgICAgICAgICAgICAgICAgICAgdHogPSAzICogc3dpcGVyU2l6ZSArIHN3aXBlclNpemUgKiA0ICogcm91bmQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHJ0bCkgewogICAgICAgICAgICAgICAgICAgIHR4ID0gLXR4OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghaXNIb3Jpem9udGFsKSB7CiAgICAgICAgICAgICAgICAgICAgdHkgPSB0eDsKICAgICAgICAgICAgICAgICAgICB0eCA9IDA7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gYHJvdGF0ZVgoJHtpc0hvcml6b250YWwgPyAwIDogLXNsaWRlQW5nbGV9ZGVnKSByb3RhdGVZKCR7aXNIb3Jpem9udGFsID8gc2xpZGVBbmdsZSA6IDB9ZGVnKSB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAke3R6fXB4KWA7CgogICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzIDw9IDEgJiYgcHJvZ3Jlc3MgPiAtMSkgewogICAgICAgICAgICAgICAgICAgIHdyYXBwZXJSb3RhdGUgPSBzbGlkZUluZGV4ICogOTAgKyBwcm9ncmVzcyAqIDkwOwogICAgICAgICAgICAgICAgICAgIGlmIChydGwpIHdyYXBwZXJSb3RhdGUgPSAtc2xpZGVJbmRleCAqIDkwIC0gcHJvZ3Jlc3MgKiA5MDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkc2xpZGVFbC50cmFuc2Zvcm0odHJhbnNmb3JtKTsKCiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykgewogICAgICAgICAgICAgICAgICAgIGNyZWF0ZVNsaWRlU2hhZG93cygkc2xpZGVFbCwgcHJvZ3Jlc3MsIGlzSG9yaXpvbnRhbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICR3cmFwcGVyRWwuY3NzKHsKICAgICAgICAgICAgICAgICctd2Via2l0LXRyYW5zZm9ybS1vcmlnaW4nOiBgNTAlIDUwJSAtJHtzd2lwZXJTaXplIC8gMn1weGAsCiAgICAgICAgICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YAogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmIChwYXJhbXMuc2hhZG93KSB7CiAgICAgICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7CiAgICAgICAgICAgICAgICAgICAgJGN1YmVTaGFkb3dFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDBweCwgJHtzd2lwZXJXaWR0aCAvIDIgKyBwYXJhbXMuc2hhZG93T2Zmc2V0fXB4LCAkey1zd2lwZXJXaWR0aCAvIDJ9cHgpIHJvdGF0ZVgoOTBkZWcpIHJvdGF0ZVooMGRlZykgc2NhbGUoJHtwYXJhbXMuc2hhZG93U2NhbGV9KWApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGFkb3dBbmdsZSA9IE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC0gTWF0aC5mbG9vcihNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAvIDkwKSAqIDkwOwogICAgICAgICAgICAgICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSAxLjUgLSAoTWF0aC5zaW4oc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSAvIDM2MCkgLyAyICsgTWF0aC5jb3Moc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSAvIDM2MCkgLyAyKTsKICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2FsZTEgPSBwYXJhbXMuc2hhZG93U2NhbGU7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NhbGUyID0gcGFyYW1zLnNoYWRvd1NjYWxlIC8gbXVsdGlwbGllcjsKICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBwYXJhbXMuc2hhZG93T2Zmc2V0OwogICAgICAgICAgICAgICAgICAgICRjdWJlU2hhZG93RWwudHJhbnNmb3JtKGBzY2FsZTNkKCR7c2NhbGUxfSwgMSwgJHtzY2FsZTJ9KSB0cmFuc2xhdGUzZCgwcHgsICR7c3dpcGVySGVpZ2h0IC8gMiArIG9mZnNldH1weCwgJHstc3dpcGVySGVpZ2h0IC8gMiAvIHNjYWxlMn1weCkgcm90YXRlWCgtOTBkZWcpYCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IHpGYWN0b3IgPSBicm93c2VyLmlzU2FmYXJpIHx8IGJyb3dzZXIuaXNXZWJWaWV3ID8gLXN3aXBlclNpemUgLyAyIDogMDsKICAgICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDBweCwwLCR7ekZhY3Rvcn1weCkgcm90YXRlWCgke3N3aXBlci5pc0hvcml6b250YWwoKSA/IDAgOiB3cmFwcGVyUm90YXRlfWRlZykgcm90YXRlWSgke3N3aXBlci5pc0hvcml6b250YWwoKSA/IC13cmFwcGVyUm90YXRlIDogMH1kZWcpYCk7CiAgICAgICAgICAgICR3cmFwcGVyRWxbMF0uc3R5bGUuc2V0UHJvcGVydHkoJy0tc3dpcGVyLWN1YmUtdHJhbnNsYXRlLXonLCBgJHt6RmFjdG9yfXB4YCk7CiAgICAgICAgfTsKCiAgICAgICAgY29uc3Qgc2V0VHJhbnNpdGlvbiA9IGR1cmF0aW9uID0+IHsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgJGVsLAogICAgICAgICAgICAgICAgc2xpZGVzCiAgICAgICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgICAgIHNsaWRlcy50cmFuc2l0aW9uKGR1cmF0aW9uKS5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS50cmFuc2l0aW9uKGR1cmF0aW9uKTsKCiAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Quc2hhZG93ICYmICFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHsKICAgICAgICAgICAgICAgICRlbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93JykudHJhbnNpdGlvbihkdXJhdGlvbik7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBlZmZlY3RJbml0KHsKICAgICAgICAgICAgZWZmZWN0OiAnY3ViZScsCiAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgb24sCiAgICAgICAgICAgIHNldFRyYW5zbGF0ZSwKICAgICAgICAgICAgc2V0VHJhbnNpdGlvbiwKICAgICAgICAgICAgcmVjcmVhdGVTaGFkb3dzLAogICAgICAgICAgICBnZXRFZmZlY3RQYXJhbXM6ICgpID0+IHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdCwKICAgICAgICAgICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsCiAgICAgICAgICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHsKICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsCiAgICAgICAgICAgICAgICBzbGlkZXNQZXJHcm91cDogMSwKICAgICAgICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsCiAgICAgICAgICAgICAgICByZXNpc3RhbmNlUmF0aW86IDAsCiAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDAsCiAgICAgICAgICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsCiAgICAgICAgICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlCiAgICAgICAgICAgIH0pCiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gY3JlYXRlU2hhZG93KHBhcmFtcywgJHNsaWRlRWwsIHNpZGUpIHsKICAgICAgICBjb25zdCBzaGFkb3dDbGFzcyA9IGBzd2lwZXItc2xpZGUtc2hhZG93JHtzaWRlID8gYC0ke3NpZGV9YCA6ICcnfWA7CiAgICAgICAgY29uc3QgJHNoYWRvd0NvbnRhaW5lciA9IHBhcmFtcy50cmFuc2Zvcm1FbCA/ICRzbGlkZUVsLmZpbmQocGFyYW1zLnRyYW5zZm9ybUVsKSA6ICRzbGlkZUVsOwogICAgICAgIGxldCAkc2hhZG93RWwgPSAkc2hhZG93Q29udGFpbmVyLmNoaWxkcmVuKGAuJHtzaGFkb3dDbGFzc31gKTsKCiAgICAgICAgaWYgKCEkc2hhZG93RWwubGVuZ3RoKSB7CiAgICAgICAgICAgICRzaGFkb3dFbCA9ICQoYDxkaXYgY2xhc3M9InN3aXBlci1zbGlkZS1zaGFkb3cke3NpZGUgPyBgLSR7c2lkZX1gIDogJyd9Ij48L2Rpdj5gKTsKICAgICAgICAgICAgJHNoYWRvd0NvbnRhaW5lci5hcHBlbmQoJHNoYWRvd0VsKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkc2hhZG93RWw7CiAgICB9CgogICAgZnVuY3Rpb24gRWZmZWN0RmxpcChfcmVmKSB7CiAgICAgICAgbGV0IHsKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICBleHRlbmRQYXJhbXMsCiAgICAgICAgICAgIG9uCiAgICAgICAgfSA9IF9yZWY7CiAgICAgICAgZXh0ZW5kUGFyYW1zKHsKICAgICAgICAgICAgZmxpcEVmZmVjdDogewogICAgICAgICAgICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLAogICAgICAgICAgICAgICAgbGltaXRSb3RhdGlvbjogdHJ1ZSwKICAgICAgICAgICAgICAgIHRyYW5zZm9ybUVsOiBudWxsCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgY29uc3QgY3JlYXRlU2xpZGVTaGFkb3dzID0gKCRzbGlkZUVsLCBwcm9ncmVzcywgcGFyYW1zKSA9PiB7CiAgICAgICAgICAgIGxldCBzaGFkb3dCZWZvcmUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTsKICAgICAgICAgICAgbGV0IHNoYWRvd0FmdGVyID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpOwoKICAgICAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgIHNoYWRvd0JlZm9yZSA9IGNyZWF0ZVNoYWRvdyhwYXJhbXMsICRzbGlkZUVsLCBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgIHNoYWRvd0FmdGVyID0gY3JlYXRlU2hhZG93KHBhcmFtcywgJHNsaWRlRWwsIHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdyaWdodCcgOiAnYm90dG9tJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoKSBzaGFkb3dCZWZvcmVbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7CiAgICAgICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGgpIHNoYWRvd0FmdGVyWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7CiAgICAgICAgfTsKCiAgICAgICAgY29uc3QgcmVjcmVhdGVTaGFkb3dzID0gKCkgPT4gewogICAgICAgICAgICAvLyBTZXQgc2hhZG93cwogICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3Q7CiAgICAgICAgICAgIHN3aXBlci5zbGlkZXMuZWFjaChzbGlkZUVsID0+IHsKICAgICAgICAgICAgICAgIGNvbnN0ICRzbGlkZUVsID0gJChzbGlkZUVsKTsKICAgICAgICAgICAgICAgIGxldCBwcm9ncmVzcyA9ICRzbGlkZUVsWzBdLnByb2dyZXNzOwoKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3QubGltaXRSb3RhdGlvbikgewogICAgICAgICAgICAgICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oc2xpZGVFbC5wcm9ncmVzcywgMSksIC0xKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjcmVhdGVTbGlkZVNoYWRvd3MoJHNsaWRlRWwsIHByb2dyZXNzLCBwYXJhbXMpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgIHNsaWRlcywKICAgICAgICAgICAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsCiAgICAgICAgICAgIH0gPSBzd2lwZXI7CiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdDsKCiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICBjb25zdCAkc2xpZGVFbCA9IHNsaWRlcy5lcShpKTsKICAgICAgICAgICAgICAgIGxldCBwcm9ncmVzcyA9ICRzbGlkZUVsWzBdLnByb2dyZXNzOwoKICAgICAgICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3QubGltaXRSb3RhdGlvbikgewogICAgICAgICAgICAgICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIDEpLCAtMSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7CiAgICAgICAgICAgICAgICBjb25zdCByb3RhdGUgPSAtMTgwICogcHJvZ3Jlc3M7CiAgICAgICAgICAgICAgICBsZXQgcm90YXRlWSA9IHJvdGF0ZTsKICAgICAgICAgICAgICAgIGxldCByb3RhdGVYID0gMDsKICAgICAgICAgICAgICAgIGxldCB0eCA9IHN3aXBlci5wYXJhbXMuY3NzTW9kZSA/IC1vZmZzZXQgLSBzd2lwZXIudHJhbnNsYXRlIDogLW9mZnNldDsKICAgICAgICAgICAgICAgIGxldCB0eSA9IDA7CgogICAgICAgICAgICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHsKICAgICAgICAgICAgICAgICAgICB0eSA9IHR4OwogICAgICAgICAgICAgICAgICAgIHR4ID0gMDsKICAgICAgICAgICAgICAgICAgICByb3RhdGVYID0gLXJvdGF0ZVk7CiAgICAgICAgICAgICAgICAgICAgcm90YXRlWSA9IDA7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJ0bCkgewogICAgICAgICAgICAgICAgICAgIHJvdGF0ZVkgPSAtcm90YXRlWTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChwcm9ncmVzcykpICsgc2xpZGVzLmxlbmd0aDsKCiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykgewogICAgICAgICAgICAgICAgICAgIGNyZWF0ZVNsaWRlU2hhZG93cygkc2xpZGVFbCwgcHJvZ3Jlc3MsIHBhcmFtcyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsIDBweCkgcm90YXRlWCgke3JvdGF0ZVh9ZGVnKSByb3RhdGVZKCR7cm90YXRlWX1kZWcpYDsKICAgICAgICAgICAgICAgIGNvbnN0ICR0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsICRzbGlkZUVsKTsKICAgICAgICAgICAgICAgICR0YXJnZXRFbC50cmFuc2Zvcm0odHJhbnNmb3JtKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgIHRyYW5zZm9ybUVsCiAgICAgICAgICAgIH0gPSBzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3Q7CiAgICAgICAgICAgIGNvbnN0ICR0cmFuc2l0aW9uRWxlbWVudHMgPSB0cmFuc2Zvcm1FbCA/IHN3aXBlci5zbGlkZXMuZmluZCh0cmFuc2Zvcm1FbCkgOiBzd2lwZXIuc2xpZGVzOwogICAgICAgICAgICAkdHJhbnNpdGlvbkVsZW1lbnRzLnRyYW5zaXRpb24oZHVyYXRpb24pLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLnRyYW5zaXRpb24oZHVyYXRpb24pOwogICAgICAgICAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7CiAgICAgICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgICAgICBkdXJhdGlvbiwKICAgICAgICAgICAgICAgIHRyYW5zZm9ybUVsCiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIGVmZmVjdEluaXQoewogICAgICAgICAgICBlZmZlY3Q6ICdmbGlwJywKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICBvbiwKICAgICAgICAgICAgc2V0VHJhbnNsYXRlLAogICAgICAgICAgICBzZXRUcmFuc2l0aW9uLAogICAgICAgICAgICByZWNyZWF0ZVNoYWRvd3MsCiAgICAgICAgICAgIGdldEVmZmVjdFBhcmFtczogKCkgPT4gc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0LAogICAgICAgICAgICBwZXJzcGVjdGl2ZTogKCkgPT4gdHJ1ZSwKICAgICAgICAgICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoewogICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMSwKICAgICAgICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLAogICAgICAgICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSwKICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCwKICAgICAgICAgICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICFzd2lwZXIucGFyYW1zLmNzc01vZGUKICAgICAgICAgICAgfSkKICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBFZmZlY3RDb3ZlcmZsb3coX3JlZikgewogICAgICAgIGxldCB7CiAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgZXh0ZW5kUGFyYW1zLAogICAgICAgICAgICBvbgogICAgICAgIH0gPSBfcmVmOwogICAgICAgIGV4dGVuZFBhcmFtcyh7CiAgICAgICAgICAgIGNvdmVyZmxvd0VmZmVjdDogewogICAgICAgICAgICAgICAgcm90YXRlOiA1MCwKICAgICAgICAgICAgICAgIHN0cmV0Y2g6IDAsCiAgICAgICAgICAgICAgICBkZXB0aDogMTAwLAogICAgICAgICAgICAgICAgc2NhbGU6IDEsCiAgICAgICAgICAgICAgICBtb2RpZmllcjogMSwKICAgICAgICAgICAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSwKICAgICAgICAgICAgICAgIHRyYW5zZm9ybUVsOiBudWxsCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4gewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICB3aWR0aDogc3dpcGVyV2lkdGgsCiAgICAgICAgICAgICAgICBoZWlnaHQ6IHN3aXBlckhlaWdodCwKICAgICAgICAgICAgICAgIHNsaWRlcywKICAgICAgICAgICAgICAgIHNsaWRlc1NpemVzR3JpZAogICAgICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmNvdmVyZmxvd0VmZmVjdDsKICAgICAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpOwogICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBzd2lwZXIudHJhbnNsYXRlOwogICAgICAgICAgICBjb25zdCBjZW50ZXIgPSBpc0hvcml6b250YWwgPyAtdHJhbnNmb3JtICsgc3dpcGVyV2lkdGggLyAyIDogLXRyYW5zZm9ybSArIHN3aXBlckhlaWdodCAvIDI7CiAgICAgICAgICAgIGNvbnN0IHJvdGF0ZSA9IGlzSG9yaXpvbnRhbCA/IHBhcmFtcy5yb3RhdGUgOiAtcGFyYW1zLnJvdGF0ZTsKICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRlID0gcGFyYW1zLmRlcHRoOyAvLyBFYWNoIHNsaWRlIG9mZnNldCBmcm9tIGNlbnRlcgoKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgY29uc3QgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7CiAgICAgICAgICAgICAgICBjb25zdCBzbGlkZVNpemUgPSBzbGlkZXNTaXplc0dyaWRbaV07CiAgICAgICAgICAgICAgICBjb25zdCBzbGlkZU9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0OwogICAgICAgICAgICAgICAgY29uc3QgY2VudGVyT2Zmc2V0ID0gKGNlbnRlciAtIHNsaWRlT2Zmc2V0IC0gc2xpZGVTaXplIC8gMikgLyBzbGlkZVNpemU7CiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRNdWx0aXBsaWVyID0gdHlwZW9mIHBhcmFtcy5tb2RpZmllciA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmFtcy5tb2RpZmllcihjZW50ZXJPZmZzZXQpIDogY2VudGVyT2Zmc2V0ICogcGFyYW1zLm1vZGlmaWVyOwogICAgICAgICAgICAgICAgbGV0IHJvdGF0ZVkgPSBpc0hvcml6b250YWwgPyByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyIDogMDsKICAgICAgICAgICAgICAgIGxldCByb3RhdGVYID0gaXNIb3Jpem9udGFsID8gMCA6IHJvdGF0ZSAqIG9mZnNldE11bHRpcGxpZXI7IC8vIHZhciByb3RhdGVaID0gMAoKICAgICAgICAgICAgICAgIGxldCB0cmFuc2xhdGVaID0gLXRyYW5zbGF0ZSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpOwogICAgICAgICAgICAgICAgbGV0IHN0cmV0Y2ggPSBwYXJhbXMuc3RyZXRjaDsgLy8gQWxsb3cgcGVyY2VudGFnZSB0byBtYWtlIGEgcmVsYXRpdmUgc3RyZXRjaCBmb3IgcmVzcG9uc2l2ZSBzbGlkZXJzCgogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHJldGNoID09PSAnc3RyaW5nJyAmJiBzdHJldGNoLmluZGV4T2YoJyUnKSAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICBzdHJldGNoID0gcGFyc2VGbG9hdChwYXJhbXMuc3RyZXRjaCkgLyAxMDAgKiBzbGlkZVNpemU7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbGV0IHRyYW5zbGF0ZVkgPSBpc0hvcml6b250YWwgPyAwIDogc3RyZXRjaCAqIG9mZnNldE11bHRpcGxpZXI7CiAgICAgICAgICAgICAgICBsZXQgdHJhbnNsYXRlWCA9IGlzSG9yaXpvbnRhbCA/IHN0cmV0Y2ggKiBvZmZzZXRNdWx0aXBsaWVyIDogMDsKICAgICAgICAgICAgICAgIGxldCBzY2FsZSA9IDEgLSAoMSAtIHBhcmFtcy5zY2FsZSkgKiBNYXRoLmFicyhvZmZzZXRNdWx0aXBsaWVyKTsgLy8gRml4IGZvciB1bHRyYSBzbWFsbCB2YWx1ZXMKCiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWCkgPCAwLjAwMSkgdHJhbnNsYXRlWCA9IDA7CiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWSkgPCAwLjAwMSkgdHJhbnNsYXRlWSA9IDA7CiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWikgPCAwLjAwMSkgdHJhbnNsYXRlWiA9IDA7CiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMocm90YXRlWSkgPCAwLjAwMSkgcm90YXRlWSA9IDA7CiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMocm90YXRlWCkgPCAwLjAwMSkgcm90YXRlWCA9IDA7CiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoc2NhbGUpIDwgMC4wMDEpIHNjYWxlID0gMDsKICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlVHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlWH1weCwke3RyYW5zbGF0ZVl9cHgsJHt0cmFuc2xhdGVafXB4KSAgcm90YXRlWCgke3JvdGF0ZVh9ZGVnKSByb3RhdGVZKCR7cm90YXRlWX1kZWcpIHNjYWxlKCR7c2NhbGV9KWA7CiAgICAgICAgICAgICAgICBjb25zdCAkdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCAkc2xpZGVFbCk7CiAgICAgICAgICAgICAgICAkdGFyZ2V0RWwudHJhbnNmb3JtKHNsaWRlVHJhbnNmb3JtKTsKICAgICAgICAgICAgICAgICRzbGlkZUVsWzBdLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKG9mZnNldE11bHRpcGxpZXIpKSArIDE7CgogICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5zbGlkZVNoYWRvd3MpIHsKICAgICAgICAgICAgICAgICAgICAvLyBTZXQgc2hhZG93cwogICAgICAgICAgICAgICAgICAgIGxldCAkc2hhZG93QmVmb3JlRWwgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTsKICAgICAgICAgICAgICAgICAgICBsZXQgJHNoYWRvd0FmdGVyRWwgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7CgogICAgICAgICAgICAgICAgICAgIGlmICgkc2hhZG93QmVmb3JlRWwubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzaGFkb3dCZWZvcmVFbCA9IGNyZWF0ZVNoYWRvdyhwYXJhbXMsICRzbGlkZUVsLCBpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJyk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoJHNoYWRvd0FmdGVyRWwubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzaGFkb3dBZnRlckVsID0gY3JlYXRlU2hhZG93KHBhcmFtcywgJHNsaWRlRWwsIGlzSG9yaXpvbnRhbCA/ICdyaWdodCcgOiAnYm90dG9tJyk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBpZiAoJHNoYWRvd0JlZm9yZUVsLmxlbmd0aCkgJHNoYWRvd0JlZm9yZUVsWzBdLnN0eWxlLm9wYWNpdHkgPSBvZmZzZXRNdWx0aXBsaWVyID4gMCA/IG9mZnNldE11bHRpcGxpZXIgOiAwOwogICAgICAgICAgICAgICAgICAgIGlmICgkc2hhZG93QWZ0ZXJFbC5sZW5ndGgpICRzaGFkb3dBZnRlckVsWzBdLnN0eWxlLm9wYWNpdHkgPSAtb2Zmc2V0TXVsdGlwbGllciA+IDAgPyAtb2Zmc2V0TXVsdGlwbGllciA6IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4gewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1FbAogICAgICAgICAgICB9ID0gc3dpcGVyLnBhcmFtcy5jb3ZlcmZsb3dFZmZlY3Q7CiAgICAgICAgICAgIGNvbnN0ICR0cmFuc2l0aW9uRWxlbWVudHMgPSB0cmFuc2Zvcm1FbCA/IHN3aXBlci5zbGlkZXMuZmluZCh0cmFuc2Zvcm1FbCkgOiBzd2lwZXIuc2xpZGVzOwogICAgICAgICAgICAkdHJhbnNpdGlvbkVsZW1lbnRzLnRyYW5zaXRpb24oZHVyYXRpb24pLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLnRyYW5zaXRpb24oZHVyYXRpb24pOwogICAgICAgIH07CgogICAgICAgIGVmZmVjdEluaXQoewogICAgICAgICAgICBlZmZlY3Q6ICdjb3ZlcmZsb3cnLAogICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgIG9uLAogICAgICAgICAgICBzZXRUcmFuc2xhdGUsCiAgICAgICAgICAgIHNldFRyYW5zaXRpb24sCiAgICAgICAgICAgIHBlcnNwZWN0aXZlOiAoKSA9PiB0cnVlLAogICAgICAgICAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7CiAgICAgICAgICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlCiAgICAgICAgICAgIH0pCiAgICAgICAgfSk7CiAgICB9CgogICAgZnVuY3Rpb24gRWZmZWN0Q3JlYXRpdmUoX3JlZikgewogICAgICAgIGxldCB7CiAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgZXh0ZW5kUGFyYW1zLAogICAgICAgICAgICBvbgogICAgICAgIH0gPSBfcmVmOwogICAgICAgIGV4dGVuZFBhcmFtcyh7CiAgICAgICAgICAgIGNyZWF0aXZlRWZmZWN0OiB7CiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1FbDogbnVsbCwKICAgICAgICAgICAgICAgIGxpbWl0UHJvZ3Jlc3M6IDEsCiAgICAgICAgICAgICAgICBzaGFkb3dQZXJQcm9ncmVzczogZmFsc2UsCiAgICAgICAgICAgICAgICBwcm9ncmVzc011bHRpcGxpZXI6IDEsCiAgICAgICAgICAgICAgICBwZXJzcGVjdGl2ZTogdHJ1ZSwKICAgICAgICAgICAgICAgIHByZXY6IHsKICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGU6IFswLCAwLCAwXSwKICAgICAgICAgICAgICAgICAgICByb3RhdGU6IFswLCAwLCAwXSwKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgICAgIHNjYWxlOiAxCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbmV4dDogewogICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZTogWzAsIDAsIDBdLAogICAgICAgICAgICAgICAgICAgIHJvdGF0ZTogWzAsIDAsIDBdLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICAgICAgICAgICAgc2NhbGU6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICBjb25zdCBnZXRUcmFuc2xhdGVWYWx1ZSA9IHZhbHVlID0+IHsKICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHJldHVybiB2YWx1ZTsKICAgICAgICAgICAgcmV0dXJuIGAke3ZhbHVlfXB4YDsKICAgICAgICB9OwoKICAgICAgICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgIHNsaWRlcywKICAgICAgICAgICAgICAgICR3cmFwcGVyRWwsCiAgICAgICAgICAgICAgICBzbGlkZXNTaXplc0dyaWQKICAgICAgICAgICAgfSA9IHN3aXBlcjsKICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jcmVhdGl2ZUVmZmVjdDsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgcHJvZ3Jlc3NNdWx0aXBsaWVyOiBtdWx0aXBsaWVyCiAgICAgICAgICAgIH0gPSBwYXJhbXM7CiAgICAgICAgICAgIGNvbnN0IGlzQ2VudGVyZWRTbGlkZXMgPSBzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzOwoKICAgICAgICAgICAgaWYgKGlzQ2VudGVyZWRTbGlkZXMpIHsKICAgICAgICAgICAgICAgIGNvbnN0IG1hcmdpbiA9IHNsaWRlc1NpemVzR3JpZFswXSAvIDIgLSBzd2lwZXIucGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSB8fCAwOwogICAgICAgICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZVgoY2FsYyg1MCUgLSAke21hcmdpbn1weCkpYCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7CiAgICAgICAgICAgICAgICBjb25zdCAkc2xpZGVFbCA9IHNsaWRlcy5lcShpKTsKICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlUHJvZ3Jlc3MgPSAkc2xpZGVFbFswXS5wcm9ncmVzczsKICAgICAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgoJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIC1wYXJhbXMubGltaXRQcm9ncmVzcyksIHBhcmFtcy5saW1pdFByb2dyZXNzKTsKICAgICAgICAgICAgICAgIGxldCBvcmlnaW5hbFByb2dyZXNzID0gcHJvZ3Jlc3M7CgogICAgICAgICAgICAgICAgaWYgKCFpc0NlbnRlcmVkU2xpZGVzKSB7CiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxQcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KCRzbGlkZUVsWzBdLm9yaWdpbmFsUHJvZ3Jlc3MsIC1wYXJhbXMubGltaXRQcm9ncmVzcyksIHBhcmFtcy5saW1pdFByb2dyZXNzKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSAkc2xpZGVFbFswXS5zd2lwZXJTbGlkZU9mZnNldDsKICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBbc3dpcGVyLnBhcmFtcy5jc3NNb2RlID8gLW9mZnNldCAtIHN3aXBlci50cmFuc2xhdGUgOiAtb2Zmc2V0LCAwLCAwXTsKICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBbMCwgMCwgMF07CiAgICAgICAgICAgICAgICBsZXQgY3VzdG9tID0gZmFsc2U7CgogICAgICAgICAgICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHsKICAgICAgICAgICAgICAgICAgICB0WzFdID0gdFswXTsKICAgICAgICAgICAgICAgICAgICB0WzBdID0gMDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGU6IFswLCAwLCAwXSwKICAgICAgICAgICAgICAgICAgICByb3RhdGU6IFswLCAwLCAwXSwKICAgICAgICAgICAgICAgICAgICBzY2FsZTogMSwKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGlmIChwcm9ncmVzcyA8IDApIHsKICAgICAgICAgICAgICAgICAgICBkYXRhID0gcGFyYW1zLm5leHQ7CiAgICAgICAgICAgICAgICAgICAgY3VzdG9tID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHBhcmFtcy5wcmV2OwogICAgICAgICAgICAgICAgICAgIGN1c3RvbSA9IHRydWU7CiAgICAgICAgICAgICAgICB9IC8vIHNldCB0cmFuc2xhdGUKCgogICAgICAgICAgICAgICAgdC5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgpID0+IHsKICAgICAgICAgICAgICAgICAgICB0W2luZGV4XSA9IGBjYWxjKCR7dmFsdWV9cHggKyAoJHtnZXRUcmFuc2xhdGVWYWx1ZShkYXRhLnRyYW5zbGF0ZVtpbmRleF0pfSAqICR7TWF0aC5hYnMocHJvZ3Jlc3MgKiBtdWx0aXBsaWVyKX0pKWA7CiAgICAgICAgICAgICAgICB9KTsgLy8gc2V0IHJvdGF0ZXMKCiAgICAgICAgICAgICAgICByLmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4gewogICAgICAgICAgICAgICAgICAgIHJbaW5kZXhdID0gZGF0YS5yb3RhdGVbaW5kZXhdICogTWF0aC5hYnMocHJvZ3Jlc3MgKiBtdWx0aXBsaWVyKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgJHNsaWRlRWxbMF0uc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQoc2xpZGVQcm9ncmVzcykpICsgc2xpZGVzLmxlbmd0aDsKICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0ZVN0cmluZyA9IHQuam9pbignLCAnKTsKICAgICAgICAgICAgICAgIGNvbnN0IHJvdGF0ZVN0cmluZyA9IGByb3RhdGVYKCR7clswXX1kZWcpIHJvdGF0ZVkoJHtyWzFdfWRlZykgcm90YXRlWigke3JbMl19ZGVnKWA7CiAgICAgICAgICAgICAgICBjb25zdCBzY2FsZVN0cmluZyA9IG9yaWdpbmFsUHJvZ3Jlc3MgPCAwID8gYHNjYWxlKCR7MSArICgxIC0gZGF0YS5zY2FsZSkgKiBvcmlnaW5hbFByb2dyZXNzICogbXVsdGlwbGllcn0pYCA6IGBzY2FsZSgkezEgLSAoMSAtIGRhdGEuc2NhbGUpICogb3JpZ2luYWxQcm9ncmVzcyAqIG11bHRpcGxpZXJ9KWA7CiAgICAgICAgICAgICAgICBjb25zdCBvcGFjaXR5U3RyaW5nID0gb3JpZ2luYWxQcm9ncmVzcyA8IDAgPyAxICsgKDEgLSBkYXRhLm9wYWNpdHkpICogb3JpZ2luYWxQcm9ncmVzcyAqIG11bHRpcGxpZXIgOiAxIC0gKDEgLSBkYXRhLm9wYWNpdHkpICogb3JpZ2luYWxQcm9ncmVzcyAqIG11bHRpcGxpZXI7CiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVTdHJpbmd9KSAke3JvdGF0ZVN0cmluZ30gJHtzY2FsZVN0cmluZ31gOyAvLyBTZXQgc2hhZG93cwoKICAgICAgICAgICAgICAgIGlmIChjdXN0b20gJiYgZGF0YS5zaGFkb3cgfHwgIWN1c3RvbSkgewogICAgICAgICAgICAgICAgICAgIGxldCAkc2hhZG93RWwgPSAkc2xpZGVFbC5jaGlsZHJlbignLnN3aXBlci1zbGlkZS1zaGFkb3cnKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCRzaGFkb3dFbC5sZW5ndGggPT09IDAgJiYgZGF0YS5zaGFkb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNoYWRvd0VsID0gY3JlYXRlU2hhZG93KHBhcmFtcywgJHNsaWRlRWwpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKCRzaGFkb3dFbC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hhZG93T3BhY2l0eSA9IHBhcmFtcy5zaGFkb3dQZXJQcm9ncmVzcyA/IHByb2dyZXNzICogKDEgLyBwYXJhbXMubGltaXRQcm9ncmVzcykgOiBwcm9ncmVzczsKICAgICAgICAgICAgICAgICAgICAgICAgJHNoYWRvd0VsWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1pbihNYXRoLm1heChNYXRoLmFicyhzaGFkb3dPcGFjaXR5KSwgMCksIDEpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb25zdCAkdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCAkc2xpZGVFbCk7CiAgICAgICAgICAgICAgICAkdGFyZ2V0RWwudHJhbnNmb3JtKHRyYW5zZm9ybSkuY3NzKHsKICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5U3RyaW5nCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpZiAoZGF0YS5vcmlnaW4pIHsKICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0RWwuY3NzKCd0cmFuc2Zvcm0tb3JpZ2luJywgZGF0YS5vcmlnaW4pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgY29uc3Qgc2V0VHJhbnNpdGlvbiA9IGR1cmF0aW9uID0+IHsKICAgICAgICAgICAgY29uc3QgewogICAgICAgICAgICAgICAgdHJhbnNmb3JtRWwKICAgICAgICAgICAgfSA9IHN3aXBlci5wYXJhbXMuY3JlYXRpdmVFZmZlY3Q7CiAgICAgICAgICAgIGNvbnN0ICR0cmFuc2l0aW9uRWxlbWVudHMgPSB0cmFuc2Zvcm1FbCA/IHN3aXBlci5zbGlkZXMuZmluZCh0cmFuc2Zvcm1FbCkgOiBzd2lwZXIuc2xpZGVzOwogICAgICAgICAgICAkdHJhbnNpdGlvbkVsZW1lbnRzLnRyYW5zaXRpb24oZHVyYXRpb24pLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93JykudHJhbnNpdGlvbihkdXJhdGlvbik7CiAgICAgICAgICAgIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kKHsKICAgICAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgICAgIGR1cmF0aW9uLAogICAgICAgICAgICAgICAgdHJhbnNmb3JtRWwsCiAgICAgICAgICAgICAgICBhbGxTbGlkZXM6IHRydWUKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgZWZmZWN0SW5pdCh7CiAgICAgICAgICAgIGVmZmVjdDogJ2NyZWF0aXZlJywKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICBvbiwKICAgICAgICAgICAgc2V0VHJhbnNsYXRlLAogICAgICAgICAgICBzZXRUcmFuc2l0aW9uLAogICAgICAgICAgICBwZXJzcGVjdGl2ZTogKCkgPT4gc3dpcGVyLnBhcmFtcy5jcmVhdGl2ZUVmZmVjdC5wZXJzcGVjdGl2ZSwKICAgICAgICAgICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoewogICAgICAgICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSwKICAgICAgICAgICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICFzd2lwZXIucGFyYW1zLmNzc01vZGUKICAgICAgICAgICAgfSkKICAgICAgICB9KTsKICAgIH0KCiAgICBmdW5jdGlvbiBFZmZlY3RDYXJkcyhfcmVmKSB7CiAgICAgICAgbGV0IHsKICAgICAgICAgICAgc3dpcGVyLAogICAgICAgICAgICBleHRlbmRQYXJhbXMsCiAgICAgICAgICAgIG9uCiAgICAgICAgfSA9IF9yZWY7CiAgICAgICAgZXh0ZW5kUGFyYW1zKHsKICAgICAgICAgICAgY2FyZHNFZmZlY3Q6IHsKICAgICAgICAgICAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSwKICAgICAgICAgICAgICAgIHRyYW5zZm9ybUVsOiBudWxsLAogICAgICAgICAgICAgICAgcm90YXRlOiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4gewogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBzbGlkZXMsCiAgICAgICAgICAgICAgICBhY3RpdmVJbmRleAogICAgICAgICAgICB9ID0gc3dpcGVyOwogICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmNhcmRzRWZmZWN0OwogICAgICAgICAgICBjb25zdCB7CiAgICAgICAgICAgICAgICBzdGFydFRyYW5zbGF0ZSwKICAgICAgICAgICAgICAgIGlzVG91Y2hlZAogICAgICAgICAgICB9ID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTsKICAgICAgICAgICAgY29uc3QgY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7CgogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICAgICAgY29uc3QgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7CiAgICAgICAgICAgICAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gJHNsaWRlRWxbMF0ucHJvZ3Jlc3M7CiAgICAgICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlUHJvZ3Jlc3MsIC00KSwgNCk7CiAgICAgICAgICAgICAgICBsZXQgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7CgogICAgICAgICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgIXN3aXBlci5wYXJhbXMuY3NzTW9kZSkgewogICAgICAgICAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsLnRyYW5zZm9ybShgdHJhbnNsYXRlWCgke3N3aXBlci5taW5UcmFuc2xhdGUoKX1weClgKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHsKICAgICAgICAgICAgICAgICAgICBvZmZzZXQgLT0gc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0OwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGxldCB0WCA9IHN3aXBlci5wYXJhbXMuY3NzTW9kZSA/IC1vZmZzZXQgLSBzd2lwZXIudHJhbnNsYXRlIDogLW9mZnNldDsKICAgICAgICAgICAgICAgIGxldCB0WSA9IDA7CiAgICAgICAgICAgICAgICBjb25zdCB0WiA9IC0xMDAgKiBNYXRoLmFicyhwcm9ncmVzcyk7CiAgICAgICAgICAgICAgICBsZXQgc2NhbGUgPSAxOwogICAgICAgICAgICAgICAgbGV0IHJvdGF0ZSA9IC0yICogcHJvZ3Jlc3M7CiAgICAgICAgICAgICAgICBsZXQgdFhBZGQgPSA4IC0gTWF0aC5hYnMocHJvZ3Jlc3MpICogMC43NTsKICAgICAgICAgICAgICAgIGNvbnN0IHNsaWRlSW5kZXggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLmZyb20gKyBpIDogaTsKICAgICAgICAgICAgICAgIGNvbnN0IGlzU3dpcGVUb05leHQgPSAoc2xpZGVJbmRleCA9PT0gYWN0aXZlSW5kZXggfHwgc2xpZGVJbmRleCA9PT0gYWN0aXZlSW5kZXggLSAxKSAmJiBwcm9ncmVzcyA+IDAgJiYgcHJvZ3Jlc3MgPCAxICYmIChpc1RvdWNoZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSAmJiBjdXJyZW50VHJhbnNsYXRlIDwgc3RhcnRUcmFuc2xhdGU7CiAgICAgICAgICAgICAgICBjb25zdCBpc1N3aXBlVG9QcmV2ID0gKHNsaWRlSW5kZXggPT09IGFjdGl2ZUluZGV4IHx8IHNsaWRlSW5kZXggPT09IGFjdGl2ZUluZGV4ICsgMSkgJiYgcHJvZ3Jlc3MgPCAwICYmIHByb2dyZXNzID4gLTEgJiYgKGlzVG91Y2hlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpICYmIGN1cnJlbnRUcmFuc2xhdGUgPiBzdGFydFRyYW5zbGF0ZTsKCiAgICAgICAgICAgICAgICBpZiAoaXNTd2lwZVRvTmV4dCB8fCBpc1N3aXBlVG9QcmV2KSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViUHJvZ3Jlc3MgPSAoMSAtIE1hdGguYWJzKChNYXRoLmFicyhwcm9ncmVzcykgLSAwLjUpIC8gMC41KSkgKiogMC41OwogICAgICAgICAgICAgICAgICAgIHJvdGF0ZSArPSAtMjggKiBwcm9ncmVzcyAqIHN1YlByb2dyZXNzOwogICAgICAgICAgICAgICAgICAgIHNjYWxlICs9IC0wLjUgKiBzdWJQcm9ncmVzczsKICAgICAgICAgICAgICAgICAgICB0WEFkZCArPSA5NiAqIHN1YlByb2dyZXNzOwogICAgICAgICAgICAgICAgICAgIHRZID0gYCR7LTI1ICogc3ViUHJvZ3Jlc3MgKiBNYXRoLmFicyhwcm9ncmVzcyl9JWA7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzIDwgMCkgewogICAgICAgICAgICAgICAgICAgIC8vIG5leHQKICAgICAgICAgICAgICAgICAgICB0WCA9IGBjYWxjKCR7dFh9cHggKyAoJHt0WEFkZCAqIE1hdGguYWJzKHByb2dyZXNzKX0lKSlgOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9ncmVzcyA+IDApIHsKICAgICAgICAgICAgICAgICAgICAvLyBwcmV2CiAgICAgICAgICAgICAgICAgICAgdFggPSBgY2FsYygke3RYfXB4ICsgKC0ke3RYQWRkICogTWF0aC5hYnMocHJvZ3Jlc3MpfSUpKWA7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRYID0gYCR7dFh9cHhgOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldlkgPSB0WTsKICAgICAgICAgICAgICAgICAgICB0WSA9IHRYOwogICAgICAgICAgICAgICAgICAgIHRYID0gcHJldlk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY29uc3Qgc2NhbGVTdHJpbmcgPSBwcm9ncmVzcyA8IDAgPyBgJHsxICsgKDEgLSBzY2FsZSkgKiBwcm9ncmVzc31gIDogYCR7MSAtICgxIC0gc2NhbGUpICogcHJvZ3Jlc3N9YDsKICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGAKICAgICAgICB0cmFuc2xhdGUzZCgke3RYfSwgJHt0WX0sICR7dFp9cHgpCiAgICAgICAgcm90YXRlWigke3BhcmFtcy5yb3RhdGUgPyByb3RhdGUgOiAwfWRlZykKICAgICAgICBzY2FsZSgke3NjYWxlU3RyaW5nfSkKICAgICAgYDsKCiAgICAgICAgICAgICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykgewogICAgICAgICAgICAgICAgICAgIC8vIFNldCBzaGFkb3dzCiAgICAgICAgICAgICAgICAgICAgbGV0ICRzaGFkb3dFbCA9ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93Jyk7CgogICAgICAgICAgICAgICAgICAgIGlmICgkc2hhZG93RWwubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzaGFkb3dFbCA9IGNyZWF0ZVNoYWRvdyhwYXJhbXMsICRzbGlkZUVsKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmICgkc2hhZG93RWwubGVuZ3RoKSAkc2hhZG93RWxbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWluKE1hdGgubWF4KChNYXRoLmFicyhwcm9ncmVzcykgLSAwLjUpIC8gMC41LCAwKSwgMSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJHNsaWRlRWxbMF0uc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQoc2xpZGVQcm9ncmVzcykpICsgc2xpZGVzLmxlbmd0aDsKICAgICAgICAgICAgICAgIGNvbnN0ICR0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsICRzbGlkZUVsKTsKICAgICAgICAgICAgICAgICR0YXJnZXRFbC50cmFuc2Zvcm0odHJhbnNmb3JtKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7CiAgICAgICAgICAgIGNvbnN0IHsKICAgICAgICAgICAgICAgIHRyYW5zZm9ybUVsCiAgICAgICAgICAgIH0gPSBzd2lwZXIucGFyYW1zLmNhcmRzRWZmZWN0OwogICAgICAgICAgICBjb25zdCAkdHJhbnNpdGlvbkVsZW1lbnRzID0gdHJhbnNmb3JtRWwgPyBzd2lwZXIuc2xpZGVzLmZpbmQodHJhbnNmb3JtRWwpIDogc3dpcGVyLnNsaWRlczsKICAgICAgICAgICAgJHRyYW5zaXRpb25FbGVtZW50cy50cmFuc2l0aW9uKGR1cmF0aW9uKS5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdycpLnRyYW5zaXRpb24oZHVyYXRpb24pOwogICAgICAgICAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7CiAgICAgICAgICAgICAgICBzd2lwZXIsCiAgICAgICAgICAgICAgICBkdXJhdGlvbiwKICAgICAgICAgICAgICAgIHRyYW5zZm9ybUVsCiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIGVmZmVjdEluaXQoewogICAgICAgICAgICBlZmZlY3Q6ICdjYXJkcycsCiAgICAgICAgICAgIHN3aXBlciwKICAgICAgICAgICAgb24sCiAgICAgICAgICAgIHNldFRyYW5zbGF0ZSwKICAgICAgICAgICAgc2V0VHJhbnNpdGlvbiwKICAgICAgICAgICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsCiAgICAgICAgICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHsKICAgICAgICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsCiAgICAgICAgICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiAhc3dpcGVyLnBhcmFtcy5jc3NNb2RlCiAgICAgICAgICAgIH0pCiAgICAgICAgfSk7CiAgICB9CgogICAgLy8gU3dpcGVyIENsYXNzCiAgICBjb25zdCBtb2R1bGVzID0gW1ZpcnR1YWwsIEtleWJvYXJkLCBNb3VzZXdoZWVsLCBOYXZpZ2F0aW9uLCBQYWdpbmF0aW9uLCBTY3JvbGxiYXIsIFBhcmFsbGF4LCBab29tLCBMYXp5LCBDb250cm9sbGVyLCBBMTF5LCBIaXN0b3J5LCBIYXNoTmF2aWdhdGlvbiwgQXV0b3BsYXksIFRodW1iLCBmcmVlTW9kZSwgR3JpZCwgTWFuaXB1bGF0aW9uLCBFZmZlY3RGYWRlLCBFZmZlY3RDdWJlLCBFZmZlY3RGbGlwLCBFZmZlY3RDb3ZlcmZsb3csIEVmZmVjdENyZWF0aXZlLCBFZmZlY3RDYXJkc107CiAgICBTd2lwZXIudXNlKG1vZHVsZXMpOwoKICAgIHJldHVybiBTd2lwZXI7Cgp9KSk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXBlci1idW5kbGUuanMubWFwDQo=","CacheKey":"fMof5w00AteiKMPNQ02XnDAX4jk"}